(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({2:[function(require,module,exports){
_hmr["websocket:null"].initModule("lib/d3.v4.min.js", module);
(function(){
// https://d3js.org Version 4.10.2. Copyright 2017 Mike Bostock.
(function (t, n) {
  "object" == typeof exports && "undefined" != typeof module ? n(exports) : "function" == typeof define && define.amd ? define(["exports"], n) : n(t.d3 = t.d3 || {});
})(this, function (t) {
  "use strict";
  function n(t) {
    return function (n, e) {
      return ss(t(n), e);
    };
  }function e(t, n) {
    return [t, n];
  }function r(t, n, e) {
    var r = (n - t) / Math.max(0, e),
        i = Math.floor(Math.log(r) / Math.LN10),
        o = r / Math.pow(10, i);return i >= 0 ? (o >= Ts ? 10 : o >= ks ? 5 : o >= Ns ? 2 : 1) * Math.pow(10, i) : -Math.pow(10, -i) / (o >= Ts ? 10 : o >= ks ? 5 : o >= Ns ? 2 : 1);
  }function i(t, n, e) {
    var r = Math.abs(n - t) / Math.max(0, e),
        i = Math.pow(10, Math.floor(Math.log(r) / Math.LN10)),
        o = r / i;return o >= Ts ? i *= 10 : o >= ks ? i *= 5 : o >= Ns && (i *= 2), n < t ? -i : i;
  }function o(t) {
    return t.length;
  }function u(t) {
    return "translate(" + (t + .5) + ",0)";
  }function a(t) {
    return "translate(0," + (t + .5) + ")";
  }function c(t) {
    return function (n) {
      return +t(n);
    };
  }function s(t) {
    var n = Math.max(0, t.bandwidth() - 1) / 2;return t.round() && (n = Math.round(n)), function (e) {
      return +t(e) + n;
    };
  }function f() {
    return !this.__axis;
  }function l(t, n) {
    function e(e) {
      var u = null == i ? n.ticks ? n.ticks.apply(n, r) : n.domain() : i,
          a = null == o ? n.tickFormat ? n.tickFormat.apply(n, r) : Ls : o,
          y = Math.max(l, 0) + p,
          g = n.range(),
          m = +g[0] + .5,
          x = +g[g.length - 1] + .5,
          b = (n.bandwidth ? s : c)(n.copy()),
          w = e.selection ? e.selection() : e,
          M = w.selectAll(".domain").data([null]),
          T = w.selectAll(".tick").data(u, n).order(),
          k = T.exit(),
          N = T.enter().append("g").attr("class", "tick"),
          S = T.select("line"),
          E = T.select("text");M = M.merge(M.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "#000")), T = T.merge(N), S = S.merge(N.append("line").attr("stroke", "#000").attr(v + "2", d * l)), E = E.merge(N.append("text").attr("fill", "#000").attr(v, d * y).attr("dy", t === qs ? "0em" : t === Ds ? "0.71em" : "0.32em")), e !== w && (M = M.transition(e), T = T.transition(e), S = S.transition(e), E = E.transition(e), k = k.transition(e).attr("opacity", Fs).attr("transform", function (t) {
        return isFinite(t = b(t)) ? _(t) : this.getAttribute("transform");
      }), N.attr("opacity", Fs).attr("transform", function (t) {
        var n = this.parentNode.__axis;return _(n && isFinite(n = n(t)) ? n : b(t));
      })), k.remove(), M.attr("d", t === Os || t == Us ? "M" + d * h + "," + m + "H0.5V" + x + "H" + d * h : "M" + m + "," + d * h + "V0.5H" + x + "V" + d * h), T.attr("opacity", 1).attr("transform", function (t) {
        return _(b(t));
      }), S.attr(v + "2", d * l), E.attr(v, d * y).text(a), w.filter(f).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", t === Us ? "start" : t === Os ? "end" : "middle"), w.each(function () {
        this.__axis = b;
      });
    }var r = [],
        i = null,
        o = null,
        l = 6,
        h = 6,
        p = 3,
        d = t === qs || t === Os ? -1 : 1,
        v = t === Os || t === Us ? "x" : "y",
        _ = t === qs || t === Ds ? u : a;return e.scale = function (t) {
      return arguments.length ? (n = t, e) : n;
    }, e.ticks = function () {
      return r = Rs.call(arguments), e;
    }, e.tickArguments = function (t) {
      return arguments.length ? (r = null == t ? [] : Rs.call(t), e) : r.slice();
    }, e.tickValues = function (t) {
      return arguments.length ? (i = null == t ? null : Rs.call(t), e) : i && i.slice();
    }, e.tickFormat = function (t) {
      return arguments.length ? (o = t, e) : o;
    }, e.tickSize = function (t) {
      return arguments.length ? (l = h = +t, e) : l;
    }, e.tickSizeInner = function (t) {
      return arguments.length ? (l = +t, e) : l;
    }, e.tickSizeOuter = function (t) {
      return arguments.length ? (h = +t, e) : h;
    }, e.tickPadding = function (t) {
      return arguments.length ? (p = +t, e) : p;
    }, e;
  }function h() {
    for (var t, n = 0, e = arguments.length, r = {}; n < e; ++n) {
      if (!(t = arguments[n] + "") || t in r) throw new Error("illegal type: " + t);r[t] = [];
    }return new p(r);
  }function p(t) {
    this._ = t;
  }function d(t, n) {
    return t.trim().split(/^|\s+/).map(function (t) {
      var e = "",
          r = t.indexOf(".");if (r >= 0 && (e = t.slice(r + 1), t = t.slice(0, r)), t && !n.hasOwnProperty(t)) throw new Error("unknown type: " + t);return { type: t, name: e };
    });
  }function v(t, n) {
    for (var e, r = 0, i = t.length; r < i; ++r) if ((e = t[r]).name === n) return e.value;
  }function _(t, n, e) {
    for (var r = 0, i = t.length; r < i; ++r) if (t[r].name === n) {
      t[r] = Is, t = t.slice(0, r).concat(t.slice(r + 1));break;
    }return null != e && t.push({ name: n, value: e }), t;
  }function y(t) {
    return function () {
      var n = this.ownerDocument,
          e = this.namespaceURI;return e === Ys && n.documentElement.namespaceURI === Ys ? n.createElement(t) : n.createElementNS(e, t);
    };
  }function g(t) {
    return function () {
      return this.ownerDocument.createElementNS(t.space, t.local);
    };
  }function m() {
    return new x();
  }function x() {
    this._ = "@" + (++Xs).toString(36);
  }function b(t, n, e) {
    return t = w(t, n, e), function (n) {
      var e = n.relatedTarget;e && (e === this || 8 & e.compareDocumentPosition(this)) || t.call(this, n);
    };
  }function w(n, e, r) {
    return function (i) {
      var o = t.event;t.event = i;try {
        n.call(this, this.__data__, e, r);
      } finally {
        t.event = o;
      }
    };
  }function M(t) {
    return t.trim().split(/^|\s+/).map(function (t) {
      var n = "",
          e = t.indexOf(".");return e >= 0 && (n = t.slice(e + 1), t = t.slice(0, e)), { type: t, name: n };
    });
  }function T(t) {
    return function () {
      var n = this.__on;if (n) {
        for (var e, r = 0, i = -1, o = n.length; r < o; ++r) e = n[r], t.type && e.type !== t.type || e.name !== t.name ? n[++i] = e : this.removeEventListener(e.type, e.listener, e.capture);++i ? n.length = i : delete this.__on;
      }
    };
  }function k(t, n, e) {
    var r = Gs.hasOwnProperty(t.type) ? b : w;return function (i, o, u) {
      var a,
          c = this.__on,
          s = r(n, o, u);if (c) for (var f = 0, l = c.length; f < l; ++f) if ((a = c[f]).type === t.type && a.name === t.name) return this.removeEventListener(a.type, a.listener, a.capture), this.addEventListener(a.type, a.listener = s, a.capture = e), void (a.value = n);this.addEventListener(t.type, s, e), a = { type: t.type, name: t.name, value: n, listener: s, capture: e }, c ? c.push(a) : this.__on = [a];
    };
  }function N(n, e, r, i) {
    var o = t.event;n.sourceEvent = t.event, t.event = n;try {
      return e.apply(r, i);
    } finally {
      t.event = o;
    }
  }function S() {}function E() {
    return [];
  }function A(t, n) {
    this.ownerDocument = t.ownerDocument, this.namespaceURI = t.namespaceURI, this._next = null, this._parent = t, this.__data__ = n;
  }function C(t, n, e, r, i, o) {
    for (var u, a = 0, c = n.length, s = o.length; a < s; ++a) (u = n[a]) ? (u.__data__ = o[a], r[a] = u) : e[a] = new A(t, o[a]);for (; a < c; ++a) (u = n[a]) && (i[a] = u);
  }function z(t, n, e, r, i, o, u) {
    var a,
        c,
        s,
        f = {},
        l = n.length,
        h = o.length,
        p = new Array(l);for (a = 0; a < l; ++a) (c = n[a]) && (p[a] = s = of + u.call(c, c.__data__, a, n), s in f ? i[a] = c : f[s] = c);for (a = 0; a < h; ++a) (c = f[s = of + u.call(t, o[a], a, o)]) ? (r[a] = c, c.__data__ = o[a], f[s] = null) : e[a] = new A(t, o[a]);for (a = 0; a < l; ++a) (c = n[a]) && f[p[a]] === c && (i[a] = c);
  }function P(t, n) {
    return t < n ? -1 : t > n ? 1 : t >= n ? 0 : NaN;
  }function R(t) {
    return function () {
      this.removeAttribute(t);
    };
  }function L(t) {
    return function () {
      this.removeAttributeNS(t.space, t.local);
    };
  }function q(t, n) {
    return function () {
      this.setAttribute(t, n);
    };
  }function U(t, n) {
    return function () {
      this.setAttributeNS(t.space, t.local, n);
    };
  }function D(t, n) {
    return function () {
      var e = n.apply(this, arguments);null == e ? this.removeAttribute(t) : this.setAttribute(t, e);
    };
  }function O(t, n) {
    return function () {
      var e = n.apply(this, arguments);null == e ? this.removeAttributeNS(t.space, t.local) : this.setAttributeNS(t.space, t.local, e);
    };
  }function F(t) {
    return function () {
      this.style.removeProperty(t);
    };
  }function I(t, n, e) {
    return function () {
      this.style.setProperty(t, n, e);
    };
  }function Y(t, n, e) {
    return function () {
      var r = n.apply(this, arguments);null == r ? this.style.removeProperty(t) : this.style.setProperty(t, r, e);
    };
  }function B(t, n) {
    return t.style.getPropertyValue(n) || uf(t).getComputedStyle(t, null).getPropertyValue(n);
  }function j(t) {
    return function () {
      delete this[t];
    };
  }function H(t, n) {
    return function () {
      this[t] = n;
    };
  }function X(t, n) {
    return function () {
      var e = n.apply(this, arguments);null == e ? delete this[t] : this[t] = e;
    };
  }function $(t) {
    return t.trim().split(/^|\s+/);
  }function V(t) {
    return t.classList || new W(t);
  }function W(t) {
    this._node = t, this._names = $(t.getAttribute("class") || "");
  }function Z(t, n) {
    for (var e = V(t), r = -1, i = n.length; ++r < i;) e.add(n[r]);
  }function G(t, n) {
    for (var e = V(t), r = -1, i = n.length; ++r < i;) e.remove(n[r]);
  }function J(t) {
    return function () {
      Z(this, t);
    };
  }function Q(t) {
    return function () {
      G(this, t);
    };
  }function K(t, n) {
    return function () {
      (n.apply(this, arguments) ? Z : G)(this, t);
    };
  }function tt() {
    this.textContent = "";
  }function nt(t) {
    return function () {
      this.textContent = t;
    };
  }function et(t) {
    return function () {
      var n = t.apply(this, arguments);this.textContent = null == n ? "" : n;
    };
  }function rt() {
    this.innerHTML = "";
  }function it(t) {
    return function () {
      this.innerHTML = t;
    };
  }function ot(t) {
    return function () {
      var n = t.apply(this, arguments);this.innerHTML = null == n ? "" : n;
    };
  }function ut() {
    this.nextSibling && this.parentNode.appendChild(this);
  }function at() {
    this.previousSibling && this.parentNode.insertBefore(this, this.parentNode.firstChild);
  }function ct() {
    return null;
  }function st() {
    var t = this.parentNode;t && t.removeChild(this);
  }function ft(t, n, e) {
    var r = uf(t),
        i = r.CustomEvent;"function" == typeof i ? i = new i(n, e) : (i = r.document.createEvent("Event"), e ? (i.initEvent(n, e.bubbles, e.cancelable), i.detail = e.detail) : i.initEvent(n, !1, !1)), t.dispatchEvent(i);
  }function lt(t, n) {
    return function () {
      return ft(this, t, n);
    };
  }function ht(t, n) {
    return function () {
      return ft(this, t, n.apply(this, arguments));
    };
  }function pt(t, n) {
    this._groups = t, this._parents = n;
  }function dt() {
    return new pt([[document.documentElement]], af);
  }function vt() {
    t.event.stopImmediatePropagation();
  }function _t(t, n) {
    var e = t.document.documentElement,
        r = cf(t).on("dragstart.drag", null);n && (r.on("click.drag", ff, !0), setTimeout(function () {
      r.on("click.drag", null);
    }, 0)), "onselectstart" in e ? r.on("selectstart.drag", null) : (e.style.MozUserSelect = e.__noselect, delete e.__noselect);
  }function yt(t, n, e, r, i, o, u, a, c, s) {
    this.target = t, this.type = n, this.subject = e, this.identifier = r, this.active = i, this.x = o, this.y = u, this.dx = a, this.dy = c, this._ = s;
  }function gt() {
    return !t.event.button;
  }function mt() {
    return this.parentNode;
  }function xt(n) {
    return null == n ? { x: t.event.x, y: t.event.y } : n;
  }function bt() {
    return "ontouchstart" in this;
  }function wt(t, n) {
    var e = Object.create(t.prototype);for (var r in n) e[r] = n[r];return e;
  }function Mt() {}function Tt(t) {
    var n;return t = (t + "").trim().toLowerCase(), (n = yf.exec(t)) ? (n = parseInt(n[1], 16), new At(n >> 8 & 15 | n >> 4 & 240, n >> 4 & 15 | 240 & n, (15 & n) << 4 | 15 & n, 1)) : (n = gf.exec(t)) ? kt(parseInt(n[1], 16)) : (n = mf.exec(t)) ? new At(n[1], n[2], n[3], 1) : (n = xf.exec(t)) ? new At(255 * n[1] / 100, 255 * n[2] / 100, 255 * n[3] / 100, 1) : (n = bf.exec(t)) ? Nt(n[1], n[2], n[3], n[4]) : (n = wf.exec(t)) ? Nt(255 * n[1] / 100, 255 * n[2] / 100, 255 * n[3] / 100, n[4]) : (n = Mf.exec(t)) ? Ct(n[1], n[2] / 100, n[3] / 100, 1) : (n = Tf.exec(t)) ? Ct(n[1], n[2] / 100, n[3] / 100, n[4]) : kf.hasOwnProperty(t) ? kt(kf[t]) : "transparent" === t ? new At(NaN, NaN, NaN, 0) : null;
  }function kt(t) {
    return new At(t >> 16 & 255, t >> 8 & 255, 255 & t, 1);
  }function Nt(t, n, e, r) {
    return r <= 0 && (t = n = e = NaN), new At(t, n, e, r);
  }function St(t) {
    return t instanceof Mt || (t = Tt(t)), t ? (t = t.rgb(), new At(t.r, t.g, t.b, t.opacity)) : new At();
  }function Et(t, n, e, r) {
    return 1 === arguments.length ? St(t) : new At(t, n, e, null == r ? 1 : r);
  }function At(t, n, e, r) {
    this.r = +t, this.g = +n, this.b = +e, this.opacity = +r;
  }function Ct(t, n, e, r) {
    return r <= 0 ? t = n = e = NaN : e <= 0 || e >= 1 ? t = n = NaN : n <= 0 && (t = NaN), new Rt(t, n, e, r);
  }function zt(t) {
    if (t instanceof Rt) return new Rt(t.h, t.s, t.l, t.opacity);if (t instanceof Mt || (t = Tt(t)), !t) return new Rt();if (t instanceof Rt) return t;var n = (t = t.rgb()).r / 255,
        e = t.g / 255,
        r = t.b / 255,
        i = Math.min(n, e, r),
        o = Math.max(n, e, r),
        u = NaN,
        a = o - i,
        c = (o + i) / 2;return a ? (u = n === o ? (e - r) / a + 6 * (e < r) : e === o ? (r - n) / a + 2 : (n - e) / a + 4, a /= c < .5 ? o + i : 2 - o - i, u *= 60) : a = c > 0 && c < 1 ? 0 : u, new Rt(u, a, c, t.opacity);
  }function Pt(t, n, e, r) {
    return 1 === arguments.length ? zt(t) : new Rt(t, n, e, null == r ? 1 : r);
  }function Rt(t, n, e, r) {
    this.h = +t, this.s = +n, this.l = +e, this.opacity = +r;
  }function Lt(t, n, e) {
    return 255 * (t < 60 ? n + (e - n) * t / 60 : t < 180 ? e : t < 240 ? n + (e - n) * (240 - t) / 60 : n);
  }function qt(t) {
    if (t instanceof Dt) return new Dt(t.l, t.a, t.b, t.opacity);if (t instanceof Ht) {
      var n = t.h * Nf;return new Dt(t.l, Math.cos(n) * t.c, Math.sin(n) * t.c, t.opacity);
    }t instanceof At || (t = St(t));var e = Yt(t.r),
        r = Yt(t.g),
        i = Yt(t.b),
        o = Ot((.4124564 * e + .3575761 * r + .1804375 * i) / Ef),
        u = Ot((.2126729 * e + .7151522 * r + .072175 * i) / Af);return new Dt(116 * u - 16, 500 * (o - u), 200 * (u - Ot((.0193339 * e + .119192 * r + .9503041 * i) / Cf)), t.opacity);
  }function Ut(t, n, e, r) {
    return 1 === arguments.length ? qt(t) : new Dt(t, n, e, null == r ? 1 : r);
  }function Dt(t, n, e, r) {
    this.l = +t, this.a = +n, this.b = +e, this.opacity = +r;
  }function Ot(t) {
    return t > Lf ? Math.pow(t, 1 / 3) : t / Rf + zf;
  }function Ft(t) {
    return t > Pf ? t * t * t : Rf * (t - zf);
  }function It(t) {
    return 255 * (t <= .0031308 ? 12.92 * t : 1.055 * Math.pow(t, 1 / 2.4) - .055);
  }function Yt(t) {
    return (t /= 255) <= .04045 ? t / 12.92 : Math.pow((t + .055) / 1.055, 2.4);
  }function Bt(t) {
    if (t instanceof Ht) return new Ht(t.h, t.c, t.l, t.opacity);t instanceof Dt || (t = qt(t));var n = Math.atan2(t.b, t.a) * Sf;return new Ht(n < 0 ? n + 360 : n, Math.sqrt(t.a * t.a + t.b * t.b), t.l, t.opacity);
  }function jt(t, n, e, r) {
    return 1 === arguments.length ? Bt(t) : new Ht(t, n, e, null == r ? 1 : r);
  }function Ht(t, n, e, r) {
    this.h = +t, this.c = +n, this.l = +e, this.opacity = +r;
  }function Xt(t) {
    if (t instanceof Vt) return new Vt(t.h, t.s, t.l, t.opacity);t instanceof At || (t = St(t));var n = t.r / 255,
        e = t.g / 255,
        r = t.b / 255,
        i = (Bf * r + If * n - Yf * e) / (Bf + If - Yf),
        o = r - i,
        u = (Ff * (e - i) - Df * o) / Of,
        a = Math.sqrt(u * u + o * o) / (Ff * i * (1 - i)),
        c = a ? Math.atan2(u, o) * Sf - 120 : NaN;return new Vt(c < 0 ? c + 360 : c, a, i, t.opacity);
  }function $t(t, n, e, r) {
    return 1 === arguments.length ? Xt(t) : new Vt(t, n, e, null == r ? 1 : r);
  }function Vt(t, n, e, r) {
    this.h = +t, this.s = +n, this.l = +e, this.opacity = +r;
  }function Wt(t, n, e, r, i) {
    var o = t * t,
        u = o * t;return ((1 - 3 * t + 3 * o - u) * n + (4 - 6 * o + 3 * u) * e + (1 + 3 * t + 3 * o - 3 * u) * r + u * i) / 6;
  }function Zt(t, n) {
    return function (e) {
      return t + e * n;
    };
  }function Gt(t, n, e) {
    return t = Math.pow(t, e), n = Math.pow(n, e) - t, e = 1 / e, function (r) {
      return Math.pow(t + r * n, e);
    };
  }function Jt(t, n) {
    var e = n - t;return e ? Zt(t, e > 180 || e < -180 ? e - 360 * Math.round(e / 360) : e) : Jf(isNaN(t) ? n : t);
  }function Qt(t) {
    return 1 == (t = +t) ? Kt : function (n, e) {
      return e - n ? Gt(n, e, t) : Jf(isNaN(n) ? e : n);
    };
  }function Kt(t, n) {
    var e = n - t;return e ? Zt(t, e) : Jf(isNaN(t) ? n : t);
  }function tn(t) {
    return function (n) {
      var e,
          r,
          i = n.length,
          o = new Array(i),
          u = new Array(i),
          a = new Array(i);for (e = 0; e < i; ++e) r = Et(n[e]), o[e] = r.r || 0, u[e] = r.g || 0, a[e] = r.b || 0;return o = t(o), u = t(u), a = t(a), r.opacity = 1, function (t) {
        return r.r = o(t), r.g = u(t), r.b = a(t), r + "";
      };
    };
  }function nn(t) {
    return function () {
      return t;
    };
  }function en(t) {
    return function (n) {
      return t(n) + "";
    };
  }function rn(t, n, e, r) {
    function i(t) {
      return t.length ? t.pop() + " " : "";
    }function o(t, r, i, o, u, a) {
      if (t !== i || r !== o) {
        var c = u.push("translate(", null, n, null, e);a.push({ i: c - 4, x: rl(t, i) }, { i: c - 2, x: rl(r, o) });
      } else (i || o) && u.push("translate(" + i + n + o + e);
    }function u(t, n, e, o) {
      t !== n ? (t - n > 180 ? n += 360 : n - t > 180 && (t += 360), o.push({ i: e.push(i(e) + "rotate(", null, r) - 2, x: rl(t, n) })) : n && e.push(i(e) + "rotate(" + n + r);
    }function a(t, n, e, o) {
      t !== n ? o.push({ i: e.push(i(e) + "skewX(", null, r) - 2, x: rl(t, n) }) : n && e.push(i(e) + "skewX(" + n + r);
    }function c(t, n, e, r, o, u) {
      if (t !== e || n !== r) {
        var a = o.push(i(o) + "scale(", null, ",", null, ")");u.push({ i: a - 4, x: rl(t, e) }, { i: a - 2, x: rl(n, r) });
      } else 1 === e && 1 === r || o.push(i(o) + "scale(" + e + "," + r + ")");
    }return function (n, e) {
      var r = [],
          i = [];return n = t(n), e = t(e), o(n.translateX, n.translateY, e.translateX, e.translateY, r, i), u(n.rotate, e.rotate, r, i), a(n.skewX, e.skewX, r, i), c(n.scaleX, n.scaleY, e.scaleX, e.scaleY, r, i), n = e = null, function (t) {
        for (var n, e = -1, o = i.length; ++e < o;) r[(n = i[e]).i] = n.x(t);return r.join("");
      };
    };
  }function on(t) {
    return ((t = Math.exp(t)) + 1 / t) / 2;
  }function un(t) {
    return ((t = Math.exp(t)) - 1 / t) / 2;
  }function an(t) {
    return ((t = Math.exp(2 * t)) - 1) / (t + 1);
  }function cn(t) {
    return function (n, e) {
      var r = t((n = Pt(n)).h, (e = Pt(e)).h),
          i = Kt(n.s, e.s),
          o = Kt(n.l, e.l),
          u = Kt(n.opacity, e.opacity);return function (t) {
        return n.h = r(t), n.s = i(t), n.l = o(t), n.opacity = u(t), n + "";
      };
    };
  }function sn(t) {
    return function (n, e) {
      var r = t((n = jt(n)).h, (e = jt(e)).h),
          i = Kt(n.c, e.c),
          o = Kt(n.l, e.l),
          u = Kt(n.opacity, e.opacity);return function (t) {
        return n.h = r(t), n.c = i(t), n.l = o(t), n.opacity = u(t), n + "";
      };
    };
  }function fn(t) {
    return function n(e) {
      function r(n, r) {
        var i = t((n = $t(n)).h, (r = $t(r)).h),
            o = Kt(n.s, r.s),
            u = Kt(n.l, r.l),
            a = Kt(n.opacity, r.opacity);return function (t) {
          return n.h = i(t), n.s = o(t), n.l = u(Math.pow(t, e)), n.opacity = a(t), n + "";
        };
      }return e = +e, r.gamma = n, r;
    }(1);
  }function ln() {
    return El || (zl(hn), El = Cl.now() + Al);
  }function hn() {
    El = 0;
  }function pn() {
    this._call = this._time = this._next = null;
  }function dn(t, n, e) {
    var r = new pn();return r.restart(t, n, e), r;
  }function vn() {
    ln(), ++Ml;for (var t, n = Vf; n;) (t = El - n._time) >= 0 && n._call.call(null, t), n = n._next;--Ml;
  }function _n() {
    El = (Sl = Cl.now()) + Al, Ml = Tl = 0;try {
      vn();
    } finally {
      Ml = 0, gn(), El = 0;
    }
  }function yn() {
    var t = Cl.now(),
        n = t - Sl;n > Nl && (Al -= n, Sl = t);
  }function gn() {
    for (var t, n, e = Vf, r = 1 / 0; e;) e._call ? (r > e._time && (r = e._time), t = e, e = e._next) : (n = e._next, e._next = null, e = t ? t._next = n : Vf = n);Wf = t, mn(r);
  }function mn(t) {
    Ml || (Tl && (Tl = clearTimeout(Tl)), t - El > 24 ? (t < 1 / 0 && (Tl = setTimeout(_n, t - Cl.now() - Al)), kl && (kl = clearInterval(kl))) : (kl || (Sl = Cl.now(), kl = setInterval(yn, Nl)), Ml = 1, zl(_n)));
  }function xn(t, n) {
    var e = t.__transition;if (!e || !(e = e[n]) || e.state > ql) throw new Error("too late");return e;
  }function bn(t, n) {
    var e = t.__transition;if (!e || !(e = e[n]) || e.state > Dl) throw new Error("too late");return e;
  }function wn(t, n) {
    var e = t.__transition;if (!e || !(e = e[n])) throw new Error("too late");return e;
  }function Mn(t, n, e) {
    function r(c) {
      var s, f, l, h;if (e.state !== Ul) return o();for (s in a) if ((h = a[s]).name === e.name) {
        if (h.state === Ol) return Pl(r);h.state === Fl ? (h.state = Yl, h.timer.stop(), h.on.call("interrupt", t, t.__data__, h.index, h.group), delete a[s]) : +s < n && (h.state = Yl, h.timer.stop(), delete a[s]);
      }if (Pl(function () {
        e.state === Ol && (e.state = Fl, e.timer.restart(i, e.delay, e.time), i(c));
      }), e.state = Dl, e.on.call("start", t, t.__data__, e.index, e.group), e.state === Dl) {
        for (e.state = Ol, u = new Array(l = e.tween.length), s = 0, f = -1; s < l; ++s) (h = e.tween[s].value.call(t, t.__data__, e.index, e.group)) && (u[++f] = h);u.length = f + 1;
      }
    }function i(n) {
      for (var r = n < e.duration ? e.ease.call(null, n / e.duration) : (e.timer.restart(o), e.state = Il, 1), i = -1, a = u.length; ++i < a;) u[i].call(null, r);e.state === Il && (e.on.call("end", t, t.__data__, e.index, e.group), o());
    }function o() {
      e.state = Yl, e.timer.stop(), delete a[n];for (var r in a) return;delete t.__transition;
    }var u,
        a = t.__transition;a[n] = e, e.timer = dn(function (t) {
      e.state = Ul, e.timer.restart(r, e.delay, e.time), e.delay <= t && r(t - e.delay);
    }, 0, e.time);
  }function Tn(t, n) {
    var e, r;return function () {
      var i = bn(this, t),
          o = i.tween;if (o !== e) for (var u = 0, a = (r = e = o).length; u < a; ++u) if (r[u].name === n) {
        (r = r.slice()).splice(u, 1);break;
      }i.tween = r;
    };
  }function kn(t, n, e) {
    var r, i;if ("function" != typeof e) throw new Error();return function () {
      var o = bn(this, t),
          u = o.tween;if (u !== r) {
        i = (r = u).slice();for (var a = { name: n, value: e }, c = 0, s = i.length; c < s; ++c) if (i[c].name === n) {
          i[c] = a;break;
        }c === s && i.push(a);
      }o.tween = i;
    };
  }function Nn(t, n, e) {
    var r = t._id;return t.each(function () {
      var t = bn(this, r);(t.value || (t.value = {}))[n] = e.apply(this, arguments);
    }), function (t) {
      return wn(t, r).value[n];
    };
  }function Sn(t) {
    return function () {
      this.removeAttribute(t);
    };
  }function En(t) {
    return function () {
      this.removeAttributeNS(t.space, t.local);
    };
  }function An(t, n, e) {
    var r, i;return function () {
      var o = this.getAttribute(t);return o === e ? null : o === r ? i : i = n(r = o, e);
    };
  }function Cn(t, n, e) {
    var r, i;return function () {
      var o = this.getAttributeNS(t.space, t.local);return o === e ? null : o === r ? i : i = n(r = o, e);
    };
  }function zn(t, n, e) {
    var r, i, o;return function () {
      var u,
          a = e(this);{
        if (null != a) return (u = this.getAttribute(t)) === a ? null : u === r && a === i ? o : o = n(r = u, i = a);this.removeAttribute(t);
      }
    };
  }function Pn(t, n, e) {
    var r, i, o;return function () {
      var u,
          a = e(this);{
        if (null != a) return (u = this.getAttributeNS(t.space, t.local)) === a ? null : u === r && a === i ? o : o = n(r = u, i = a);this.removeAttributeNS(t.space, t.local);
      }
    };
  }function Rn(t, n) {
    function e() {
      var e = this,
          r = n.apply(e, arguments);return r && function (n) {
        e.setAttributeNS(t.space, t.local, r(n));
      };
    }return e._value = n, e;
  }function Ln(t, n) {
    function e() {
      var e = this,
          r = n.apply(e, arguments);return r && function (n) {
        e.setAttribute(t, r(n));
      };
    }return e._value = n, e;
  }function qn(t, n) {
    return function () {
      xn(this, t).delay = +n.apply(this, arguments);
    };
  }function Un(t, n) {
    return n = +n, function () {
      xn(this, t).delay = n;
    };
  }function Dn(t, n) {
    return function () {
      bn(this, t).duration = +n.apply(this, arguments);
    };
  }function On(t, n) {
    return n = +n, function () {
      bn(this, t).duration = n;
    };
  }function Fn(t, n) {
    if ("function" != typeof n) throw new Error();return function () {
      bn(this, t).ease = n;
    };
  }function In(t) {
    return (t + "").trim().split(/^|\s+/).every(function (t) {
      var n = t.indexOf(".");return n >= 0 && (t = t.slice(0, n)), !t || "start" === t;
    });
  }function Yn(t, n, e) {
    var r,
        i,
        o = In(n) ? xn : bn;return function () {
      var u = o(this, t),
          a = u.on;a !== r && (i = (r = a).copy()).on(n, e), u.on = i;
    };
  }function Bn(t) {
    return function () {
      var n = this.parentNode;for (var e in this.__transition) if (+e !== t) return;n && n.removeChild(this);
    };
  }function jn(t, n) {
    var e, r, i;return function () {
      var o = B(this, t),
          u = (this.style.removeProperty(t), B(this, t));return o === u ? null : o === e && u === r ? i : i = n(e = o, r = u);
    };
  }function Hn(t) {
    return function () {
      this.style.removeProperty(t);
    };
  }function Xn(t, n, e) {
    var r, i;return function () {
      var o = B(this, t);return o === e ? null : o === r ? i : i = n(r = o, e);
    };
  }function $n(t, n, e) {
    var r, i, o;return function () {
      var u = B(this, t),
          a = e(this);return null == a && (this.style.removeProperty(t), a = B(this, t)), u === a ? null : u === r && a === i ? o : o = n(r = u, i = a);
    };
  }function Vn(t, n, e) {
    function r() {
      var r = this,
          i = n.apply(r, arguments);return i && function (n) {
        r.style.setProperty(t, i(n), e);
      };
    }return r._value = n, r;
  }function Wn(t) {
    return function () {
      this.textContent = t;
    };
  }function Zn(t) {
    return function () {
      var n = t(this);this.textContent = null == n ? "" : n;
    };
  }function Gn(t, n, e, r) {
    this._groups = t, this._parents = n, this._name = e, this._id = r;
  }function Jn(t) {
    return dt().transition(t);
  }function Qn() {
    return ++$l;
  }function Kn(t) {
    return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
  }function te(t) {
    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
  }function ne(t) {
    return (1 - Math.cos(Jl * t)) / 2;
  }function ee(t) {
    return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
  }function re(t) {
    return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
  }function ie(t) {
    return (t = +t) < Kl ? ch * t * t : t < nh ? ch * (t -= th) * t + eh : t < ih ? ch * (t -= rh) * t + oh : ch * (t -= uh) * t + ah;
  }function oe(t, n) {
    for (var e; !(e = t.__transition) || !(e = e[n]);) if (!(t = t.parentNode)) return _h.time = ln(), _h;return e;
  }function ue() {
    t.event.stopImmediatePropagation();
  }function ae(t) {
    return { type: t };
  }function ce() {
    return !t.event.button;
  }function se() {
    var t = this.ownerSVGElement || this;return [[0, 0], [t.width.baseVal.value, t.height.baseVal.value]];
  }function fe(t) {
    for (; !t.__brush;) if (!(t = t.parentNode)) return;return t.__brush;
  }function le(t) {
    return t[0][0] === t[1][0] || t[0][1] === t[1][1];
  }function he(n) {
    function e(t) {
      var e = t.property("__brush", a).selectAll(".overlay").data([ae("overlay")]);e.enter().append("rect").attr("class", "overlay").attr("pointer-events", "all").attr("cursor", Eh.overlay).merge(e).each(function () {
        var t = fe(this).extent;cf(this).attr("x", t[0][0]).attr("y", t[0][1]).attr("width", t[1][0] - t[0][0]).attr("height", t[1][1] - t[0][1]);
      }), t.selectAll(".selection").data([ae("selection")]).enter().append("rect").attr("class", "selection").attr("cursor", Eh.selection).attr("fill", "#777").attr("fill-opacity", .3).attr("stroke", "#fff").attr("shape-rendering", "crispEdges");var i = t.selectAll(".handle").data(n.handles, function (t) {
        return t.type;
      });i.exit().remove(), i.enter().append("rect").attr("class", function (t) {
        return "handle handle--" + t.type;
      }).attr("cursor", function (t) {
        return Eh[t.type];
      }), t.each(r).attr("fill", "none").attr("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush touchstart.brush", u);
    }function r() {
      var t = cf(this),
          n = fe(this).selection;n ? (t.selectAll(".selection").style("display", null).attr("x", n[0][0]).attr("y", n[0][1]).attr("width", n[1][0] - n[0][0]).attr("height", n[1][1] - n[0][1]), t.selectAll(".handle").style("display", null).attr("x", function (t) {
        return "e" === t.type[t.type.length - 1] ? n[1][0] - p / 2 : n[0][0] - p / 2;
      }).attr("y", function (t) {
        return "s" === t.type[0] ? n[1][1] - p / 2 : n[0][1] - p / 2;
      }).attr("width", function (t) {
        return "n" === t.type || "s" === t.type ? n[1][0] - n[0][0] + p : p;
      }).attr("height", function (t) {
        return "e" === t.type || "w" === t.type ? n[1][1] - n[0][1] + p : p;
      })) : t.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);
    }function i(t, n) {
      return t.__brush.emitter || new o(t, n);
    }function o(t, n) {
      this.that = t, this.args = n, this.state = t.__brush, this.active = 0;
    }function u() {
      function e() {
        var t = Ks(w);!L || x || b || (Math.abs(t[0] - U[0]) > Math.abs(t[1] - U[1]) ? b = !0 : x = !0), U = t, m = !0, xh(), o();
      }function o() {
        var t;switch (y = U[0] - q[0], g = U[1] - q[1], T) {case wh:case bh:
            k && (y = Math.max(C - a, Math.min(P - p, y)), s = a + y, d = p + y), N && (g = Math.max(z - l, Math.min(R - v, g)), h = l + g, _ = v + g);break;case Mh:
            k < 0 ? (y = Math.max(C - a, Math.min(P - a, y)), s = a + y, d = p) : k > 0 && (y = Math.max(C - p, Math.min(P - p, y)), s = a, d = p + y), N < 0 ? (g = Math.max(z - l, Math.min(R - l, g)), h = l + g, _ = v) : N > 0 && (g = Math.max(z - v, Math.min(R - v, g)), h = l, _ = v + g);break;case Th:
            k && (s = Math.max(C, Math.min(P, a - y * k)), d = Math.max(C, Math.min(P, p + y * k))), N && (h = Math.max(z, Math.min(R, l - g * N)), _ = Math.max(z, Math.min(R, v + g * N)));}d < s && (k *= -1, t = a, a = p, p = t, t = s, s = d, d = t, M in Ah && F.attr("cursor", Eh[M = Ah[M]])), _ < h && (N *= -1, t = l, l = v, v = t, t = h, h = _, _ = t, M in Ch && F.attr("cursor", Eh[M = Ch[M]])), S.selection && (A = S.selection), x && (s = A[0][0], d = A[1][0]), b && (h = A[0][1], _ = A[1][1]), A[0][0] === s && A[0][1] === h && A[1][0] === d && A[1][1] === _ || (S.selection = [[s, h], [d, _]], r.call(w), D.brush());
      }function u() {
        if (ue(), t.event.touches) {
          if (t.event.touches.length) return;c && clearTimeout(c), c = setTimeout(function () {
            c = null;
          }, 500), O.on("touchmove.brush touchend.brush touchcancel.brush", null);
        } else _t(t.event.view, m), I.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);O.attr("pointer-events", "all"), F.attr("cursor", Eh.overlay), S.selection && (A = S.selection), le(A) && (S.selection = null, r.call(w)), D.end();
      }if (t.event.touches) {
        if (t.event.changedTouches.length < t.event.touches.length) return xh();
      } else if (c) return;if (f.apply(this, arguments)) {
        var a,
            s,
            l,
            h,
            p,
            d,
            v,
            _,
            y,
            g,
            m,
            x,
            b,
            w = this,
            M = t.event.target.__data__.type,
            T = "selection" === (t.event.metaKey ? M = "overlay" : M) ? bh : t.event.altKey ? Th : Mh,
            k = n === Nh ? null : zh[M],
            N = n === kh ? null : Ph[M],
            S = fe(w),
            E = S.extent,
            A = S.selection,
            C = E[0][0],
            z = E[0][1],
            P = E[1][0],
            R = E[1][1],
            L = k && N && t.event.shiftKey,
            q = Ks(w),
            U = q,
            D = i(w, arguments).beforestart();"overlay" === M ? S.selection = A = [[a = n === Nh ? C : q[0], l = n === kh ? z : q[1]], [p = n === Nh ? P : a, v = n === kh ? R : l]] : (a = A[0][0], l = A[0][1], p = A[1][0], v = A[1][1]), s = a, h = l, d = p, _ = v;var O = cf(w).attr("pointer-events", "none"),
            F = O.selectAll(".overlay").attr("cursor", Eh[M]);if (t.event.touches) O.on("touchmove.brush", e, !0).on("touchend.brush touchcancel.brush", u, !0);else {
          var I = cf(t.event.view).on("keydown.brush", function () {
            switch (t.event.keyCode) {case 16:
                L = k && N;break;case 18:
                T === Mh && (k && (p = d - y * k, a = s + y * k), N && (v = _ - g * N, l = h + g * N), T = Th, o());break;case 32:
                T !== Mh && T !== Th || (k < 0 ? p = d - y : k > 0 && (a = s - y), N < 0 ? v = _ - g : N > 0 && (l = h - g), T = wh, F.attr("cursor", Eh.selection), o());break;default:
                return;}xh();
          }, !0).on("keyup.brush", function () {
            switch (t.event.keyCode) {case 16:
                L && (x = b = L = !1, o());break;case 18:
                T === Th && (k < 0 ? p = d : k > 0 && (a = s), N < 0 ? v = _ : N > 0 && (l = h), T = Mh, o());break;case 32:
                T === wh && (t.event.altKey ? (k && (p = d - y * k, a = s + y * k), N && (v = _ - g * N, l = h + g * N), T = Th) : (k < 0 ? p = d : k > 0 && (a = s), N < 0 ? v = _ : N > 0 && (l = h), T = Mh), F.attr("cursor", Eh[M]), o());break;default:
                return;}xh();
          }, !0).on("mousemove.brush", e, !0).on("mouseup.brush", u, !0);lf(t.event.view);
        }ue(), jl(w), r.call(w), D.start();
      }
    }function a() {
      var t = this.__brush || { selection: null };return t.extent = s.apply(this, arguments), t.dim = n, t;
    }var c,
        s = se,
        f = ce,
        l = h(e, "start", "brush", "end"),
        p = 6;return e.move = function (t, e) {
      t.selection ? t.on("start.brush", function () {
        i(this, arguments).beforestart().start();
      }).on("interrupt.brush end.brush", function () {
        i(this, arguments).end();
      }).tween("brush", function () {
        function t(t) {
          u.selection = 1 === t && le(s) ? null : f(t), r.call(o), a.brush();
        }var o = this,
            u = o.__brush,
            a = i(o, arguments),
            c = u.selection,
            s = n.input("function" == typeof e ? e.apply(this, arguments) : e, u.extent),
            f = cl(c, s);return c && s ? t : t(1);
      }) : t.each(function () {
        var t = this,
            o = arguments,
            u = t.__brush,
            a = n.input("function" == typeof e ? e.apply(t, o) : e, u.extent),
            c = i(t, o).beforestart();jl(t), u.selection = null == a || le(a) ? null : a, r.call(t), c.start().brush().end();
      });
    }, o.prototype = { beforestart: function () {
        return 1 == ++this.active && (this.state.emitter = this, this.starting = !0), this;
      }, start: function () {
        return this.starting && (this.starting = !1, this.emit("start")), this;
      }, brush: function () {
        return this.emit("brush"), this;
      }, end: function () {
        return 0 == --this.active && (delete this.state.emitter, this.emit("end")), this;
      }, emit: function (t) {
        N(new mh(e, t, n.output(this.state.selection)), l.apply, l, [t, this.that, this.args]);
      } }, e.extent = function (t) {
      return arguments.length ? (s = "function" == typeof t ? t : gh([[+t[0][0], +t[0][1]], [+t[1][0], +t[1][1]]]), e) : s;
    }, e.filter = function (t) {
      return arguments.length ? (f = "function" == typeof t ? t : gh(!!t), e) : f;
    }, e.handleSize = function (t) {
      return arguments.length ? (p = +t, e) : p;
    }, e.on = function () {
      var t = l.on.apply(l, arguments);return t === l ? e : t;
    }, e;
  }function pe(t) {
    return function (n, e) {
      return t(n.source.value + n.target.value, e.source.value + e.target.value);
    };
  }function de() {
    this._x0 = this._y0 = this._x1 = this._y1 = null, this._ = "";
  }function ve() {
    return new de();
  }function _e(t) {
    return t.source;
  }function ye(t) {
    return t.target;
  }function ge(t) {
    return t.radius;
  }function me(t) {
    return t.startAngle;
  }function xe(t) {
    return t.endAngle;
  }function be() {}function we(t, n) {
    var e = new be();if (t instanceof be) t.each(function (t, n) {
      e.set(n, t);
    });else if (Array.isArray(t)) {
      var r,
          i = -1,
          o = t.length;if (null == n) for (; ++i < o;) e.set(i, t[i]);else for (; ++i < o;) e.set(n(r = t[i], i, t), r);
    } else if (t) for (var u in t) e.set(u, t[u]);return e;
  }function Me() {
    return {};
  }function Te(t, n, e) {
    t[n] = e;
  }function ke() {
    return we();
  }function Ne(t, n, e) {
    t.set(n, e);
  }function Se() {}function Ee(t, n) {
    var e = new Se();if (t instanceof Se) t.each(function (t) {
      e.add(t);
    });else if (t) {
      var r = -1,
          i = t.length;if (null == n) for (; ++r < i;) e.add(t[r]);else for (; ++r < i;) e.add(n(t[r], r, t));
    }return e;
  }function Ae(t) {
    return new Function("d", "return {" + t.map(function (t, n) {
      return JSON.stringify(t) + ": d[" + n + "]";
    }).join(",") + "}");
  }function Ce(t, n) {
    var e = Ae(t);return function (r, i) {
      return n(e(r), i, t);
    };
  }function ze(t) {
    var n = Object.create(null),
        e = [];return t.forEach(function (t) {
      for (var r in t) r in n || e.push(n[r] = r);
    }), e;
  }function Pe(t, n, e, r) {
    if (isNaN(n) || isNaN(e)) return t;var i,
        o,
        u,
        a,
        c,
        s,
        f,
        l,
        h,
        p = t._root,
        d = { data: r },
        v = t._x0,
        _ = t._y0,
        y = t._x1,
        g = t._y1;if (!p) return t._root = d, t;for (; p.length;) if ((s = n >= (o = (v + y) / 2)) ? v = o : y = o, (f = e >= (u = (_ + g) / 2)) ? _ = u : g = u, i = p, !(p = p[l = f << 1 | s])) return i[l] = d, t;if (a = +t._x.call(null, p.data), c = +t._y.call(null, p.data), n === a && e === c) return d.next = p, i ? i[l] = d : t._root = d, t;do {
      i = i ? i[l] = new Array(4) : t._root = new Array(4), (s = n >= (o = (v + y) / 2)) ? v = o : y = o, (f = e >= (u = (_ + g) / 2)) ? _ = u : g = u;
    } while ((l = f << 1 | s) == (h = (c >= u) << 1 | a >= o));return i[h] = p, i[l] = d, t;
  }function Re(t) {
    return t[0];
  }function Le(t) {
    return t[1];
  }function qe(t, n, e) {
    var r = new Ue(null == n ? Re : n, null == e ? Le : e, NaN, NaN, NaN, NaN);return null == t ? r : r.addAll(t);
  }function Ue(t, n, e, r, i, o) {
    this._x = t, this._y = n, this._x0 = e, this._y0 = r, this._x1 = i, this._y1 = o, this._root = void 0;
  }function De(t) {
    for (var n = { data: t.data }, e = n; t = t.next;) e = e.next = { data: t.data };return n;
  }function Oe(t) {
    return t.x + t.vx;
  }function Fe(t) {
    return t.y + t.vy;
  }function Ie(t) {
    return t.index;
  }function Ye(t, n) {
    var e = t.get(n);if (!e) throw new Error("missing: " + n);return e;
  }function Be(t) {
    return t.x;
  }function je(t) {
    return t.y;
  }function He(t) {
    return new Xe(t);
  }function Xe(t) {
    if (!(n = xp.exec(t))) throw new Error("invalid format: " + t);var n,
        e = n[1] || " ",
        r = n[2] || ">",
        i = n[3] || "-",
        o = n[4] || "",
        u = !!n[5],
        a = n[6] && +n[6],
        c = !!n[7],
        s = n[8] && +n[8].slice(1),
        f = n[9] || "";"n" === f ? (c = !0, f = "g") : mp[f] || (f = ""), (u || "0" === e && "=" === r) && (u = !0, e = "0", r = "="), this.fill = e, this.align = r, this.sign = i, this.symbol = o, this.zero = u, this.width = a, this.comma = c, this.precision = s, this.type = f;
  }function $e(n) {
    return bp = Tp(n), t.format = bp.format, t.formatPrefix = bp.formatPrefix, bp;
  }function Ve() {
    this.reset();
  }function We(t, n, e) {
    var r = t.s = n + e,
        i = r - n,
        o = r - i;t.t = n - o + (e - i);
  }function Ze(t) {
    return t > 1 ? 0 : t < -1 ? cd : Math.acos(t);
  }function Ge(t) {
    return t > 1 ? sd : t < -1 ? -sd : Math.asin(t);
  }function Je(t) {
    return (t = wd(t / 2)) * t;
  }function Qe() {}function Ke(t, n) {
    t && Sd.hasOwnProperty(t.type) && Sd[t.type](t, n);
  }function tr(t, n, e) {
    var r,
        i = -1,
        o = t.length - e;for (n.lineStart(); ++i < o;) r = t[i], n.point(r[0], r[1], r[2]);n.lineEnd();
  }function nr(t, n) {
    var e = -1,
        r = t.length;for (n.polygonStart(); ++e < r;) tr(t[e], n, 1);n.polygonEnd();
  }function er() {
    zd.point = ir;
  }function rr() {
    or(Ap, Cp);
  }function ir(t, n) {
    zd.point = or, Ap = t, Cp = n, zp = t *= pd, Pp = yd(n = (n *= pd) / 2 + fd), Rp = wd(n);
  }function or(t, n) {
    n = (n *= pd) / 2 + fd;var e = (t *= pd) - zp,
        r = e >= 0 ? 1 : -1,
        i = r * e,
        o = yd(n),
        u = wd(n),
        a = Rp * u,
        c = Pp * o + a * yd(i),
        s = a * r * wd(i);Ad.add(_d(s, c)), zp = t, Pp = o, Rp = u;
  }function ur(t) {
    return [_d(t[1], t[0]), Ge(t[2])];
  }function ar(t) {
    var n = t[0],
        e = t[1],
        r = yd(e);return [r * yd(n), r * wd(n), wd(e)];
  }function cr(t, n) {
    return t[0] * n[0] + t[1] * n[1] + t[2] * n[2];
  }function sr(t, n) {
    return [t[1] * n[2] - t[2] * n[1], t[2] * n[0] - t[0] * n[2], t[0] * n[1] - t[1] * n[0]];
  }function fr(t, n) {
    t[0] += n[0], t[1] += n[1], t[2] += n[2];
  }function lr(t, n) {
    return [t[0] * n, t[1] * n, t[2] * n];
  }function hr(t) {
    var n = Td(t[0] * t[0] + t[1] * t[1] + t[2] * t[2]);t[0] /= n, t[1] /= n, t[2] /= n;
  }function pr(t, n) {
    Bp.push(jp = [Lp = t, Up = t]), n < qp && (qp = n), n > Dp && (Dp = n);
  }function dr(t, n) {
    var e = ar([t * pd, n * pd]);if (Yp) {
      var r = sr(Yp, e),
          i = sr([r[1], -r[0], 0], r);hr(i), i = ur(i);var o,
          u = t - Op,
          a = u > 0 ? 1 : -1,
          c = i[0] * hd * a,
          s = dd(u) > 180;s ^ (a * Op < c && c < a * t) ? (o = i[1] * hd) > Dp && (Dp = o) : (c = (c + 360) % 360 - 180, s ^ (a * Op < c && c < a * t) ? (o = -i[1] * hd) < qp && (qp = o) : (n < qp && (qp = n), n > Dp && (Dp = n))), s ? t < Op ? xr(Lp, t) > xr(Lp, Up) && (Up = t) : xr(t, Up) > xr(Lp, Up) && (Lp = t) : Up >= Lp ? (t < Lp && (Lp = t), t > Up && (Up = t)) : t > Op ? xr(Lp, t) > xr(Lp, Up) && (Up = t) : xr(t, Up) > xr(Lp, Up) && (Lp = t);
    } else Bp.push(jp = [Lp = t, Up = t]);n < qp && (qp = n), n > Dp && (Dp = n), Yp = e, Op = t;
  }function vr() {
    Rd.point = dr;
  }function _r() {
    jp[0] = Lp, jp[1] = Up, Rd.point = pr, Yp = null;
  }function yr(t, n) {
    if (Yp) {
      var e = t - Op;Pd.add(dd(e) > 180 ? e + (e > 0 ? 360 : -360) : e);
    } else Fp = t, Ip = n;zd.point(t, n), dr(t, n);
  }function gr() {
    zd.lineStart();
  }function mr() {
    yr(Fp, Ip), zd.lineEnd(), dd(Pd) > ad && (Lp = -(Up = 180)), jp[0] = Lp, jp[1] = Up, Yp = null;
  }function xr(t, n) {
    return (n -= t) < 0 ? n + 360 : n;
  }function br(t, n) {
    return t[0] - n[0];
  }function wr(t, n) {
    return t[0] <= t[1] ? t[0] <= n && n <= t[1] : n < t[0] || t[1] < n;
  }function Mr(t, n) {
    t *= pd;var e = yd(n *= pd);Tr(e * yd(t), e * wd(t), wd(n));
  }function Tr(t, n, e) {
    $p += (t - $p) / ++Hp, Vp += (n - Vp) / Hp, Wp += (e - Wp) / Hp;
  }function kr() {
    Ld.point = Nr;
  }function Nr(t, n) {
    t *= pd;var e = yd(n *= pd);rd = e * yd(t), id = e * wd(t), od = wd(n), Ld.point = Sr, Tr(rd, id, od);
  }function Sr(t, n) {
    t *= pd;var e = yd(n *= pd),
        r = e * yd(t),
        i = e * wd(t),
        o = wd(n),
        u = _d(Td((u = id * o - od * i) * u + (u = od * r - rd * o) * u + (u = rd * i - id * r) * u), rd * r + id * i + od * o);Xp += u, Zp += u * (rd + (rd = r)), Gp += u * (id + (id = i)), Jp += u * (od + (od = o)), Tr(rd, id, od);
  }function Er() {
    Ld.point = Mr;
  }function Ar() {
    Ld.point = zr;
  }function Cr() {
    Pr(nd, ed), Ld.point = Mr;
  }function zr(t, n) {
    nd = t, ed = n, t *= pd, n *= pd, Ld.point = Pr;var e = yd(n);rd = e * yd(t), id = e * wd(t), od = wd(n), Tr(rd, id, od);
  }function Pr(t, n) {
    t *= pd;var e = yd(n *= pd),
        r = e * yd(t),
        i = e * wd(t),
        o = wd(n),
        u = id * o - od * i,
        a = od * r - rd * o,
        c = rd * i - id * r,
        s = Td(u * u + a * a + c * c),
        f = Ge(s),
        l = s && -f / s;Qp += l * u, Kp += l * a, td += l * c, Xp += f, Zp += f * (rd + (rd = r)), Gp += f * (id + (id = i)), Jp += f * (od + (od = o)), Tr(rd, id, od);
  }function Rr(t, n) {
    return [t > cd ? t - ld : t < -cd ? t + ld : t, n];
  }function Lr(t, n, e) {
    return (t %= ld) ? n || e ? Ud(Ur(t), Dr(n, e)) : Ur(t) : n || e ? Dr(n, e) : Rr;
  }function qr(t) {
    return function (n, e) {
      return n += t, [n > cd ? n - ld : n < -cd ? n + ld : n, e];
    };
  }function Ur(t) {
    var n = qr(t);return n.invert = qr(-t), n;
  }function Dr(t, n) {
    function e(t, n) {
      var e = yd(n),
          a = yd(t) * e,
          c = wd(t) * e,
          s = wd(n),
          f = s * r + a * i;return [_d(c * o - f * u, a * r - s * i), Ge(f * o + c * u)];
    }var r = yd(t),
        i = wd(t),
        o = yd(n),
        u = wd(n);return e.invert = function (t, n) {
      var e = yd(n),
          a = yd(t) * e,
          c = wd(t) * e,
          s = wd(n),
          f = s * o - c * u;return [_d(c * o + s * u, a * r + f * i), Ge(f * r - a * i)];
    }, e;
  }function Or(t, n, e, r, i, o) {
    if (e) {
      var u = yd(n),
          a = wd(n),
          c = r * e;null == i ? (i = n + r * ld, o = n - c / 2) : (i = Fr(u, i), o = Fr(u, o), (r > 0 ? i < o : i > o) && (i += r * ld));for (var s, f = i; r > 0 ? f > o : f < o; f -= c) s = ur([u, -a * yd(f), -a * wd(f)]), t.point(s[0], s[1]);
    }
  }function Fr(t, n) {
    (n = ar(n))[0] -= t, hr(n);var e = Ze(-n[1]);return ((-n[2] < 0 ? -e : e) + ld - ad) % ld;
  }function Ir(t, n, e, r) {
    this.x = t, this.z = n, this.o = e, this.e = r, this.v = !1, this.n = this.p = null;
  }function Yr(t) {
    if (n = t.length) {
      for (var n, e, r = 0, i = t[0]; ++r < n;) i.n = e = t[r], e.p = i, i = e;i.n = e = t[0], e.p = i;
    }
  }function Br(t, n, e, r) {
    function i(i, o) {
      return t <= i && i <= e && n <= o && o <= r;
    }function o(i, o, a, s) {
      var f = 0,
          l = 0;if (null == i || (f = u(i, a)) !== (l = u(o, a)) || c(i, o) < 0 ^ a > 0) do {
        s.point(0 === f || 3 === f ? t : e, f > 1 ? r : n);
      } while ((f = (f + a + 4) % 4) !== l);else s.point(o[0], o[1]);
    }function u(r, i) {
      return dd(r[0] - t) < ad ? i > 0 ? 0 : 3 : dd(r[0] - e) < ad ? i > 0 ? 2 : 1 : dd(r[1] - n) < ad ? i > 0 ? 1 : 0 : i > 0 ? 3 : 2;
    }function a(t, n) {
      return c(t.x, n.x);
    }function c(t, n) {
      var e = u(t, 1),
          r = u(n, 1);return e !== r ? e - r : 0 === e ? n[1] - t[1] : 1 === e ? t[0] - n[0] : 2 === e ? t[1] - n[1] : n[0] - t[0];
    }return function (u) {
      function c(t, n) {
        i(t, n) && w.point(t, n);
      }function s() {
        for (var n = 0, e = 0, i = h.length; e < i; ++e) for (var o, u, a = h[e], c = 1, s = a.length, f = a[0], l = f[0], p = f[1]; c < s; ++c) o = l, u = p, l = (f = a[c])[0], p = f[1], u <= r ? p > r && (l - o) * (r - u) > (p - u) * (t - o) && ++n : p <= r && (l - o) * (r - u) < (p - u) * (t - o) && --n;return n;
      }function f(o, u) {
        var a = i(o, u);if (h && p.push([o, u]), x) d = o, v = u, _ = a, x = !1, a && (w.lineStart(), w.point(o, u));else if (a && m) w.point(o, u);else {
          var c = [y = Math.max(tv, Math.min(Kd, y)), g = Math.max(tv, Math.min(Kd, g))],
              s = [o = Math.max(tv, Math.min(Kd, o)), u = Math.max(tv, Math.min(Kd, u))];Gd(c, s, t, n, e, r) ? (m || (w.lineStart(), w.point(c[0], c[1])), w.point(s[0], s[1]), a || w.lineEnd(), b = !1) : a && (w.lineStart(), w.point(o, u), b = !1);
        }y = o, g = u, m = a;
      }var l,
          h,
          p,
          d,
          v,
          _,
          y,
          g,
          m,
          x,
          b,
          w = u,
          M = Zd(),
          T = { point: c, lineStart: function () {
          T.point = f, h && h.push(p = []), x = !0, m = !1, y = g = NaN;
        }, lineEnd: function () {
          l && (f(d, v), _ && m && M.rejoin(), l.push(M.result())), T.point = c, m && w.lineEnd();
        }, polygonStart: function () {
          w = M, l = [], h = [], b = !0;
        }, polygonEnd: function () {
          var t = s(),
              n = b && t,
              e = (l = Cs(l)).length;(n || e) && (u.polygonStart(), n && (u.lineStart(), o(null, null, 1, u), u.lineEnd()), e && Qd(l, a, t, o, u), u.polygonEnd()), w = u, l = h = p = null;
        } };return T;
    };
  }function jr() {
    iv.point = iv.lineEnd = Qe;
  }function Hr(t, n) {
    Dd = t *= pd, Od = wd(n *= pd), Fd = yd(n), iv.point = Xr;
  }function Xr(t, n) {
    t *= pd;var e = wd(n *= pd),
        r = yd(n),
        i = dd(t - Dd),
        o = yd(i),
        u = r * wd(i),
        a = Fd * e - Od * r * o,
        c = Od * e + Fd * r * o;rv.add(_d(Td(u * u + a * a), c)), Dd = t, Od = e, Fd = r;
  }function $r(t, n) {
    return !(!t || !fv.hasOwnProperty(t.type)) && fv[t.type](t, n);
  }function Vr(t, n) {
    return 0 === cv(t, n);
  }function Wr(t, n) {
    var e = cv(t[0], t[1]);return cv(t[0], n) + cv(n, t[1]) <= e + ad;
  }function Zr(t, n) {
    return !!ev(t.map(Gr), Jr(n));
  }function Gr(t) {
    return (t = t.map(Jr)).pop(), t;
  }function Jr(t) {
    return [t[0] * pd, t[1] * pd];
  }function Qr(t, n, e) {
    var r = Ms(t, n - ad, e).concat(n);return function (t) {
      return r.map(function (n) {
        return [t, n];
      });
    };
  }function Kr(t, n, e) {
    var r = Ms(t, n - ad, e).concat(n);return function (t) {
      return r.map(function (n) {
        return [n, t];
      });
    };
  }function ti() {
    function t() {
      return { type: "MultiLineString", coordinates: n() };
    }function n() {
      return Ms(gd(o / _) * _, i, _).map(h).concat(Ms(gd(s / y) * y, c, y).map(p)).concat(Ms(gd(r / d) * d, e, d).filter(function (t) {
        return dd(t % _) > ad;
      }).map(f)).concat(Ms(gd(a / v) * v, u, v).filter(function (t) {
        return dd(t % y) > ad;
      }).map(l));
    }var e,
        r,
        i,
        o,
        u,
        a,
        c,
        s,
        f,
        l,
        h,
        p,
        d = 10,
        v = d,
        _ = 90,
        y = 360,
        g = 2.5;return t.lines = function () {
      return n().map(function (t) {
        return { type: "LineString", coordinates: t };
      });
    }, t.outline = function () {
      return { type: "Polygon", coordinates: [h(o).concat(p(c).slice(1), h(i).reverse().slice(1), p(s).reverse().slice(1))] };
    }, t.extent = function (n) {
      return arguments.length ? t.extentMajor(n).extentMinor(n) : t.extentMinor();
    }, t.extentMajor = function (n) {
      return arguments.length ? (o = +n[0][0], i = +n[1][0], s = +n[0][1], c = +n[1][1], o > i && (n = o, o = i, i = n), s > c && (n = s, s = c, c = n), t.precision(g)) : [[o, s], [i, c]];
    }, t.extentMinor = function (n) {
      return arguments.length ? (r = +n[0][0], e = +n[1][0], a = +n[0][1], u = +n[1][1], r > e && (n = r, r = e, e = n), a > u && (n = a, a = u, u = n), t.precision(g)) : [[r, a], [e, u]];
    }, t.step = function (n) {
      return arguments.length ? t.stepMajor(n).stepMinor(n) : t.stepMinor();
    }, t.stepMajor = function (n) {
      return arguments.length ? (_ = +n[0], y = +n[1], t) : [_, y];
    }, t.stepMinor = function (n) {
      return arguments.length ? (d = +n[0], v = +n[1], t) : [d, v];
    }, t.precision = function (n) {
      return arguments.length ? (g = +n, f = Qr(a, u, 90), l = Kr(r, e, g), h = Qr(s, c, 90), p = Kr(o, i, g), t) : g;
    }, t.extentMajor([[-180, -90 + ad], [180, 90 - ad]]).extentMinor([[-180, -80 - ad], [180, 80 + ad]]);
  }function ni() {
    dv.point = ei;
  }function ei(t, n) {
    dv.point = ri, Id = Bd = t, Yd = jd = n;
  }function ri(t, n) {
    pv.add(jd * t - Bd * n), Bd = t, jd = n;
  }function ii() {
    ri(Id, Yd);
  }function oi(t, n) {
    xv += t, bv += n, ++wv;
  }function ui() {
    Av.point = ai;
  }function ai(t, n) {
    Av.point = ci, oi($d = t, Vd = n);
  }function ci(t, n) {
    var e = t - $d,
        r = n - Vd,
        i = Td(e * e + r * r);Mv += i * ($d + t) / 2, Tv += i * (Vd + n) / 2, kv += i, oi($d = t, Vd = n);
  }function si() {
    Av.point = oi;
  }function fi() {
    Av.point = hi;
  }function li() {
    pi(Hd, Xd);
  }function hi(t, n) {
    Av.point = pi, oi(Hd = $d = t, Xd = Vd = n);
  }function pi(t, n) {
    var e = t - $d,
        r = n - Vd,
        i = Td(e * e + r * r);Mv += i * ($d + t) / 2, Tv += i * (Vd + n) / 2, kv += i, Nv += (i = Vd * t - $d * n) * ($d + t), Sv += i * (Vd + n), Ev += 3 * i, oi($d = t, Vd = n);
  }function di(t) {
    this._context = t;
  }function vi(t, n) {
    Uv.point = _i, zv = Rv = t, Pv = Lv = n;
  }function _i(t, n) {
    Rv -= t, Lv -= n, qv.add(Td(Rv * Rv + Lv * Lv)), Rv = t, Lv = n;
  }function yi() {
    this._string = [];
  }function gi(t) {
    return "m0," + t + "a" + t + "," + t + " 0 1,1 0," + -2 * t + "a" + t + "," + t + " 0 1,1 0," + 2 * t + "z";
  }function mi(t) {
    return t.length > 1;
  }function xi(t, n) {
    return ((t = t.x)[0] < 0 ? t[1] - sd - ad : sd - t[1]) - ((n = n.x)[0] < 0 ? n[1] - sd - ad : sd - n[1]);
  }function bi(t, n, e, r) {
    var i,
        o,
        u = wd(t - e);return dd(u) > ad ? vd((wd(n) * (o = yd(r)) * wd(e) - wd(r) * (i = yd(n)) * wd(t)) / (i * o * u)) : (n + r) / 2;
  }function wi(t) {
    return function (n) {
      var e = new Mi();for (var r in t) e[r] = t[r];return e.stream = n, e;
    };
  }function Mi() {}function Ti(t, n, e) {
    var r = n[1][0] - n[0][0],
        i = n[1][1] - n[0][1],
        o = t.clipExtent && t.clipExtent();t.scale(150).translate([0, 0]), null != o && t.clipExtent(null), Ed(e, t.stream(mv));var u = mv.result(),
        a = Math.min(r / (u[1][0] - u[0][0]), i / (u[1][1] - u[0][1])),
        c = +n[0][0] + (r - a * (u[1][0] + u[0][0])) / 2,
        s = +n[0][1] + (i - a * (u[1][1] + u[0][1])) / 2;return null != o && t.clipExtent(o), t.scale(150 * a).translate([c, s]);
  }function ki(t, n, e) {
    return Ti(t, [[0, 0], n], e);
  }function Ni(t) {
    return wi({ point: function (n, e) {
        n = t(n, e), this.stream.point(n[0], n[1]);
      } });
  }function Si(t, n) {
    function e(r, i, o, u, a, c, s, f, l, h, p, d, v, _) {
      var y = s - r,
          g = f - i,
          m = y * y + g * g;if (m > 4 * n && v--) {
        var x = u + h,
            b = a + p,
            w = c + d,
            M = Td(x * x + b * b + w * w),
            T = Ge(w /= M),
            k = dd(dd(w) - 1) < ad || dd(o - l) < ad ? (o + l) / 2 : _d(b, x),
            N = t(k, T),
            S = N[0],
            E = N[1],
            A = S - r,
            C = E - i,
            z = g * A - y * C;(z * z / m > n || dd((y * A + g * C) / m - .5) > .3 || u * h + a * p + c * d < Yv) && (e(r, i, o, u, a, c, S, E, k, x /= M, b /= M, w, v, _), _.point(S, E), e(S, E, k, x, b, w, s, f, l, h, p, d, v, _));
      }
    }return function (n) {
      function r(e, r) {
        e = t(e, r), n.point(e[0], e[1]);
      }function i() {
        y = NaN, w.point = o, n.lineStart();
      }function o(r, i) {
        var o = ar([r, i]),
            u = t(r, i);e(y, g, _, m, x, b, y = u[0], g = u[1], _ = r, m = o[0], x = o[1], b = o[2], Iv, n), n.point(y, g);
      }function u() {
        w.point = r, n.lineEnd();
      }function a() {
        i(), w.point = c, w.lineEnd = s;
      }function c(t, n) {
        o(f = t, n), l = y, h = g, p = m, d = x, v = b, w.point = o;
      }function s() {
        e(y, g, _, m, x, b, l, h, f, p, d, v, Iv, n), w.lineEnd = u, u();
      }var f,
          l,
          h,
          p,
          d,
          v,
          _,
          y,
          g,
          m,
          x,
          b,
          w = { point: r, lineStart: i, lineEnd: u, polygonStart: function () {
          n.polygonStart(), w.lineStart = a;
        }, polygonEnd: function () {
          n.polygonEnd(), w.lineStart = i;
        } };return w;
    };
  }function Ei(t) {
    return Ai(function () {
      return t;
    })();
  }function Ai(t) {
    function n(t) {
      return t = f(t[0] * pd, t[1] * pd), [t[0] * _ + a, c - t[1] * _];
    }function e(t) {
      return (t = f.invert((t[0] - a) / _, (c - t[1]) / _)) && [t[0] * hd, t[1] * hd];
    }function r(t, n) {
      return t = u(t, n), [t[0] * _ + a, c - t[1] * _];
    }function i() {
      f = Ud(s = Lr(b, w, M), u);var t = u(m, x);return a = y - t[0] * _, c = g + t[1] * _, o();
    }function o() {
      return d = v = null, n;
    }var u,
        a,
        c,
        s,
        f,
        l,
        h,
        p,
        d,
        v,
        _ = 150,
        y = 480,
        g = 250,
        m = 0,
        x = 0,
        b = 0,
        w = 0,
        M = 0,
        T = null,
        k = Ov,
        N = null,
        S = lv,
        E = .5,
        A = Bv(r, E);return n.stream = function (t) {
      return d && v === t ? d : d = jv(k(s, A(S(v = t))));
    }, n.clipAngle = function (t) {
      return arguments.length ? (k = +t ? Fv(T = t * pd, 6 * pd) : (T = null, Ov), o()) : T * hd;
    }, n.clipExtent = function (t) {
      return arguments.length ? (S = null == t ? (N = l = h = p = null, lv) : Br(N = +t[0][0], l = +t[0][1], h = +t[1][0], p = +t[1][1]), o()) : null == N ? null : [[N, l], [h, p]];
    }, n.scale = function (t) {
      return arguments.length ? (_ = +t, i()) : _;
    }, n.translate = function (t) {
      return arguments.length ? (y = +t[0], g = +t[1], i()) : [y, g];
    }, n.center = function (t) {
      return arguments.length ? (m = t[0] % 360 * pd, x = t[1] % 360 * pd, i()) : [m * hd, x * hd];
    }, n.rotate = function (t) {
      return arguments.length ? (b = t[0] % 360 * pd, w = t[1] % 360 * pd, M = t.length > 2 ? t[2] % 360 * pd : 0, i()) : [b * hd, w * hd, M * hd];
    }, n.precision = function (t) {
      return arguments.length ? (A = Bv(r, E = t * t), o()) : Td(E);
    }, n.fitExtent = function (t, e) {
      return Ti(n, t, e);
    }, n.fitSize = function (t, e) {
      return ki(n, t, e);
    }, function () {
      return u = t.apply(this, arguments), n.invert = u.invert && e, i();
    };
  }function Ci(t) {
    var n = 0,
        e = cd / 3,
        r = Ai(t),
        i = r(n, e);return i.parallels = function (t) {
      return arguments.length ? r(n = t[0] * pd, e = t[1] * pd) : [n * hd, e * hd];
    }, i;
  }function zi(t) {
    function n(t, n) {
      return [t * e, wd(n) / e];
    }var e = yd(t);return n.invert = function (t, n) {
      return [t / e, Ge(n * e)];
    }, n;
  }function Pi(t, n) {
    function e(t, n) {
      var e = Td(o - 2 * i * wd(n)) / i;return [e * wd(t *= i), u - e * yd(t)];
    }var r = wd(t),
        i = (r + wd(n)) / 2;if (dd(i) < ad) return zi(t);var o = 1 + r * (2 * i - r),
        u = Td(o) / i;return e.invert = function (t, n) {
      var e = u - n;return [_d(t, dd(e)) / i * Md(e), Ge((o - (t * t + e * e) * i * i) / (2 * i))];
    }, e;
  }function Ri(t) {
    var n = t.length;return { point: function (e, r) {
        for (var i = -1; ++i < n;) t[i].point(e, r);
      }, sphere: function () {
        for (var e = -1; ++e < n;) t[e].sphere();
      }, lineStart: function () {
        for (var e = -1; ++e < n;) t[e].lineStart();
      }, lineEnd: function () {
        for (var e = -1; ++e < n;) t[e].lineEnd();
      }, polygonStart: function () {
        for (var e = -1; ++e < n;) t[e].polygonStart();
      }, polygonEnd: function () {
        for (var e = -1; ++e < n;) t[e].polygonEnd();
      } };
  }function Li(t) {
    return function (n, e) {
      var r = yd(n),
          i = yd(e),
          o = t(r * i);return [o * i * wd(n), o * wd(e)];
    };
  }function qi(t) {
    return function (n, e) {
      var r = Td(n * n + e * e),
          i = t(r),
          o = wd(i),
          u = yd(i);return [_d(n * o, r * u), Ge(r && e * o / r)];
    };
  }function Ui(t, n) {
    return [t, xd(kd((sd + n) / 2))];
  }function Di(t) {
    function n() {
      var n = cd * a(),
          u = o(Wd(o.rotate()).invert([0, 0]));return s(null == f ? [[u[0] - n, u[1] - n], [u[0] + n, u[1] + n]] : t === Ui ? [[Math.max(u[0] - n, f), e], [Math.min(u[0] + n, r), i]] : [[f, Math.max(u[1] - n, e)], [r, Math.min(u[1] + n, i)]]);
    }var e,
        r,
        i,
        o = Ei(t),
        u = o.center,
        a = o.scale,
        c = o.translate,
        s = o.clipExtent,
        f = null;return o.scale = function (t) {
      return arguments.length ? (a(t), n()) : a();
    }, o.translate = function (t) {
      return arguments.length ? (c(t), n()) : c();
    }, o.center = function (t) {
      return arguments.length ? (u(t), n()) : u();
    }, o.clipExtent = function (t) {
      return arguments.length ? (null == t ? f = e = r = i = null : (f = +t[0][0], e = +t[0][1], r = +t[1][0], i = +t[1][1]), n()) : null == f ? null : [[f, e], [r, i]];
    }, n();
  }function Oi(t) {
    return kd((sd + t) / 2);
  }function Fi(t, n) {
    function e(t, n) {
      o > 0 ? n < -sd + ad && (n = -sd + ad) : n > sd - ad && (n = sd - ad);var e = o / bd(Oi(n), i);return [e * wd(i * t), o - e * yd(i * t)];
    }var r = yd(t),
        i = t === n ? wd(t) : xd(r / yd(n)) / xd(Oi(n) / Oi(t)),
        o = r * bd(Oi(t), i) / i;return i ? (e.invert = function (t, n) {
      var e = o - n,
          r = Md(i) * Td(t * t + e * e);return [_d(t, dd(e)) / i * Md(e), 2 * vd(bd(o / r, 1 / i)) - sd];
    }, e) : Ui;
  }function Ii(t, n) {
    return [t, n];
  }function Yi(t, n) {
    function e(t, n) {
      var e = o - n,
          r = i * t;return [e * wd(r), o - e * yd(r)];
    }var r = yd(t),
        i = t === n ? wd(t) : (r - yd(n)) / (n - t),
        o = r / i + t;return dd(i) < ad ? Ii : (e.invert = function (t, n) {
      var e = o - n;return [_d(t, dd(e)) / i * Md(e), o - Md(i) * Td(t * t + e * e)];
    }, e);
  }function Bi(t, n) {
    var e = yd(n),
        r = yd(t) * e;return [e * wd(t) / r, wd(n) / r];
  }function ji(t, n, e, r) {
    return 1 === t && 1 === n && 0 === e && 0 === r ? lv : wi({ point: function (i, o) {
        this.stream.point(i * t + e, o * n + r);
      } });
  }function Hi(t, n) {
    return [yd(n) * wd(t), wd(n)];
  }function Xi(t, n) {
    var e = yd(n),
        r = 1 + yd(t) * e;return [e * wd(t) / r, wd(n) / r];
  }function $i(t, n) {
    return [xd(kd((sd + n) / 2)), -t];
  }function Vi(t, n) {
    return t.parent === n.parent ? 1 : 2;
  }function Wi(t) {
    return t.reduce(Zi, 0) / t.length;
  }function Zi(t, n) {
    return t + n.x;
  }function Gi(t) {
    return 1 + t.reduce(Ji, 0);
  }function Ji(t, n) {
    return Math.max(t, n.y);
  }function Qi(t) {
    for (var n; n = t.children;) t = n[0];return t;
  }function Ki(t) {
    for (var n; n = t.children;) t = n[n.length - 1];return t;
  }function to(t) {
    var n = 0,
        e = t.children,
        r = e && e.length;if (r) for (; --r >= 0;) n += e[r].value;else n = 1;t.value = n;
  }function no(t, n) {
    if (t === n) return t;var e = t.ancestors(),
        r = n.ancestors(),
        i = null;for (t = e.pop(), n = r.pop(); t === n;) i = t, t = e.pop(), n = r.pop();return i;
  }function eo(t, n) {
    var e,
        r,
        i,
        o,
        u,
        a = new uo(t),
        c = +t.value && (a.value = t.value),
        s = [a];for (null == n && (n = ro); e = s.pop();) if (c && (e.value = +e.data.value), (i = n(e.data)) && (u = i.length)) for (e.children = new Array(u), o = u - 1; o >= 0; --o) s.push(r = e.children[o] = new uo(i[o])), r.parent = e, r.depth = e.depth + 1;return a.eachBefore(oo);
  }function ro(t) {
    return t.children;
  }function io(t) {
    t.data = t.data.data;
  }function oo(t) {
    var n = 0;do {
      t.height = n;
    } while ((t = t.parent) && t.height < ++n);
  }function uo(t) {
    this.data = t, this.depth = this.height = 0, this.parent = null;
  }function ao(t) {
    for (var n, e, r = t.length; r;) e = Math.random() * r-- | 0, n = t[r], t[r] = t[e], t[e] = n;return t;
  }function co(t, n) {
    var e, r;if (lo(n, t)) return [n];for (e = 0; e < t.length; ++e) if (so(n, t[e]) && lo(vo(t[e], n), t)) return [t[e], n];for (e = 0; e < t.length - 1; ++e) for (r = e + 1; r < t.length; ++r) if (so(vo(t[e], t[r]), n) && so(vo(t[e], n), t[r]) && so(vo(t[r], n), t[e]) && lo(_o(t[e], t[r], n), t)) return [t[e], t[r], n];throw new Error();
  }function so(t, n) {
    var e = t.r - n.r,
        r = n.x - t.x,
        i = n.y - t.y;return e < 0 || e * e < r * r + i * i;
  }function fo(t, n) {
    var e = t.r - n.r + 1e-6,
        r = n.x - t.x,
        i = n.y - t.y;return e > 0 && e * e > r * r + i * i;
  }function lo(t, n) {
    for (var e = 0; e < n.length; ++e) if (!fo(t, n[e])) return !1;return !0;
  }function ho(t) {
    switch (t.length) {case 1:
        return po(t[0]);case 2:
        return vo(t[0], t[1]);case 3:
        return _o(t[0], t[1], t[2]);}
  }function po(t) {
    return { x: t.x, y: t.y, r: t.r };
  }function vo(t, n) {
    var e = t.x,
        r = t.y,
        i = t.r,
        o = n.x,
        u = n.y,
        a = n.r,
        c = o - e,
        s = u - r,
        f = a - i,
        l = Math.sqrt(c * c + s * s);return { x: (e + o + c / l * f) / 2, y: (r + u + s / l * f) / 2, r: (l + i + a) / 2 };
  }function _o(t, n, e) {
    var r = t.x,
        i = t.y,
        o = t.r,
        u = n.x,
        a = n.y,
        c = n.r,
        s = e.x,
        f = e.y,
        l = e.r,
        h = r - u,
        p = r - s,
        d = i - a,
        v = i - f,
        _ = c - o,
        y = l - o,
        g = r * r + i * i - o * o,
        m = g - u * u - a * a + c * c,
        x = g - s * s - f * f + l * l,
        b = p * d - h * v,
        w = (d * x - v * m) / (2 * b) - r,
        M = (v * _ - d * y) / b,
        T = (p * m - h * x) / (2 * b) - i,
        k = (h * y - p * _) / b,
        N = M * M + k * k - 1,
        S = 2 * (o + w * M + T * k),
        E = w * w + T * T - o * o,
        A = -(N ? (S + Math.sqrt(S * S - 4 * N * E)) / (2 * N) : E / S);return { x: r + w + M * A, y: i + T + k * A, r: A };
  }function yo(t, n, e) {
    var r = t.x,
        i = t.y,
        o = n.r + e.r,
        u = t.r + e.r,
        a = n.x - r,
        c = n.y - i,
        s = a * a + c * c;if (s) {
      var f = .5 + ((u *= u) - (o *= o)) / (2 * s),
          l = Math.sqrt(Math.max(0, 2 * o * (u + s) - (u -= s) * u - o * o)) / (2 * s);e.x = r + f * a + l * c, e.y = i + f * c - l * a;
    } else e.x = r + u, e.y = i;
  }function go(t, n) {
    var e = n.x - t.x,
        r = n.y - t.y,
        i = t.r + n.r;return i * i - 1e-6 > e * e + r * r;
  }function mo(t) {
    var n = t._,
        e = t.next._,
        r = n.r + e.r,
        i = (n.x * e.r + e.x * n.r) / r,
        o = (n.y * e.r + e.y * n.r) / r;return i * i + o * o;
  }function xo(t) {
    this._ = t, this.next = null, this.previous = null;
  }function bo(t) {
    if (!(i = t.length)) return 0;var n, e, r, i, o, u, a, c, s, f, l;if (n = t[0], n.x = 0, n.y = 0, !(i > 1)) return n.r;if (e = t[1], n.x = -e.r, e.x = n.r, e.y = 0, !(i > 2)) return n.r + e.r;yo(e, n, r = t[2]), n = new xo(n), e = new xo(e), r = new xo(r), n.next = r.previous = e, e.next = n.previous = r, r.next = e.previous = n;t: for (a = 3; a < i; ++a) {
      yo(n._, e._, r = t[a]), r = new xo(r), c = e.next, s = n.previous, f = e._.r, l = n._.r;do {
        if (f <= l) {
          if (go(c._, r._)) {
            e = c, n.next = e, e.previous = n, --a;continue t;
          }f += c._.r, c = c.next;
        } else {
          if (go(s._, r._)) {
            (n = s).next = e, e.previous = n, --a;continue t;
          }l += s._.r, s = s.previous;
        }
      } while (c !== s.next);for (r.previous = n, r.next = e, n.next = e.previous = e = r, o = mo(n); (r = r.next) !== e;) (u = mo(r)) < o && (n = r, o = u);e = n.next;
    }for (n = [e._], r = e; (r = r.next) !== e;) n.push(r._);for (r = Zv(n), a = 0; a < i; ++a) n = t[a], n.x -= r.x, n.y -= r.y;return r.r;
  }function wo(t) {
    return null == t ? null : Mo(t);
  }function Mo(t) {
    if ("function" != typeof t) throw new Error();return t;
  }function To() {
    return 0;
  }function ko(t) {
    return Math.sqrt(t.value);
  }function No(t) {
    return function (n) {
      n.children || (n.r = Math.max(0, +t(n) || 0));
    };
  }function So(t, n) {
    return function (e) {
      if (r = e.children) {
        var r,
            i,
            o,
            u = r.length,
            a = t(e) * n || 0;if (a) for (i = 0; i < u; ++i) r[i].r += a;if (o = bo(r), a) for (i = 0; i < u; ++i) r[i].r -= a;e.r = o + a;
      }
    };
  }function Eo(t) {
    return function (n) {
      var e = n.parent;n.r *= t, e && (n.x = e.x + t * n.x, n.y = e.y + t * n.y);
    };
  }function Ao(t) {
    return t.id;
  }function Co(t) {
    return t.parentId;
  }function zo(t, n) {
    return t.parent === n.parent ? 1 : 2;
  }function Po(t) {
    var n = t.children;return n ? n[0] : t.t;
  }function Ro(t) {
    var n = t.children;return n ? n[n.length - 1] : t.t;
  }function Lo(t, n, e) {
    var r = e / (n.i - t.i);n.c -= r, n.s += e, t.c += r, n.z += e, n.m += e;
  }function qo(t) {
    for (var n, e = 0, r = 0, i = t.children, o = i.length; --o >= 0;) (n = i[o]).z += e, n.m += e, e += n.s + (r += n.c);
  }function Uo(t, n, e) {
    return t.a.parent === n.parent ? t.a : e;
  }function Do(t, n) {
    this._ = t, this.parent = null, this.children = null, this.A = null, this.a = this, this.z = 0, this.m = 0, this.c = 0, this.s = 0, this.t = null, this.i = n;
  }function Oo(t) {
    for (var n, e, r, i, o, u = new Do(t, 0), a = [u]; n = a.pop();) if (r = n._.children) for (n.children = new Array(o = r.length), i = o - 1; i >= 0; --i) a.push(e = n.children[i] = new Do(r[i], i)), e.parent = n;return (u.parent = new Do(null, 0)).children = [u], u;
  }function Fo(t, n, e, r, i, o) {
    for (var u, a, c, s, f, l, h, p, d, v, _, y = [], g = n.children, m = 0, x = 0, b = g.length, w = n.value; m < b;) {
      c = i - e, s = o - r;do {
        f = g[x++].value;
      } while (!f && x < b);for (l = h = f, _ = f * f * (v = Math.max(s / c, c / s) / (w * t)), d = Math.max(h / _, _ / l); x < b; ++x) {
        if (f += a = g[x].value, a < l && (l = a), a > h && (h = a), _ = f * f * v, (p = Math.max(h / _, _ / l)) > d) {
          f -= a;break;
        }d = p;
      }y.push(u = { value: f, dice: c < s, children: g.slice(m, x) }), u.dice ? Qv(u, e, r, i, w ? r += s * f / w : o) : e_(u, e, r, w ? e += c * f / w : i, o), w -= f, m = x;
    }return y;
  }function Io(t, n) {
    return t[0] - n[0] || t[1] - n[1];
  }function Yo(t) {
    for (var n = t.length, e = [0, 1], r = 2, i = 2; i < n; ++i) {
      for (; r > 1 && u_(t[e[r - 2]], t[e[r - 1]], t[i]) <= 0;) --r;e[r++] = i;
    }return e.slice(0, r);
  }function Bo(t) {
    this._size = t, this._call = this._error = null, this._tasks = [], this._data = [], this._waiting = this._active = this._ended = this._start = 0;
  }function jo(t) {
    if (!t._start) try {
      Ho(t);
    } catch (n) {
      if (t._tasks[t._ended + t._active - 1]) $o(t, n);else if (!t._data) throw n;
    }
  }function Ho(t) {
    for (; t._start = t._waiting && t._active < t._size;) {
      var n = t._ended + t._active,
          e = t._tasks[n],
          r = e.length - 1,
          i = e[r];e[r] = Xo(t, n), --t._waiting, ++t._active, e = i.apply(null, e), t._tasks[n] && (t._tasks[n] = e || c_);
    }
  }function Xo(t, n) {
    return function (e, r) {
      t._tasks[n] && (--t._active, ++t._ended, t._tasks[n] = null, null == t._error && (null != e ? $o(t, e) : (t._data[n] = r, t._waiting ? jo(t) : Vo(t))));
    };
  }function $o(t, n) {
    var e,
        r = t._tasks.length;for (t._error = n, t._data = void 0, t._waiting = NaN; --r >= 0;) if ((e = t._tasks[r]) && (t._tasks[r] = null, e.abort)) try {
      e.abort();
    } catch (n) {}t._active = NaN, Vo(t);
  }function Vo(t) {
    if (!t._active && t._call) {
      var n = t._data;t._data = void 0, t._call(t._error, n);
    }
  }function Wo(t) {
    if (null == t) t = 1 / 0;else if (!((t = +t) >= 1)) throw new Error("invalid concurrency");return new Bo(t);
  }function Zo(t) {
    return function (n, e) {
      t(null == n ? e : null);
    };
  }function Go(t) {
    var n = t.responseType;return n && "text" !== n ? t.response : t.responseText;
  }function Jo(t, n) {
    return function (e) {
      return t(e.responseText, n);
    };
  }function Qo(t) {
    function n(n) {
      var o = n + "",
          u = e.get(o);if (!u) {
        if (i !== E_) return i;e.set(o, u = r.push(n));
      }return t[(u - 1) % t.length];
    }var e = we(),
        r = [],
        i = E_;return t = null == t ? [] : S_.call(t), n.domain = function (t) {
      if (!arguments.length) return r.slice();r = [], e = we();for (var i, o, u = -1, a = t.length; ++u < a;) e.has(o = (i = t[u]) + "") || e.set(o, r.push(i));return n;
    }, n.range = function (e) {
      return arguments.length ? (t = S_.call(e), n) : t.slice();
    }, n.unknown = function (t) {
      return arguments.length ? (i = t, n) : i;
    }, n.copy = function () {
      return Qo().domain(r).range(t).unknown(i);
    }, n;
  }function Ko() {
    function t() {
      var t = i().length,
          r = u[1] < u[0],
          l = u[r - 0],
          h = u[1 - r];n = (h - l) / Math.max(1, t - c + 2 * s), a && (n = Math.floor(n)), l += (h - l - n * (t - c)) * f, e = n * (1 - c), a && (l = Math.round(l), e = Math.round(e));var p = Ms(t).map(function (t) {
        return l + n * t;
      });return o(r ? p.reverse() : p);
    }var n,
        e,
        r = Qo().unknown(void 0),
        i = r.domain,
        o = r.range,
        u = [0, 1],
        a = !1,
        c = 0,
        s = 0,
        f = .5;return delete r.unknown, r.domain = function (n) {
      return arguments.length ? (i(n), t()) : i();
    }, r.range = function (n) {
      return arguments.length ? (u = [+n[0], +n[1]], t()) : u.slice();
    }, r.rangeRound = function (n) {
      return u = [+n[0], +n[1]], a = !0, t();
    }, r.bandwidth = function () {
      return e;
    }, r.step = function () {
      return n;
    }, r.round = function (n) {
      return arguments.length ? (a = !!n, t()) : a;
    }, r.padding = function (n) {
      return arguments.length ? (c = s = Math.max(0, Math.min(1, n)), t()) : c;
    }, r.paddingInner = function (n) {
      return arguments.length ? (c = Math.max(0, Math.min(1, n)), t()) : c;
    }, r.paddingOuter = function (n) {
      return arguments.length ? (s = Math.max(0, Math.min(1, n)), t()) : s;
    }, r.align = function (n) {
      return arguments.length ? (f = Math.max(0, Math.min(1, n)), t()) : f;
    }, r.copy = function () {
      return Ko().domain(i()).range(u).round(a).paddingInner(c).paddingOuter(s).align(f);
    }, t();
  }function tu(t) {
    var n = t.copy;return t.padding = t.paddingOuter, delete t.paddingInner, delete t.paddingOuter, t.copy = function () {
      return tu(n());
    }, t;
  }function nu(t, n) {
    return (n -= t = +t) ? function (e) {
      return (e - t) / n;
    } : A_(n);
  }function eu(t) {
    return function (n, e) {
      var r = t(n = +n, e = +e);return function (t) {
        return t <= n ? 0 : t >= e ? 1 : r(t);
      };
    };
  }function ru(t) {
    return function (n, e) {
      var r = t(n = +n, e = +e);return function (t) {
        return t <= 0 ? n : t >= 1 ? e : r(t);
      };
    };
  }function iu(t, n, e, r) {
    var i = t[0],
        o = t[1],
        u = n[0],
        a = n[1];return o < i ? (i = e(o, i), u = r(a, u)) : (i = e(i, o), u = r(u, a)), function (t) {
      return u(i(t));
    };
  }function ou(t, n, e, r) {
    var i = Math.min(t.length, n.length) - 1,
        o = new Array(i),
        u = new Array(i),
        a = -1;for (t[i] < t[0] && (t = t.slice().reverse(), n = n.slice().reverse()); ++a < i;) o[a] = e(t[a], t[a + 1]), u[a] = r(n[a], n[a + 1]);return function (n) {
      var e = hs(t, n, 1, i) - 1;return u[e](o[e](n));
    };
  }function uu(t, n) {
    return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp());
  }function au(t, n) {
    function e() {
      return i = Math.min(a.length, c.length) > 2 ? ou : iu, o = u = null, r;
    }function r(n) {
      return (o || (o = i(a, c, f ? eu(t) : t, s)))(+n);
    }var i,
        o,
        u,
        a = z_,
        c = z_,
        s = cl,
        f = !1;return r.invert = function (t) {
      return (u || (u = i(c, a, nu, f ? ru(n) : n)))(+t);
    }, r.domain = function (t) {
      return arguments.length ? (a = N_.call(t, C_), e()) : a.slice();
    }, r.range = function (t) {
      return arguments.length ? (c = S_.call(t), e()) : c.slice();
    }, r.rangeRound = function (t) {
      return c = S_.call(t), s = sl, e();
    }, r.clamp = function (t) {
      return arguments.length ? (f = !!t, e()) : f;
    }, r.interpolate = function (t) {
      return arguments.length ? (s = t, e()) : s;
    }, e();
  }function cu(t) {
    var n = t.domain;return t.ticks = function (t) {
      var e = n();return Ss(e[0], e[e.length - 1], null == t ? 10 : t);
    }, t.tickFormat = function (t, e) {
      return P_(n(), t, e);
    }, t.nice = function (e) {
      null == e && (e = 10);var i,
          o = n(),
          u = 0,
          a = o.length - 1,
          c = o[u],
          s = o[a];return s < c && (i = c, c = s, s = i, i = u, u = a, a = i), (i = r(c, s, e)) > 0 ? i = r(c = Math.floor(c / i) * i, s = Math.ceil(s / i) * i, e) : i < 0 && (i = r(c = Math.ceil(c * i) / i, s = Math.floor(s * i) / i, e)), i > 0 ? (o[u] = Math.floor(c / i) * i, o[a] = Math.ceil(s / i) * i, n(o)) : i < 0 && (o[u] = Math.ceil(c * i) / i, o[a] = Math.floor(s * i) / i, n(o)), t;
    }, t;
  }function su() {
    var t = au(nu, rl);return t.copy = function () {
      return uu(t, su());
    }, cu(t);
  }function fu() {
    function t(t) {
      return +t;
    }var n = [0, 1];return t.invert = t, t.domain = t.range = function (e) {
      return arguments.length ? (n = N_.call(e, C_), t) : n.slice();
    }, t.copy = function () {
      return fu().domain(n);
    }, cu(t);
  }function lu(t, n) {
    return (n = Math.log(n / t)) ? function (e) {
      return Math.log(e / t) / n;
    } : A_(n);
  }function hu(t, n) {
    return t < 0 ? function (e) {
      return -Math.pow(-n, e) * Math.pow(-t, 1 - e);
    } : function (e) {
      return Math.pow(n, e) * Math.pow(t, 1 - e);
    };
  }function pu(t) {
    return isFinite(t) ? +("1e" + t) : t < 0 ? 0 : t;
  }function du(t) {
    return 10 === t ? pu : t === Math.E ? Math.exp : function (n) {
      return Math.pow(t, n);
    };
  }function vu(t) {
    return t === Math.E ? Math.log : 10 === t && Math.log10 || 2 === t && Math.log2 || (t = Math.log(t), function (n) {
      return Math.log(n) / t;
    });
  }function _u(t) {
    return function (n) {
      return -t(-n);
    };
  }function yu() {
    function n() {
      return o = vu(i), u = du(i), r()[0] < 0 && (o = _u(o), u = _u(u)), e;
    }var e = au(lu, hu).domain([1, 10]),
        r = e.domain,
        i = 10,
        o = vu(10),
        u = du(10);return e.base = function (t) {
      return arguments.length ? (i = +t, n()) : i;
    }, e.domain = function (t) {
      return arguments.length ? (r(t), n()) : r();
    }, e.ticks = function (t) {
      var n,
          e = r(),
          a = e[0],
          c = e[e.length - 1];(n = c < a) && (h = a, a = c, c = h);var s,
          f,
          l,
          h = o(a),
          p = o(c),
          d = null == t ? 10 : +t,
          v = [];if (!(i % 1) && p - h < d) {
        if (h = Math.round(h) - 1, p = Math.round(p) + 1, a > 0) {
          for (; h < p; ++h) for (f = 1, s = u(h); f < i; ++f) if (!((l = s * f) < a)) {
            if (l > c) break;v.push(l);
          }
        } else for (; h < p; ++h) for (f = i - 1, s = u(h); f >= 1; --f) if (!((l = s * f) < a)) {
          if (l > c) break;v.push(l);
        }
      } else v = Ss(h, p, Math.min(p - h, d)).map(u);return n ? v.reverse() : v;
    }, e.tickFormat = function (n, r) {
      if (null == r && (r = 10 === i ? ".0e" : ","), "function" != typeof r && (r = t.format(r)), n === 1 / 0) return r;null == n && (n = 10);var a = Math.max(1, i * n / e.ticks().length);return function (t) {
        var n = t / u(Math.round(o(t)));return n * i < i - .5 && (n *= i), n <= a ? r(t) : "";
      };
    }, e.nice = function () {
      return r(R_(r(), { floor: function (t) {
          return u(Math.floor(o(t)));
        }, ceil: function (t) {
          return u(Math.ceil(o(t)));
        } }));
    }, e.copy = function () {
      return uu(e, yu().base(i));
    }, e;
  }function gu(t, n) {
    return t < 0 ? -Math.pow(-t, n) : Math.pow(t, n);
  }function mu() {
    var t = 1,
        n = au(function (n, e) {
      return (e = gu(e, t) - (n = gu(n, t))) ? function (r) {
        return (gu(r, t) - n) / e;
      } : A_(e);
    }, function (n, e) {
      return e = gu(e, t) - (n = gu(n, t)), function (r) {
        return gu(n + e * r, 1 / t);
      };
    }),
        e = n.domain;return n.exponent = function (n) {
      return arguments.length ? (t = +n, e(e())) : t;
    }, n.copy = function () {
      return uu(n, mu().exponent(t));
    }, cu(n);
  }function xu() {
    function t() {
      var t = 0,
          o = Math.max(1, r.length);for (i = new Array(o - 1); ++t < o;) i[t - 1] = As(e, t / o);return n;
    }function n(t) {
      if (!isNaN(t = +t)) return r[hs(i, t)];
    }var e = [],
        r = [],
        i = [];return n.invertExtent = function (t) {
      var n = r.indexOf(t);return n < 0 ? [NaN, NaN] : [n > 0 ? i[n - 1] : e[0], n < i.length ? i[n] : e[e.length - 1]];
    }, n.domain = function (n) {
      if (!arguments.length) return e.slice();e = [];for (var r, i = 0, o = n.length; i < o; ++i) null == (r = n[i]) || isNaN(r = +r) || e.push(r);return e.sort(ss), t();
    }, n.range = function (n) {
      return arguments.length ? (r = S_.call(n), t()) : r.slice();
    }, n.quantiles = function () {
      return i.slice();
    }, n.copy = function () {
      return xu().domain(e).range(r);
    }, n;
  }function bu() {
    function t(t) {
      if (t <= t) return u[hs(o, t, 0, i)];
    }function n() {
      var n = -1;for (o = new Array(i); ++n < i;) o[n] = ((n + 1) * r - (n - i) * e) / (i + 1);return t;
    }var e = 0,
        r = 1,
        i = 1,
        o = [.5],
        u = [0, 1];return t.domain = function (t) {
      return arguments.length ? (e = +t[0], r = +t[1], n()) : [e, r];
    }, t.range = function (t) {
      return arguments.length ? (i = (u = S_.call(t)).length - 1, n()) : u.slice();
    }, t.invertExtent = function (t) {
      var n = u.indexOf(t);return n < 0 ? [NaN, NaN] : n < 1 ? [e, o[0]] : n >= i ? [o[i - 1], r] : [o[n - 1], o[n]];
    }, t.copy = function () {
      return bu().domain([e, r]).range(u);
    }, cu(t);
  }function wu() {
    function t(t) {
      if (t <= t) return e[hs(n, t, 0, r)];
    }var n = [.5],
        e = [0, 1],
        r = 1;return t.domain = function (i) {
      return arguments.length ? (n = S_.call(i), r = Math.min(n.length, e.length - 1), t) : n.slice();
    }, t.range = function (i) {
      return arguments.length ? (e = S_.call(i), r = Math.min(n.length, e.length - 1), t) : e.slice();
    }, t.invertExtent = function (t) {
      var r = e.indexOf(t);return [n[r - 1], n[r]];
    }, t.copy = function () {
      return wu().domain(n).range(e);
    }, t;
  }function Mu(t, n, e, r) {
    function i(n) {
      return t(n = new Date(+n)), n;
    }return i.floor = i, i.ceil = function (e) {
      return t(e = new Date(e - 1)), n(e, 1), t(e), e;
    }, i.round = function (t) {
      var n = i(t),
          e = i.ceil(t);return t - n < e - t ? n : e;
    }, i.offset = function (t, e) {
      return n(t = new Date(+t), null == e ? 1 : Math.floor(e)), t;
    }, i.range = function (e, r, o) {
      var u = [];if (e = i.ceil(e), o = null == o ? 1 : Math.floor(o), !(e < r && o > 0)) return u;do {
        u.push(new Date(+e));
      } while ((n(e, o), t(e), e < r));return u;
    }, i.filter = function (e) {
      return Mu(function (n) {
        if (n >= n) for (; t(n), !e(n);) n.setTime(n - 1);
      }, function (t, r) {
        if (t >= t) if (r < 0) for (; ++r <= 0;) for (; n(t, -1), !e(t););else for (; --r >= 0;) for (; n(t, 1), !e(t););
      });
    }, e && (i.count = function (n, r) {
      return L_.setTime(+n), q_.setTime(+r), t(L_), t(q_), Math.floor(e(L_, q_));
    }, i.every = function (t) {
      return t = Math.floor(t), isFinite(t) && t > 0 ? t > 1 ? i.filter(r ? function (n) {
        return r(n) % t == 0;
      } : function (n) {
        return i.count(0, n) % t == 0;
      }) : i : null;
    }), i;
  }function Tu(t) {
    return Mu(function (n) {
      n.setDate(n.getDate() - (n.getDay() + 7 - t) % 7), n.setHours(0, 0, 0, 0);
    }, function (t, n) {
      t.setDate(t.getDate() + 7 * n);
    }, function (t, n) {
      return (n - t - (n.getTimezoneOffset() - t.getTimezoneOffset()) * O_) / F_;
    });
  }function ku(t) {
    return Mu(function (n) {
      n.setUTCDate(n.getUTCDate() - (n.getUTCDay() + 7 - t) % 7), n.setUTCHours(0, 0, 0, 0);
    }, function (t, n) {
      t.setUTCDate(t.getUTCDate() + 7 * n);
    }, function (t, n) {
      return (n - t) / F_;
    });
  }function Nu(t) {
    if (0 <= t.y && t.y < 100) {
      var n = new Date(-1, t.m, t.d, t.H, t.M, t.S, t.L);return n.setFullYear(t.y), n;
    }return new Date(t.y, t.m, t.d, t.H, t.M, t.S, t.L);
  }function Su(t) {
    if (0 <= t.y && t.y < 100) {
      var n = new Date(Date.UTC(-1, t.m, t.d, t.H, t.M, t.S, t.L));return n.setUTCFullYear(t.y), n;
    }return new Date(Date.UTC(t.y, t.m, t.d, t.H, t.M, t.S, t.L));
  }function Eu(t) {
    return { y: t, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0 };
  }function Au(t) {
    function n(t, n) {
      return function (e) {
        var r,
            i,
            o,
            u = [],
            a = -1,
            c = 0,
            s = t.length;for (e instanceof Date || (e = new Date(+e)); ++a < s;) 37 === t.charCodeAt(a) && (u.push(t.slice(c, a)), null != (i = Dy[r = t.charAt(++a)]) ? r = t.charAt(++a) : i = "e" === r ? " " : "0", (o = n[r]) && (r = o(e, i)), u.push(r), c = a + 1);return u.push(t.slice(c, a)), u.join("");
      };
    }function e(t, n) {
      return function (e) {
        var i = Eu(1900);if (r(i, t, e += "", 0) != e.length) return null;if ("p" in i && (i.H = i.H % 12 + 12 * i.p), "W" in i || "U" in i) {
          "w" in i || (i.w = "W" in i ? 1 : 0);var o = "Z" in i ? Su(Eu(i.y)).getUTCDay() : n(Eu(i.y)).getDay();i.m = 0, i.d = "W" in i ? (i.w + 6) % 7 + 7 * i.W - (o + 5) % 7 : i.w + 7 * i.U - (o + 6) % 7;
        }return "Z" in i ? (i.H += i.Z / 100 | 0, i.M += i.Z % 100, Su(i)) : n(i);
      };
    }function r(t, n, e, r) {
      for (var i, o, u = 0, a = n.length, c = e.length; u < a;) {
        if (r >= c) return -1;if (37 === (i = n.charCodeAt(u++))) {
          if (i = n.charAt(u++), !(o = T[i in Dy ? n.charAt(u++) : i]) || (r = o(t, e, r)) < 0) return -1;
        } else if (i != e.charCodeAt(r++)) return -1;
      }return r;
    }var i = t.dateTime,
        o = t.date,
        u = t.time,
        a = t.periods,
        c = t.days,
        s = t.shortDays,
        f = t.months,
        l = t.shortMonths,
        h = Pu(a),
        p = Ru(a),
        d = Pu(c),
        v = Ru(c),
        _ = Pu(s),
        y = Ru(s),
        g = Pu(f),
        m = Ru(f),
        x = Pu(l),
        b = Ru(l),
        w = { a: function (t) {
        return s[t.getDay()];
      }, A: function (t) {
        return c[t.getDay()];
      }, b: function (t) {
        return l[t.getMonth()];
      }, B: function (t) {
        return f[t.getMonth()];
      }, c: null, d: Wu, e: Wu, H: Zu, I: Gu, j: Ju, L: Qu, m: Ku, M: ta, p: function (t) {
        return a[+(t.getHours() >= 12)];
      }, S: na, U: ea, w: ra, W: ia, x: null, X: null, y: oa, Y: ua, Z: aa, "%": wa },
        M = { a: function (t) {
        return s[t.getUTCDay()];
      }, A: function (t) {
        return c[t.getUTCDay()];
      }, b: function (t) {
        return l[t.getUTCMonth()];
      }, B: function (t) {
        return f[t.getUTCMonth()];
      }, c: null, d: ca, e: ca, H: sa, I: fa, j: la, L: ha, m: pa, M: da, p: function (t) {
        return a[+(t.getUTCHours() >= 12)];
      }, S: va, U: _a, w: ya, W: ga, x: null, X: null, y: ma, Y: xa, Z: ba, "%": wa },
        T = { a: function (t, n, e) {
        var r = _.exec(n.slice(e));return r ? (t.w = y[r[0].toLowerCase()], e + r[0].length) : -1;
      }, A: function (t, n, e) {
        var r = d.exec(n.slice(e));return r ? (t.w = v[r[0].toLowerCase()], e + r[0].length) : -1;
      }, b: function (t, n, e) {
        var r = x.exec(n.slice(e));return r ? (t.m = b[r[0].toLowerCase()], e + r[0].length) : -1;
      }, B: function (t, n, e) {
        var r = g.exec(n.slice(e));return r ? (t.m = m[r[0].toLowerCase()], e + r[0].length) : -1;
      }, c: function (t, n, e) {
        return r(t, i, n, e);
      }, d: Yu, e: Yu, H: ju, I: ju, j: Bu, L: $u, m: Iu, M: Hu, p: function (t, n, e) {
        var r = h.exec(n.slice(e));return r ? (t.p = p[r[0].toLowerCase()], e + r[0].length) : -1;
      }, S: Xu, U: qu, w: Lu, W: Uu, x: function (t, n, e) {
        return r(t, o, n, e);
      }, X: function (t, n, e) {
        return r(t, u, n, e);
      }, y: Ou, Y: Du, Z: Fu, "%": Vu };return w.x = n(o, w), w.X = n(u, w), w.c = n(i, w), M.x = n(o, M), M.X = n(u, M), M.c = n(i, M), { format: function (t) {
        var e = n(t += "", w);return e.toString = function () {
          return t;
        }, e;
      }, parse: function (t) {
        var n = e(t += "", Nu);return n.toString = function () {
          return t;
        }, n;
      }, utcFormat: function (t) {
        var e = n(t += "", M);return e.toString = function () {
          return t;
        }, e;
      }, utcParse: function (t) {
        var n = e(t, Su);return n.toString = function () {
          return t;
        }, n;
      } };
  }function Cu(t, n, e) {
    var r = t < 0 ? "-" : "",
        i = (r ? -t : t) + "",
        o = i.length;return r + (o < e ? new Array(e - o + 1).join(n) + i : i);
  }function zu(t) {
    return t.replace(Iy, "\\$&");
  }function Pu(t) {
    return new RegExp("^(?:" + t.map(zu).join("|") + ")", "i");
  }function Ru(t) {
    for (var n = {}, e = -1, r = t.length; ++e < r;) n[t[e].toLowerCase()] = e;return n;
  }function Lu(t, n, e) {
    var r = Oy.exec(n.slice(e, e + 1));return r ? (t.w = +r[0], e + r[0].length) : -1;
  }function qu(t, n, e) {
    var r = Oy.exec(n.slice(e));return r ? (t.U = +r[0], e + r[0].length) : -1;
  }function Uu(t, n, e) {
    var r = Oy.exec(n.slice(e));return r ? (t.W = +r[0], e + r[0].length) : -1;
  }function Du(t, n, e) {
    var r = Oy.exec(n.slice(e, e + 4));return r ? (t.y = +r[0], e + r[0].length) : -1;
  }function Ou(t, n, e) {
    var r = Oy.exec(n.slice(e, e + 2));return r ? (t.y = +r[0] + (+r[0] > 68 ? 1900 : 2e3), e + r[0].length) : -1;
  }function Fu(t, n, e) {
    var r = /^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(n.slice(e, e + 6));return r ? (t.Z = r[1] ? 0 : -(r[2] + (r[3] || "00")), e + r[0].length) : -1;
  }function Iu(t, n, e) {
    var r = Oy.exec(n.slice(e, e + 2));return r ? (t.m = r[0] - 1, e + r[0].length) : -1;
  }function Yu(t, n, e) {
    var r = Oy.exec(n.slice(e, e + 2));return r ? (t.d = +r[0], e + r[0].length) : -1;
  }function Bu(t, n, e) {
    var r = Oy.exec(n.slice(e, e + 3));return r ? (t.m = 0, t.d = +r[0], e + r[0].length) : -1;
  }function ju(t, n, e) {
    var r = Oy.exec(n.slice(e, e + 2));return r ? (t.H = +r[0], e + r[0].length) : -1;
  }function Hu(t, n, e) {
    var r = Oy.exec(n.slice(e, e + 2));return r ? (t.M = +r[0], e + r[0].length) : -1;
  }function Xu(t, n, e) {
    var r = Oy.exec(n.slice(e, e + 2));return r ? (t.S = +r[0], e + r[0].length) : -1;
  }function $u(t, n, e) {
    var r = Oy.exec(n.slice(e, e + 3));return r ? (t.L = +r[0], e + r[0].length) : -1;
  }function Vu(t, n, e) {
    var r = Fy.exec(n.slice(e, e + 1));return r ? e + r[0].length : -1;
  }function Wu(t, n) {
    return Cu(t.getDate(), n, 2);
  }function Zu(t, n) {
    return Cu(t.getHours(), n, 2);
  }function Gu(t, n) {
    return Cu(t.getHours() % 12 || 12, n, 2);
  }function Ju(t, n) {
    return Cu(1 + $_.count(fy(t), t), n, 3);
  }function Qu(t, n) {
    return Cu(t.getMilliseconds(), n, 3);
  }function Ku(t, n) {
    return Cu(t.getMonth() + 1, n, 2);
  }function ta(t, n) {
    return Cu(t.getMinutes(), n, 2);
  }function na(t, n) {
    return Cu(t.getSeconds(), n, 2);
  }function ea(t, n) {
    return Cu(W_.count(fy(t), t), n, 2);
  }function ra(t) {
    return t.getDay();
  }function ia(t, n) {
    return Cu(Z_.count(fy(t), t), n, 2);
  }function oa(t, n) {
    return Cu(t.getFullYear() % 100, n, 2);
  }function ua(t, n) {
    return Cu(t.getFullYear() % 1e4, n, 4);
  }function aa(t) {
    var n = t.getTimezoneOffset();return (n > 0 ? "-" : (n *= -1, "+")) + Cu(n / 60 | 0, "0", 2) + Cu(n % 60, "0", 2);
  }function ca(t, n) {
    return Cu(t.getUTCDate(), n, 2);
  }function sa(t, n) {
    return Cu(t.getUTCHours(), n, 2);
  }function fa(t, n) {
    return Cu(t.getUTCHours() % 12 || 12, n, 2);
  }function la(t, n) {
    return Cu(1 + _y.count(Ly(t), t), n, 3);
  }function ha(t, n) {
    return Cu(t.getUTCMilliseconds(), n, 3);
  }function pa(t, n) {
    return Cu(t.getUTCMonth() + 1, n, 2);
  }function da(t, n) {
    return Cu(t.getUTCMinutes(), n, 2);
  }function va(t, n) {
    return Cu(t.getUTCSeconds(), n, 2);
  }function _a(t, n) {
    return Cu(gy.count(Ly(t), t), n, 2);
  }function ya(t) {
    return t.getUTCDay();
  }function ga(t, n) {
    return Cu(my.count(Ly(t), t), n, 2);
  }function ma(t, n) {
    return Cu(t.getUTCFullYear() % 100, n, 2);
  }function xa(t, n) {
    return Cu(t.getUTCFullYear() % 1e4, n, 4);
  }function ba() {
    return "+0000";
  }function wa() {
    return "%";
  }function Ma(n) {
    return qy = Au(n), t.timeFormat = qy.format, t.timeParse = qy.parse, t.utcFormat = qy.utcFormat, t.utcParse = qy.utcParse, qy;
  }function Ta(t) {
    return new Date(t);
  }function ka(t) {
    return t instanceof Date ? +t : +new Date(+t);
  }function Na(t, n, e, r, o, u, a, c, s) {
    function f(i) {
      return (a(i) < i ? v : u(i) < i ? _ : o(i) < i ? y : r(i) < i ? g : n(i) < i ? e(i) < i ? m : x : t(i) < i ? b : w)(i);
    }function l(n, e, r, o) {
      if (null == n && (n = 10), "number" == typeof n) {
        var u = Math.abs(r - e) / n,
            a = fs(function (t) {
          return t[2];
        }).right(M, u);a === M.length ? (o = i(e / Zy, r / Zy, n), n = t) : a ? (o = (a = M[u / M[a - 1][2] < M[a][2] / u ? a - 1 : a])[1], n = a[0]) : (o = i(e, r, n), n = c);
      }return null == o ? n : n.every(o);
    }var h = au(nu, rl),
        p = h.invert,
        d = h.domain,
        v = s(".%L"),
        _ = s(":%S"),
        y = s("%I:%M"),
        g = s("%I %p"),
        m = s("%a %d"),
        x = s("%b %d"),
        b = s("%B"),
        w = s("%Y"),
        M = [[a, 1, jy], [a, 5, 5 * jy], [a, 15, 15 * jy], [a, 30, 30 * jy], [u, 1, Hy], [u, 5, 5 * Hy], [u, 15, 15 * Hy], [u, 30, 30 * Hy], [o, 1, Xy], [o, 3, 3 * Xy], [o, 6, 6 * Xy], [o, 12, 12 * Xy], [r, 1, $y], [r, 2, 2 * $y], [e, 1, Vy], [n, 1, Wy], [n, 3, 3 * Wy], [t, 1, Zy]];return h.invert = function (t) {
      return new Date(p(t));
    }, h.domain = function (t) {
      return arguments.length ? d(N_.call(t, ka)) : d().map(Ta);
    }, h.ticks = function (t, n) {
      var e,
          r = d(),
          i = r[0],
          o = r[r.length - 1],
          u = o < i;return u && (e = i, i = o, o = e), e = l(t, i, o, n), e = e ? e.range(i, o + 1) : [], u ? e.reverse() : e;
    }, h.tickFormat = function (t, n) {
      return null == n ? f : s(n);
    }, h.nice = function (t, n) {
      var e = d();return (t = l(t, e[0], e[e.length - 1], n)) ? d(R_(e, t)) : h;
    }, h.copy = function () {
      return uu(h, Na(t, n, e, r, o, u, a, c, s));
    }, h;
  }function Sa(t) {
    var n = t.length;return function (e) {
      return t[Math.max(0, Math.min(n - 1, Math.floor(e * n)))];
    };
  }function Ea(t) {
    function n(n) {
      var o = (n - e) / (r - e);return t(i ? Math.max(0, Math.min(1, o)) : o);
    }var e = 0,
        r = 1,
        i = !1;return n.domain = function (t) {
      return arguments.length ? (e = +t[0], r = +t[1], n) : [e, r];
    }, n.clamp = function (t) {
      return arguments.length ? (i = !!t, n) : i;
    }, n.interpolator = function (e) {
      return arguments.length ? (t = e, n) : t;
    }, n.copy = function () {
      return Ea(t).domain([e, r]).clamp(i);
    }, cu(n);
  }function Aa(t) {
    return t > 1 ? 0 : t < -1 ? gg : Math.acos(t);
  }function Ca(t) {
    return t >= 1 ? mg : t <= -1 ? -mg : Math.asin(t);
  }function za(t) {
    return t.innerRadius;
  }function Pa(t) {
    return t.outerRadius;
  }function Ra(t) {
    return t.startAngle;
  }function La(t) {
    return t.endAngle;
  }function qa(t) {
    return t && t.padAngle;
  }function Ua(t, n, e, r, i, o, u, a) {
    var c = e - t,
        s = r - n,
        f = u - i,
        l = a - o,
        h = (f * (n - o) - l * (t - i)) / (l * c - f * s);return [t + h * c, n + h * s];
  }function Da(t, n, e, r, i, o, u) {
    var a = t - e,
        c = n - r,
        s = (u ? o : -o) / _g(a * a + c * c),
        f = s * c,
        l = -s * a,
        h = t + f,
        p = n + l,
        d = e + f,
        v = r + l,
        _ = (h + d) / 2,
        y = (p + v) / 2,
        g = d - h,
        m = v - p,
        x = g * g + m * m,
        b = i - o,
        w = h * v - d * p,
        M = (m < 0 ? -1 : 1) * _g(pg(0, b * b * x - w * w)),
        T = (w * m - g * M) / x,
        k = (-w * g - m * M) / x,
        N = (w * m + g * M) / x,
        S = (-w * g + m * M) / x,
        E = T - _,
        A = k - y,
        C = N - _,
        z = S - y;return E * E + A * A > C * C + z * z && (T = N, k = S), { cx: T, cy: k, x01: -f, y01: -l, x11: T * (i / b - 1), y11: k * (i / b - 1) };
  }function Oa(t) {
    this._context = t;
  }function Fa(t) {
    return t[0];
  }function Ia(t) {
    return t[1];
  }function Ya(t) {
    this._curve = t;
  }function Ba(t) {
    function n(n) {
      return new Ya(t(n));
    }return n._curve = t, n;
  }function ja(t) {
    var n = t.curve;return t.angle = t.x, delete t.x, t.radius = t.y, delete t.y, t.curve = function (t) {
      return arguments.length ? n(Ba(t)) : n()._curve;
    }, t;
  }function Ha(t) {
    return t.source;
  }function Xa(t) {
    return t.target;
  }function $a(t) {
    function n() {
      var n,
          a = Cg.call(arguments),
          c = e.apply(this, a),
          s = r.apply(this, a);if (u || (u = n = ve()), t(u, +i.apply(this, (a[0] = c, a)), +o.apply(this, a), +i.apply(this, (a[0] = s, a)), +o.apply(this, a)), n) return u = null, n + "" || null;
    }var e = Ha,
        r = Xa,
        i = Fa,
        o = Ia,
        u = null;return n.source = function (t) {
      return arguments.length ? (e = t, n) : e;
    }, n.target = function (t) {
      return arguments.length ? (r = t, n) : r;
    }, n.x = function (t) {
      return arguments.length ? (i = "function" == typeof t ? t : sg(+t), n) : i;
    }, n.y = function (t) {
      return arguments.length ? (o = "function" == typeof t ? t : sg(+t), n) : o;
    }, n.context = function (t) {
      return arguments.length ? (u = null == t ? null : t, n) : u;
    }, n;
  }function Va(t, n, e, r, i) {
    t.moveTo(n, e), t.bezierCurveTo(n = (n + r) / 2, e, n, i, r, i);
  }function Wa(t, n, e, r, i) {
    t.moveTo(n, e), t.bezierCurveTo(n, e = (e + i) / 2, r, e, r, i);
  }function Za(t, n, e, r, i) {
    var o = Ag(n, e),
        u = Ag(n, e = (e + i) / 2),
        a = Ag(r, e),
        c = Ag(r, i);t.moveTo(o[0], o[1]), t.bezierCurveTo(u[0], u[1], a[0], a[1], c[0], c[1]);
  }function Ga(t, n, e) {
    t._context.bezierCurveTo((2 * t._x0 + t._x1) / 3, (2 * t._y0 + t._y1) / 3, (t._x0 + 2 * t._x1) / 3, (t._y0 + 2 * t._y1) / 3, (t._x0 + 4 * t._x1 + n) / 6, (t._y0 + 4 * t._y1 + e) / 6);
  }function Ja(t) {
    this._context = t;
  }function Qa(t) {
    this._context = t;
  }function Ka(t) {
    this._context = t;
  }function tc(t, n) {
    this._basis = new Ja(t), this._beta = n;
  }function nc(t, n, e) {
    t._context.bezierCurveTo(t._x1 + t._k * (t._x2 - t._x0), t._y1 + t._k * (t._y2 - t._y0), t._x2 + t._k * (t._x1 - n), t._y2 + t._k * (t._y1 - e), t._x2, t._y2);
  }function ec(t, n) {
    this._context = t, this._k = (1 - n) / 6;
  }function rc(t, n) {
    this._context = t, this._k = (1 - n) / 6;
  }function ic(t, n) {
    this._context = t, this._k = (1 - n) / 6;
  }function oc(t, n, e) {
    var r = t._x1,
        i = t._y1,
        o = t._x2,
        u = t._y2;if (t._l01_a > yg) {
      var a = 2 * t._l01_2a + 3 * t._l01_a * t._l12_a + t._l12_2a,
          c = 3 * t._l01_a * (t._l01_a + t._l12_a);r = (r * a - t._x0 * t._l12_2a + t._x2 * t._l01_2a) / c, i = (i * a - t._y0 * t._l12_2a + t._y2 * t._l01_2a) / c;
    }if (t._l23_a > yg) {
      var s = 2 * t._l23_2a + 3 * t._l23_a * t._l12_a + t._l12_2a,
          f = 3 * t._l23_a * (t._l23_a + t._l12_a);o = (o * s + t._x1 * t._l23_2a - n * t._l12_2a) / f, u = (u * s + t._y1 * t._l23_2a - e * t._l12_2a) / f;
    }t._context.bezierCurveTo(r, i, o, u, t._x2, t._y2);
  }function uc(t, n) {
    this._context = t, this._alpha = n;
  }function ac(t, n) {
    this._context = t, this._alpha = n;
  }function cc(t, n) {
    this._context = t, this._alpha = n;
  }function sc(t) {
    this._context = t;
  }function fc(t) {
    return t < 0 ? -1 : 1;
  }function lc(t, n, e) {
    var r = t._x1 - t._x0,
        i = n - t._x1,
        o = (t._y1 - t._y0) / (r || i < 0 && -0),
        u = (e - t._y1) / (i || r < 0 && -0),
        a = (o * i + u * r) / (r + i);return (fc(o) + fc(u)) * Math.min(Math.abs(o), Math.abs(u), .5 * Math.abs(a)) || 0;
  }function hc(t, n) {
    var e = t._x1 - t._x0;return e ? (3 * (t._y1 - t._y0) / e - n) / 2 : n;
  }function pc(t, n, e) {
    var r = t._x0,
        i = t._y0,
        o = t._x1,
        u = t._y1,
        a = (o - r) / 3;t._context.bezierCurveTo(r + a, i + a * n, o - a, u - a * e, o, u);
  }function dc(t) {
    this._context = t;
  }function vc(t) {
    this._context = new _c(t);
  }function _c(t) {
    this._context = t;
  }function yc(t) {
    this._context = t;
  }function gc(t) {
    var n,
        e,
        r = t.length - 1,
        i = new Array(r),
        o = new Array(r),
        u = new Array(r);for (i[0] = 0, o[0] = 2, u[0] = t[0] + 2 * t[1], n = 1; n < r - 1; ++n) i[n] = 1, o[n] = 4, u[n] = 4 * t[n] + 2 * t[n + 1];for (i[r - 1] = 2, o[r - 1] = 7, u[r - 1] = 8 * t[r - 1] + t[r], n = 1; n < r; ++n) e = i[n] / o[n - 1], o[n] -= e, u[n] -= e * u[n - 1];for (i[r - 1] = u[r - 1] / o[r - 1], n = r - 2; n >= 0; --n) i[n] = (u[n] - i[n + 1]) / o[n];for (o[r - 1] = (t[r] + i[r - 1]) / 2, n = 0; n < r - 1; ++n) o[n] = 2 * t[n + 1] - i[n + 1];return [i, o];
  }function mc(t, n) {
    this._context = t, this._t = n;
  }function xc(t, n) {
    return t[n];
  }function bc(t) {
    for (var n, e = 0, r = -1, i = t.length; ++r < i;) (n = +t[r][1]) && (e += n);return e;
  }function wc(t) {
    return t[0];
  }function Mc(t) {
    return t[1];
  }function Tc() {
    this._ = null;
  }function kc(t) {
    t.U = t.C = t.L = t.R = t.P = t.N = null;
  }function Nc(t, n) {
    var e = n,
        r = n.R,
        i = e.U;i ? i.L === e ? i.L = r : i.R = r : t._ = r, r.U = i, e.U = r, e.R = r.L, e.R && (e.R.U = e), r.L = e;
  }function Sc(t, n) {
    var e = n,
        r = n.L,
        i = e.U;i ? i.L === e ? i.L = r : i.R = r : t._ = r, r.U = i, e.U = r, e.L = r.R, e.L && (e.L.U = e), r.R = e;
  }function Ec(t) {
    for (; t.L;) t = t.L;return t;
  }function Ac(t, n, e, r) {
    var i = [null, null],
        o = lm.push(i) - 1;return i.left = t, i.right = n, e && zc(i, t, n, e), r && zc(i, n, t, r), sm[t.index].halfedges.push(o), sm[n.index].halfedges.push(o), i;
  }function Cc(t, n, e) {
    var r = [n, e];return r.left = t, r;
  }function zc(t, n, e, r) {
    t[0] || t[1] ? t.left === e ? t[1] = r : t[0] = r : (t[0] = r, t.left = n, t.right = e);
  }function Pc(t, n, e, r, i) {
    var o,
        u = t[0],
        a = t[1],
        c = u[0],
        s = u[1],
        f = 0,
        l = 1,
        h = a[0] - c,
        p = a[1] - s;if (o = n - c, h || !(o > 0)) {
      if (o /= h, h < 0) {
        if (o < f) return;o < l && (l = o);
      } else if (h > 0) {
        if (o > l) return;o > f && (f = o);
      }if (o = r - c, h || !(o < 0)) {
        if (o /= h, h < 0) {
          if (o > l) return;o > f && (f = o);
        } else if (h > 0) {
          if (o < f) return;o < l && (l = o);
        }if (o = e - s, p || !(o > 0)) {
          if (o /= p, p < 0) {
            if (o < f) return;o < l && (l = o);
          } else if (p > 0) {
            if (o > l) return;o > f && (f = o);
          }if (o = i - s, p || !(o < 0)) {
            if (o /= p, p < 0) {
              if (o > l) return;o > f && (f = o);
            } else if (p > 0) {
              if (o < f) return;o < l && (l = o);
            }return !(f > 0 || l < 1) || (f > 0 && (t[0] = [c + f * h, s + f * p]), l < 1 && (t[1] = [c + l * h, s + l * p]), !0);
          }
        }
      }
    }
  }function Rc(t, n, e, r, i) {
    var o = t[1];if (o) return !0;var u,
        a,
        c = t[0],
        s = t.left,
        f = t.right,
        l = s[0],
        h = s[1],
        p = f[0],
        d = f[1],
        v = (l + p) / 2,
        _ = (h + d) / 2;if (d === h) {
      if (v < n || v >= r) return;if (l > p) {
        if (c) {
          if (c[1] >= i) return;
        } else c = [v, e];o = [v, i];
      } else {
        if (c) {
          if (c[1] < e) return;
        } else c = [v, i];o = [v, e];
      }
    } else if (u = (l - p) / (d - h), a = _ - u * v, u < -1 || u > 1) {
      if (l > p) {
        if (c) {
          if (c[1] >= i) return;
        } else c = [(e - a) / u, e];o = [(i - a) / u, i];
      } else {
        if (c) {
          if (c[1] < e) return;
        } else c = [(i - a) / u, i];o = [(e - a) / u, e];
      }
    } else if (h < d) {
      if (c) {
        if (c[0] >= r) return;
      } else c = [n, u * n + a];o = [r, u * r + a];
    } else {
      if (c) {
        if (c[0] < n) return;
      } else c = [r, u * r + a];o = [n, u * n + a];
    }return t[0] = c, t[1] = o, !0;
  }function Lc(t, n, e, r) {
    for (var i, o = lm.length; o--;) Rc(i = lm[o], t, n, e, r) && Pc(i, t, n, e, r) && (Math.abs(i[0][0] - i[1][0]) > dm || Math.abs(i[0][1] - i[1][1]) > dm) || delete lm[o];
  }function qc(t) {
    return sm[t.index] = { site: t, halfedges: [] };
  }function Uc(t, n) {
    var e = t.site,
        r = n.left,
        i = n.right;return e === i && (i = r, r = e), i ? Math.atan2(i[1] - r[1], i[0] - r[0]) : (e === r ? (r = n[1], i = n[0]) : (r = n[0], i = n[1]), Math.atan2(r[0] - i[0], i[1] - r[1]));
  }function Dc(t, n) {
    return n[+(n.left !== t.site)];
  }function Oc(t, n) {
    return n[+(n.left === t.site)];
  }function Fc() {
    for (var t, n, e, r, i = 0, o = sm.length; i < o; ++i) if ((t = sm[i]) && (r = (n = t.halfedges).length)) {
      var u = new Array(r),
          a = new Array(r);for (e = 0; e < r; ++e) u[e] = e, a[e] = Uc(t, lm[n[e]]);for (u.sort(function (t, n) {
        return a[n] - a[t];
      }), e = 0; e < r; ++e) a[e] = n[u[e]];for (e = 0; e < r; ++e) n[e] = a[e];
    }
  }function Ic(t, n, e, r) {
    var i,
        o,
        u,
        a,
        c,
        s,
        f,
        l,
        h,
        p,
        d,
        v,
        _ = sm.length,
        y = !0;for (i = 0; i < _; ++i) if (o = sm[i]) {
      for (u = o.site, a = (c = o.halfedges).length; a--;) lm[c[a]] || c.splice(a, 1);for (a = 0, s = c.length; a < s;) d = (p = Oc(o, lm[c[a]]))[0], v = p[1], l = (f = Dc(o, lm[c[++a % s]]))[0], h = f[1], (Math.abs(d - l) > dm || Math.abs(v - h) > dm) && (c.splice(a, 0, lm.push(Cc(u, p, Math.abs(d - t) < dm && r - v > dm ? [t, Math.abs(l - t) < dm ? h : r] : Math.abs(v - r) < dm && e - d > dm ? [Math.abs(h - r) < dm ? l : e, r] : Math.abs(d - e) < dm && v - n > dm ? [e, Math.abs(l - e) < dm ? h : n] : Math.abs(v - n) < dm && d - t > dm ? [Math.abs(h - n) < dm ? l : t, n] : null)) - 1), ++s);s && (y = !1);
    }if (y) {
      var g,
          m,
          x,
          b = 1 / 0;for (i = 0, y = null; i < _; ++i) (o = sm[i]) && (x = (g = (u = o.site)[0] - t) * g + (m = u[1] - n) * m) < b && (b = x, y = o);if (y) {
        var w = [t, n],
            M = [t, r],
            T = [e, r],
            k = [e, n];y.halfedges.push(lm.push(Cc(u = y.site, w, M)) - 1, lm.push(Cc(u, M, T)) - 1, lm.push(Cc(u, T, k)) - 1, lm.push(Cc(u, k, w)) - 1);
      }
    }for (i = 0; i < _; ++i) (o = sm[i]) && (o.halfedges.length || delete sm[i]);
  }function Yc() {
    kc(this), this.x = this.y = this.arc = this.site = this.cy = null;
  }function Bc(t) {
    var n = t.P,
        e = t.N;if (n && e) {
      var r = n.site,
          i = t.site,
          o = e.site;if (r !== o) {
        var u = i[0],
            a = i[1],
            c = r[0] - u,
            s = r[1] - a,
            f = o[0] - u,
            l = o[1] - a,
            h = 2 * (c * l - s * f);if (!(h >= -vm)) {
          var p = c * c + s * s,
              d = f * f + l * l,
              v = (l * p - s * d) / h,
              _ = (c * d - f * p) / h,
              y = hm.pop() || new Yc();y.arc = t, y.site = i, y.x = v + u, y.y = (y.cy = _ + a) + Math.sqrt(v * v + _ * _), t.circle = y;for (var g = null, m = fm._; m;) if (y.y < m.y || y.y === m.y && y.x <= m.x) {
            if (!m.L) {
              g = m.P;break;
            }m = m.L;
          } else {
            if (!m.R) {
              g = m;break;
            }m = m.R;
          }fm.insert(g, y), g || (am = y);
        }
      }
    }
  }function jc(t) {
    var n = t.circle;n && (n.P || (am = n.N), fm.remove(n), hm.push(n), kc(n), t.circle = null);
  }function Hc() {
    kc(this), this.edge = this.site = this.circle = null;
  }function Xc(t) {
    var n = pm.pop() || new Hc();return n.site = t, n;
  }function $c(t) {
    jc(t), cm.remove(t), pm.push(t), kc(t);
  }function Vc(t) {
    var n = t.circle,
        e = n.x,
        r = n.cy,
        i = [e, r],
        o = t.P,
        u = t.N,
        a = [t];$c(t);for (var c = o; c.circle && Math.abs(e - c.circle.x) < dm && Math.abs(r - c.circle.cy) < dm;) o = c.P, a.unshift(c), $c(c), c = o;a.unshift(c), jc(c);for (var s = u; s.circle && Math.abs(e - s.circle.x) < dm && Math.abs(r - s.circle.cy) < dm;) u = s.N, a.push(s), $c(s), s = u;a.push(s), jc(s);var f,
        l = a.length;for (f = 1; f < l; ++f) s = a[f], c = a[f - 1], zc(s.edge, c.site, s.site, i);c = a[0], (s = a[l - 1]).edge = Ac(c.site, s.site, null, i), Bc(c), Bc(s);
  }function Wc(t) {
    for (var n, e, r, i, o = t[0], u = t[1], a = cm._; a;) if ((r = Zc(a, u) - o) > dm) a = a.L;else {
      if (!((i = o - Gc(a, u)) > dm)) {
        r > -dm ? (n = a.P, e = a) : i > -dm ? (n = a, e = a.N) : n = e = a;break;
      }if (!a.R) {
        n = a;break;
      }a = a.R;
    }qc(t);var c = Xc(t);if (cm.insert(n, c), n || e) {
      if (n === e) return jc(n), e = Xc(n.site), cm.insert(c, e), c.edge = e.edge = Ac(n.site, c.site), Bc(n), void Bc(e);if (e) {
        jc(n), jc(e);var s = n.site,
            f = s[0],
            l = s[1],
            h = t[0] - f,
            p = t[1] - l,
            d = e.site,
            v = d[0] - f,
            _ = d[1] - l,
            y = 2 * (h * _ - p * v),
            g = h * h + p * p,
            m = v * v + _ * _,
            x = [(_ * g - p * m) / y + f, (h * m - v * g) / y + l];zc(e.edge, s, d, x), c.edge = Ac(s, t, null, x), e.edge = Ac(t, d, null, x), Bc(n), Bc(e);
      } else c.edge = Ac(n.site, c.site);
    }
  }function Zc(t, n) {
    var e = t.site,
        r = e[0],
        i = e[1],
        o = i - n;if (!o) return r;var u = t.P;if (!u) return -1 / 0;var a = (e = u.site)[0],
        c = e[1],
        s = c - n;if (!s) return a;var f = a - r,
        l = 1 / o - 1 / s,
        h = f / s;return l ? (-h + Math.sqrt(h * h - 2 * l * (f * f / (-2 * s) - c + s / 2 + i - o / 2))) / l + r : (r + a) / 2;
  }function Gc(t, n) {
    var e = t.N;if (e) return Zc(e, n);var r = t.site;return r[1] === n ? r[0] : 1 / 0;
  }function Jc(t, n, e) {
    return (t[0] - e[0]) * (n[1] - t[1]) - (t[0] - n[0]) * (e[1] - t[1]);
  }function Qc(t, n) {
    return n[1] - t[1] || n[0] - t[0];
  }function Kc(t, n) {
    var e,
        r,
        i,
        o = t.sort(Qc).pop();for (lm = [], sm = new Array(t.length), cm = new Tc(), fm = new Tc();;) if (i = am, o && (!i || o[1] < i.y || o[1] === i.y && o[0] < i.x)) o[0] === e && o[1] === r || (Wc(o), e = o[0], r = o[1]), o = t.pop();else {
      if (!i) break;Vc(i.arc);
    }if (Fc(), n) {
      var u = +n[0][0],
          a = +n[0][1],
          c = +n[1][0],
          s = +n[1][1];Lc(u, a, c, s), Ic(u, a, c, s);
    }this.edges = lm, this.cells = sm, cm = fm = lm = sm = null;
  }function ts(t, n, e) {
    this.target = t, this.type = n, this.transform = e;
  }function ns(t, n, e) {
    this.k = t, this.x = n, this.y = e;
  }function es(t) {
    return t.__zoom || ym;
  }function rs() {
    t.event.stopImmediatePropagation();
  }function is() {
    return !t.event.button;
  }function os() {
    var t,
        n,
        e = this;return e instanceof SVGElement ? (t = (e = e.ownerSVGElement || e).width.baseVal.value, n = e.height.baseVal.value) : (t = e.clientWidth, n = e.clientHeight), [[0, 0], [t, n]];
  }function us() {
    return this.__zoom || ym;
  }function as() {
    return -t.event.deltaY * (t.event.deltaMode ? 120 : 1) / 500;
  }function cs() {
    return "ontouchstart" in this;
  }var ss = function (t, n) {
    return t < n ? -1 : t > n ? 1 : t >= n ? 0 : NaN;
  },
      fs = function (t) {
    return 1 === t.length && (t = n(t)), { left: function (n, e, r, i) {
        for (null == r && (r = 0), null == i && (i = n.length); r < i;) {
          var o = r + i >>> 1;t(n[o], e) < 0 ? r = o + 1 : i = o;
        }return r;
      }, right: function (n, e, r, i) {
        for (null == r && (r = 0), null == i && (i = n.length); r < i;) {
          var o = r + i >>> 1;t(n[o], e) > 0 ? i = o : r = o + 1;
        }return r;
      } };
  },
      ls = fs(ss),
      hs = ls.right,
      ps = ls.left,
      ds = function (t) {
    return null === t ? NaN : +t;
  },
      vs = function (t, n) {
    var e,
        r,
        i = t.length,
        o = 0,
        u = -1,
        a = 0,
        c = 0;if (null == n) for (; ++u < i;) isNaN(e = ds(t[u])) || (c += (r = e - a) * (e - (a += r / ++o)));else for (; ++u < i;) isNaN(e = ds(n(t[u], u, t))) || (c += (r = e - a) * (e - (a += r / ++o)));if (o > 1) return c / (o - 1);
  },
      _s = function (t, n) {
    var e = vs(t, n);return e ? Math.sqrt(e) : e;
  },
      ys = function (t, n) {
    var e,
        r,
        i,
        o = t.length,
        u = -1;if (null == n) {
      for (; ++u < o;) if (null != (e = t[u]) && e >= e) for (r = i = e; ++u < o;) null != (e = t[u]) && (r > e && (r = e), i < e && (i = e));
    } else for (; ++u < o;) if (null != (e = n(t[u], u, t)) && e >= e) for (r = i = e; ++u < o;) null != (e = n(t[u], u, t)) && (r > e && (r = e), i < e && (i = e));return [r, i];
  },
      gs = Array.prototype,
      ms = gs.slice,
      xs = gs.map,
      bs = function (t) {
    return function () {
      return t;
    };
  },
      ws = function (t) {
    return t;
  },
      Ms = function (t, n, e) {
    t = +t, n = +n, e = (i = arguments.length) < 2 ? (n = t, t = 0, 1) : i < 3 ? 1 : +e;for (var r = -1, i = 0 | Math.max(0, Math.ceil((n - t) / e)), o = new Array(i); ++r < i;) o[r] = t + r * e;return o;
  },
      Ts = Math.sqrt(50),
      ks = Math.sqrt(10),
      Ns = Math.sqrt(2),
      Ss = function (t, n, e) {
    var i,
        o,
        u,
        a = n < t,
        c = -1;if (a && (i = t, t = n, n = i), 0 === (u = r(t, n, e)) || !isFinite(u)) return [];if (u > 0) for (t = Math.ceil(t / u), n = Math.floor(n / u), o = new Array(i = Math.ceil(n - t + 1)); ++c < i;) o[c] = (t + c) * u;else for (t = Math.floor(t * u), n = Math.ceil(n * u), o = new Array(i = Math.ceil(t - n + 1)); ++c < i;) o[c] = (t - c) / u;return a && o.reverse(), o;
  },
      Es = function (t) {
    return Math.ceil(Math.log(t.length) / Math.LN2) + 1;
  },
      As = function (t, n, e) {
    if (null == e && (e = ds), r = t.length) {
      if ((n = +n) <= 0 || r < 2) return +e(t[0], 0, t);if (n >= 1) return +e(t[r - 1], r - 1, t);var r,
          i = (r - 1) * n,
          o = Math.floor(i),
          u = +e(t[o], o, t);return u + (+e(t[o + 1], o + 1, t) - u) * (i - o);
    }
  },
      Cs = function (t) {
    for (var n, e, r, i = t.length, o = -1, u = 0; ++o < i;) u += t[o].length;for (e = new Array(u); --i >= 0;) for (n = (r = t[i]).length; --n >= 0;) e[--u] = r[n];return e;
  },
      zs = function (t, n) {
    var e,
        r,
        i = t.length,
        o = -1;if (null == n) {
      for (; ++o < i;) if (null != (e = t[o]) && e >= e) for (r = e; ++o < i;) null != (e = t[o]) && r > e && (r = e);
    } else for (; ++o < i;) if (null != (e = n(t[o], o, t)) && e >= e) for (r = e; ++o < i;) null != (e = n(t[o], o, t)) && r > e && (r = e);return r;
  },
      Ps = function (t) {
    if (!(i = t.length)) return [];for (var n = -1, e = zs(t, o), r = new Array(e); ++n < e;) for (var i, u = -1, a = r[n] = new Array(i); ++u < i;) a[u] = t[u][n];return r;
  },
      Rs = Array.prototype.slice,
      Ls = function (t) {
    return t;
  },
      qs = 1,
      Us = 2,
      Ds = 3,
      Os = 4,
      Fs = 1e-6,
      Is = { value: function () {} };p.prototype = h.prototype = { constructor: p, on: function (t, n) {
      var e,
          r = this._,
          i = d(t + "", r),
          o = -1,
          u = i.length;{
        if (!(arguments.length < 2)) {
          if (null != n && "function" != typeof n) throw new Error("invalid callback: " + n);for (; ++o < u;) if (e = (t = i[o]).type) r[e] = _(r[e], t.name, n);else if (null == n) for (e in r) r[e] = _(r[e], t.name, null);return this;
        }for (; ++o < u;) if ((e = (t = i[o]).type) && (e = v(r[e], t.name))) return e;
      }
    }, copy: function () {
      var t = {},
          n = this._;for (var e in n) t[e] = n[e].slice();return new p(t);
    }, call: function (t, n) {
      if ((e = arguments.length - 2) > 0) for (var e, r, i = new Array(e), o = 0; o < e; ++o) i[o] = arguments[o + 2];if (!this._.hasOwnProperty(t)) throw new Error("unknown type: " + t);for (o = 0, e = (r = this._[t]).length; o < e; ++o) r[o].value.apply(n, i);
    }, apply: function (t, n, e) {
      if (!this._.hasOwnProperty(t)) throw new Error("unknown type: " + t);for (var r = this._[t], i = 0, o = r.length; i < o; ++i) r[i].value.apply(n, e);
    } };var Ys = "http://www.w3.org/1999/xhtml",
      Bs = { svg: "http://www.w3.org/2000/svg", xhtml: Ys, xlink: "http://www.w3.org/1999/xlink", xml: "http://www.w3.org/XML/1998/namespace", xmlns: "http://www.w3.org/2000/xmlns/" },
      js = function (t) {
    var n = t += "",
        e = n.indexOf(":");return e >= 0 && "xmlns" !== (n = t.slice(0, e)) && (t = t.slice(e + 1)), Bs.hasOwnProperty(n) ? { space: Bs[n], local: t } : t;
  },
      Hs = function (t) {
    var n = js(t);return (n.local ? g : y)(n);
  },
      Xs = 0;x.prototype = m.prototype = { constructor: x, get: function (t) {
      for (var n = this._; !(n in t);) if (!(t = t.parentNode)) return;return t[n];
    }, set: function (t, n) {
      return t[this._] = n;
    }, remove: function (t) {
      return this._ in t && delete t[this._];
    }, toString: function () {
      return this._;
    } };var $s = function (t) {
    return function () {
      return this.matches(t);
    };
  };if ("undefined" != typeof document) {
    var Vs = document.documentElement;if (!Vs.matches) {
      var Ws = Vs.webkitMatchesSelector || Vs.msMatchesSelector || Vs.mozMatchesSelector || Vs.oMatchesSelector;$s = function (t) {
        return function () {
          return Ws.call(this, t);
        };
      };
    }
  }var Zs = $s,
      Gs = {};t.event = null, "undefined" != typeof document && ("onmouseenter" in document.documentElement || (Gs = { mouseenter: "mouseover", mouseleave: "mouseout" }));var Js = function () {
    for (var n, e = t.event; n = e.sourceEvent;) e = n;return e;
  },
      Qs = function (t, n) {
    var e = t.ownerSVGElement || t;if (e.createSVGPoint) {
      var r = e.createSVGPoint();return r.x = n.clientX, r.y = n.clientY, r = r.matrixTransform(t.getScreenCTM().inverse()), [r.x, r.y];
    }var i = t.getBoundingClientRect();return [n.clientX - i.left - t.clientLeft, n.clientY - i.top - t.clientTop];
  },
      Ks = function (t) {
    var n = Js();return n.changedTouches && (n = n.changedTouches[0]), Qs(t, n);
  },
      tf = function (t) {
    return null == t ? S : function () {
      return this.querySelector(t);
    };
  },
      nf = function (t) {
    return null == t ? E : function () {
      return this.querySelectorAll(t);
    };
  },
      ef = function (t) {
    return new Array(t.length);
  };A.prototype = { constructor: A, appendChild: function (t) {
      return this._parent.insertBefore(t, this._next);
    }, insertBefore: function (t, n) {
      return this._parent.insertBefore(t, n);
    }, querySelector: function (t) {
      return this._parent.querySelector(t);
    }, querySelectorAll: function (t) {
      return this._parent.querySelectorAll(t);
    } };var rf = function (t) {
    return function () {
      return t;
    };
  },
      of = "$",
      uf = function (t) {
    return t.ownerDocument && t.ownerDocument.defaultView || t.document && t || t.defaultView;
  };W.prototype = { add: function (t) {
      this._names.indexOf(t) < 0 && (this._names.push(t), this._node.setAttribute("class", this._names.join(" ")));
    }, remove: function (t) {
      var n = this._names.indexOf(t);n >= 0 && (this._names.splice(n, 1), this._node.setAttribute("class", this._names.join(" ")));
    }, contains: function (t) {
      return this._names.indexOf(t) >= 0;
    } };var af = [null];pt.prototype = dt.prototype = { constructor: pt, select: function (t) {
      "function" != typeof t && (t = tf(t));for (var n = this._groups, e = n.length, r = new Array(e), i = 0; i < e; ++i) for (var o, u, a = n[i], c = a.length, s = r[i] = new Array(c), f = 0; f < c; ++f) (o = a[f]) && (u = t.call(o, o.__data__, f, a)) && ("__data__" in o && (u.__data__ = o.__data__), s[f] = u);return new pt(r, this._parents);
    }, selectAll: function (t) {
      "function" != typeof t && (t = nf(t));for (var n = this._groups, e = n.length, r = [], i = [], o = 0; o < e; ++o) for (var u, a = n[o], c = a.length, s = 0; s < c; ++s) (u = a[s]) && (r.push(t.call(u, u.__data__, s, a)), i.push(u));return new pt(r, i);
    }, filter: function (t) {
      "function" != typeof t && (t = Zs(t));for (var n = this._groups, e = n.length, r = new Array(e), i = 0; i < e; ++i) for (var o, u = n[i], a = u.length, c = r[i] = [], s = 0; s < a; ++s) (o = u[s]) && t.call(o, o.__data__, s, u) && c.push(o);return new pt(r, this._parents);
    }, data: function (t, n) {
      if (!t) return p = new Array(this.size()), s = -1, this.each(function (t) {
        p[++s] = t;
      }), p;var e = n ? z : C,
          r = this._parents,
          i = this._groups;"function" != typeof t && (t = rf(t));for (var o = i.length, u = new Array(o), a = new Array(o), c = new Array(o), s = 0; s < o; ++s) {
        var f = r[s],
            l = i[s],
            h = l.length,
            p = t.call(f, f && f.__data__, s, r),
            d = p.length,
            v = a[s] = new Array(d),
            _ = u[s] = new Array(d);e(f, l, v, _, c[s] = new Array(h), p, n);for (var y, g, m = 0, x = 0; m < d; ++m) if (y = v[m]) {
          for (m >= x && (x = m + 1); !(g = _[x]) && ++x < d;);y._next = g || null;
        }
      }return u = new pt(u, r), u._enter = a, u._exit = c, u;
    }, enter: function () {
      return new pt(this._enter || this._groups.map(ef), this._parents);
    }, exit: function () {
      return new pt(this._exit || this._groups.map(ef), this._parents);
    }, merge: function (t) {
      for (var n = this._groups, e = t._groups, r = n.length, i = e.length, o = Math.min(r, i), u = new Array(r), a = 0; a < o; ++a) for (var c, s = n[a], f = e[a], l = s.length, h = u[a] = new Array(l), p = 0; p < l; ++p) (c = s[p] || f[p]) && (h[p] = c);for (; a < r; ++a) u[a] = n[a];return new pt(u, this._parents);
    }, order: function () {
      for (var t = this._groups, n = -1, e = t.length; ++n < e;) for (var r, i = t[n], o = i.length - 1, u = i[o]; --o >= 0;) (r = i[o]) && (u && u !== r.nextSibling && u.parentNode.insertBefore(r, u), u = r);return this;
    }, sort: function (t) {
      t || (t = P);for (var n = this._groups, e = n.length, r = new Array(e), i = 0; i < e; ++i) {
        for (var o, u = n[i], a = u.length, c = r[i] = new Array(a), s = 0; s < a; ++s) (o = u[s]) && (c[s] = o);c.sort(function (n, e) {
          return n && e ? t(n.__data__, e.__data__) : !n - !e;
        });
      }return new pt(r, this._parents).order();
    }, call: function () {
      var t = arguments[0];return arguments[0] = this, t.apply(null, arguments), this;
    }, nodes: function () {
      var t = new Array(this.size()),
          n = -1;return this.each(function () {
        t[++n] = this;
      }), t;
    }, node: function () {
      for (var t = this._groups, n = 0, e = t.length; n < e; ++n) for (var r = t[n], i = 0, o = r.length; i < o; ++i) {
        var u = r[i];if (u) return u;
      }return null;
    }, size: function () {
      var t = 0;return this.each(function () {
        ++t;
      }), t;
    }, empty: function () {
      return !this.node();
    }, each: function (t) {
      for (var n = this._groups, e = 0, r = n.length; e < r; ++e) for (var i, o = n[e], u = 0, a = o.length; u < a; ++u) (i = o[u]) && t.call(i, i.__data__, u, o);return this;
    }, attr: function (t, n) {
      var e = js(t);if (arguments.length < 2) {
        var r = this.node();return e.local ? r.getAttributeNS(e.space, e.local) : r.getAttribute(e);
      }return this.each((null == n ? e.local ? L : R : "function" == typeof n ? e.local ? O : D : e.local ? U : q)(e, n));
    }, style: function (t, n, e) {
      return arguments.length > 1 ? this.each((null == n ? F : "function" == typeof n ? Y : I)(t, n, null == e ? "" : e)) : B(this.node(), t);
    }, property: function (t, n) {
      return arguments.length > 1 ? this.each((null == n ? j : "function" == typeof n ? X : H)(t, n)) : this.node()[t];
    }, classed: function (t, n) {
      var e = $(t + "");if (arguments.length < 2) {
        for (var r = V(this.node()), i = -1, o = e.length; ++i < o;) if (!r.contains(e[i])) return !1;return !0;
      }return this.each(("function" == typeof n ? K : n ? J : Q)(e, n));
    }, text: function (t) {
      return arguments.length ? this.each(null == t ? tt : ("function" == typeof t ? et : nt)(t)) : this.node().textContent;
    }, html: function (t) {
      return arguments.length ? this.each(null == t ? rt : ("function" == typeof t ? ot : it)(t)) : this.node().innerHTML;
    }, raise: function () {
      return this.each(ut);
    }, lower: function () {
      return this.each(at);
    }, append: function (t) {
      var n = "function" == typeof t ? t : Hs(t);return this.select(function () {
        return this.appendChild(n.apply(this, arguments));
      });
    }, insert: function (t, n) {
      var e = "function" == typeof t ? t : Hs(t),
          r = null == n ? ct : "function" == typeof n ? n : tf(n);return this.select(function () {
        return this.insertBefore(e.apply(this, arguments), r.apply(this, arguments) || null);
      });
    }, remove: function () {
      return this.each(st);
    }, datum: function (t) {
      return arguments.length ? this.property("__data__", t) : this.node().__data__;
    }, on: function (t, n, e) {
      var r,
          i,
          o = M(t + ""),
          u = o.length;{
        if (!(arguments.length < 2)) {
          for (a = n ? k : T, null == e && (e = !1), r = 0; r < u; ++r) this.each(a(o[r], n, e));return this;
        }var a = this.node().__on;if (a) for (var c, s = 0, f = a.length; s < f; ++s) for (r = 0, c = a[s]; r < u; ++r) if ((i = o[r]).type === c.type && i.name === c.name) return c.value;
      }
    }, dispatch: function (t, n) {
      return this.each(("function" == typeof n ? ht : lt)(t, n));
    } };var cf = function (t) {
    return "string" == typeof t ? new pt([[document.querySelector(t)]], [document.documentElement]) : new pt([[t]], af);
  },
      sf = function (t, n, e) {
    arguments.length < 3 && (e = n, n = Js().changedTouches);for (var r, i = 0, o = n ? n.length : 0; i < o; ++i) if ((r = n[i]).identifier === e) return Qs(t, r);return null;
  },
      ff = function () {
    t.event.preventDefault(), t.event.stopImmediatePropagation();
  },
      lf = function (t) {
    var n = t.document.documentElement,
        e = cf(t).on("dragstart.drag", ff, !0);"onselectstart" in n ? e.on("selectstart.drag", ff, !0) : (n.__noselect = n.style.MozUserSelect, n.style.MozUserSelect = "none");
  },
      hf = function (t) {
    return function () {
      return t;
    };
  };yt.prototype.on = function () {
    var t = this._.on.apply(this._, arguments);return t === this._ ? this : t;
  };var pf = function (t, n, e) {
    t.prototype = n.prototype = e, e.constructor = t;
  },
      df = "\\s*([+-]?\\d+)\\s*",
      vf = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
      _f = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
      yf = /^#([0-9a-f]{3})$/,
      gf = /^#([0-9a-f]{6})$/,
      mf = new RegExp("^rgb\\(" + [df, df, df] + "\\)$"),
      xf = new RegExp("^rgb\\(" + [_f, _f, _f] + "\\)$"),
      bf = new RegExp("^rgba\\(" + [df, df, df, vf] + "\\)$"),
      wf = new RegExp("^rgba\\(" + [_f, _f, _f, vf] + "\\)$"),
      Mf = new RegExp("^hsl\\(" + [vf, _f, _f] + "\\)$"),
      Tf = new RegExp("^hsla\\(" + [vf, _f, _f, vf] + "\\)$"),
      kf = { aliceblue: 15792383, antiquewhite: 16444375, aqua: 65535, aquamarine: 8388564, azure: 15794175, beige: 16119260, bisque: 16770244, black: 0, blanchedalmond: 16772045, blue: 255, blueviolet: 9055202, brown: 10824234, burlywood: 14596231, cadetblue: 6266528, chartreuse: 8388352, chocolate: 13789470, coral: 16744272, cornflowerblue: 6591981, cornsilk: 16775388, crimson: 14423100, cyan: 65535, darkblue: 139, darkcyan: 35723, darkgoldenrod: 12092939, darkgray: 11119017, darkgreen: 25600, darkgrey: 11119017, darkkhaki: 12433259, darkmagenta: 9109643, darkolivegreen: 5597999, darkorange: 16747520, darkorchid: 10040012, darkred: 9109504, darksalmon: 15308410, darkseagreen: 9419919, darkslateblue: 4734347, darkslategray: 3100495, darkslategrey: 3100495, darkturquoise: 52945, darkviolet: 9699539, deeppink: 16716947, deepskyblue: 49151, dimgray: 6908265, dimgrey: 6908265, dodgerblue: 2003199, firebrick: 11674146, floralwhite: 16775920, forestgreen: 2263842, fuchsia: 16711935, gainsboro: 14474460, ghostwhite: 16316671, gold: 16766720, goldenrod: 14329120, gray: 8421504, green: 32768, greenyellow: 11403055, grey: 8421504, honeydew: 15794160, hotpink: 16738740, indianred: 13458524, indigo: 4915330, ivory: 16777200, khaki: 15787660, lavender: 15132410, lavenderblush: 16773365, lawngreen: 8190976, lemonchiffon: 16775885, lightblue: 11393254, lightcoral: 15761536, lightcyan: 14745599, lightgoldenrodyellow: 16448210, lightgray: 13882323, lightgreen: 9498256, lightgrey: 13882323, lightpink: 16758465, lightsalmon: 16752762, lightseagreen: 2142890, lightskyblue: 8900346, lightslategray: 7833753, lightslategrey: 7833753, lightsteelblue: 11584734, lightyellow: 16777184, lime: 65280, limegreen: 3329330, linen: 16445670, magenta: 16711935, maroon: 8388608, mediumaquamarine: 6737322, mediumblue: 205, mediumorchid: 12211667, mediumpurple: 9662683, mediumseagreen: 3978097, mediumslateblue: 8087790, mediumspringgreen: 64154, mediumturquoise: 4772300, mediumvioletred: 13047173, midnightblue: 1644912, mintcream: 16121850, mistyrose: 16770273, moccasin: 16770229, navajowhite: 16768685, navy: 128, oldlace: 16643558, olive: 8421376, olivedrab: 7048739, orange: 16753920, orangered: 16729344, orchid: 14315734, palegoldenrod: 15657130, palegreen: 10025880, paleturquoise: 11529966, palevioletred: 14381203, papayawhip: 16773077, peachpuff: 16767673, peru: 13468991, pink: 16761035, plum: 14524637, powderblue: 11591910, purple: 8388736, rebeccapurple: 6697881, red: 16711680, rosybrown: 12357519, royalblue: 4286945, saddlebrown: 9127187, salmon: 16416882, sandybrown: 16032864, seagreen: 3050327, seashell: 16774638, sienna: 10506797, silver: 12632256, skyblue: 8900331, slateblue: 6970061, slategray: 7372944, slategrey: 7372944, snow: 16775930, springgreen: 65407, steelblue: 4620980, tan: 13808780, teal: 32896, thistle: 14204888, tomato: 16737095, turquoise: 4251856, violet: 15631086, wheat: 16113331, white: 16777215, whitesmoke: 16119285, yellow: 16776960, yellowgreen: 10145074 };pf(Mt, Tt, { displayable: function () {
      return this.rgb().displayable();
    }, toString: function () {
      return this.rgb() + "";
    } }), pf(At, Et, wt(Mt, { brighter: function (t) {
      return t = null == t ? 1 / .7 : Math.pow(1 / .7, t), new At(this.r * t, this.g * t, this.b * t, this.opacity);
    }, darker: function (t) {
      return t = null == t ? .7 : Math.pow(.7, t), new At(this.r * t, this.g * t, this.b * t, this.opacity);
    }, rgb: function () {
      return this;
    }, displayable: function () {
      return 0 <= this.r && this.r <= 255 && 0 <= this.g && this.g <= 255 && 0 <= this.b && this.b <= 255 && 0 <= this.opacity && this.opacity <= 1;
    }, toString: function () {
      var t = this.opacity;return (1 === (t = isNaN(t) ? 1 : Math.max(0, Math.min(1, t))) ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (1 === t ? ")" : ", " + t + ")");
    } })), pf(Rt, Pt, wt(Mt, { brighter: function (t) {
      return t = null == t ? 1 / .7 : Math.pow(1 / .7, t), new Rt(this.h, this.s, this.l * t, this.opacity);
    }, darker: function (t) {
      return t = null == t ? .7 : Math.pow(.7, t), new Rt(this.h, this.s, this.l * t, this.opacity);
    }, rgb: function () {
      var t = this.h % 360 + 360 * (this.h < 0),
          n = isNaN(t) || isNaN(this.s) ? 0 : this.s,
          e = this.l,
          r = e + (e < .5 ? e : 1 - e) * n,
          i = 2 * e - r;return new At(Lt(t >= 240 ? t - 240 : t + 120, i, r), Lt(t, i, r), Lt(t < 120 ? t + 240 : t - 120, i, r), this.opacity);
    }, displayable: function () {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
    } }));var Nf = Math.PI / 180,
      Sf = 180 / Math.PI,
      Ef = .95047,
      Af = 1,
      Cf = 1.08883,
      zf = 4 / 29,
      Pf = 6 / 29,
      Rf = 3 * Pf * Pf,
      Lf = Pf * Pf * Pf;pf(Dt, Ut, wt(Mt, { brighter: function (t) {
      return new Dt(this.l + 18 * (null == t ? 1 : t), this.a, this.b, this.opacity);
    }, darker: function (t) {
      return new Dt(this.l - 18 * (null == t ? 1 : t), this.a, this.b, this.opacity);
    }, rgb: function () {
      var t = (this.l + 16) / 116,
          n = isNaN(this.a) ? t : t + this.a / 500,
          e = isNaN(this.b) ? t : t - this.b / 200;return t = Af * Ft(t), n = Ef * Ft(n), e = Cf * Ft(e), new At(It(3.2404542 * n - 1.5371385 * t - .4985314 * e), It(-.969266 * n + 1.8760108 * t + .041556 * e), It(.0556434 * n - .2040259 * t + 1.0572252 * e), this.opacity);
    } })), pf(Ht, jt, wt(Mt, { brighter: function (t) {
      return new Ht(this.h, this.c, this.l + 18 * (null == t ? 1 : t), this.opacity);
    }, darker: function (t) {
      return new Ht(this.h, this.c, this.l - 18 * (null == t ? 1 : t), this.opacity);
    }, rgb: function () {
      return qt(this).rgb();
    } }));var qf = -.14861,
      Uf = 1.78277,
      Df = -.29227,
      Of = -.90649,
      Ff = 1.97294,
      If = Ff * Of,
      Yf = Ff * Uf,
      Bf = Uf * Df - Of * qf;pf(Vt, $t, wt(Mt, { brighter: function (t) {
      return t = null == t ? 1 / .7 : Math.pow(1 / .7, t), new Vt(this.h, this.s, this.l * t, this.opacity);
    }, darker: function (t) {
      return t = null == t ? .7 : Math.pow(.7, t), new Vt(this.h, this.s, this.l * t, this.opacity);
    }, rgb: function () {
      var t = isNaN(this.h) ? 0 : (this.h + 120) * Nf,
          n = +this.l,
          e = isNaN(this.s) ? 0 : this.s * n * (1 - n),
          r = Math.cos(t),
          i = Math.sin(t);return new At(255 * (n + e * (qf * r + Uf * i)), 255 * (n + e * (Df * r + Of * i)), 255 * (n + e * (Ff * r)), this.opacity);
    } }));var jf,
      Hf,
      Xf,
      $f,
      Vf,
      Wf,
      Zf = function (t) {
    var n = t.length - 1;return function (e) {
      var r = e <= 0 ? e = 0 : e >= 1 ? (e = 1, n - 1) : Math.floor(e * n),
          i = t[r],
          o = t[r + 1],
          u = r > 0 ? t[r - 1] : 2 * i - o,
          a = r < n - 1 ? t[r + 2] : 2 * o - i;return Wt((e - r / n) * n, u, i, o, a);
    };
  },
      Gf = function (t) {
    var n = t.length;return function (e) {
      var r = Math.floor(((e %= 1) < 0 ? ++e : e) * n),
          i = t[(r + n - 1) % n],
          o = t[r % n],
          u = t[(r + 1) % n],
          a = t[(r + 2) % n];return Wt((e - r / n) * n, i, o, u, a);
    };
  },
      Jf = function (t) {
    return function () {
      return t;
    };
  },
      Qf = function t(n) {
    function e(t, n) {
      var e = r((t = Et(t)).r, (n = Et(n)).r),
          i = r(t.g, n.g),
          o = r(t.b, n.b),
          u = Kt(t.opacity, n.opacity);return function (n) {
        return t.r = e(n), t.g = i(n), t.b = o(n), t.opacity = u(n), t + "";
      };
    }var r = Qt(n);return e.gamma = t, e;
  }(1),
      Kf = tn(Zf),
      tl = tn(Gf),
      nl = function (t, n) {
    var e,
        r = n ? n.length : 0,
        i = t ? Math.min(r, t.length) : 0,
        o = new Array(r),
        u = new Array(r);for (e = 0; e < i; ++e) o[e] = cl(t[e], n[e]);for (; e < r; ++e) u[e] = n[e];return function (t) {
      for (e = 0; e < i; ++e) u[e] = o[e](t);return u;
    };
  },
      el = function (t, n) {
    var e = new Date();return t = +t, n -= t, function (r) {
      return e.setTime(t + n * r), e;
    };
  },
      rl = function (t, n) {
    return t = +t, n -= t, function (e) {
      return t + n * e;
    };
  },
      il = function (t, n) {
    var e,
        r = {},
        i = {};null !== t && "object" == typeof t || (t = {}), null !== n && "object" == typeof n || (n = {});for (e in n) e in t ? r[e] = cl(t[e], n[e]) : i[e] = n[e];return function (t) {
      for (e in r) i[e] = r[e](t);return i;
    };
  },
      ol = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
      ul = new RegExp(ol.source, "g"),
      al = function (t, n) {
    var e,
        r,
        i,
        o = ol.lastIndex = ul.lastIndex = 0,
        u = -1,
        a = [],
        c = [];for (t += "", n += ""; (e = ol.exec(t)) && (r = ul.exec(n));) (i = r.index) > o && (i = n.slice(o, i), a[u] ? a[u] += i : a[++u] = i), (e = e[0]) === (r = r[0]) ? a[u] ? a[u] += r : a[++u] = r : (a[++u] = null, c.push({ i: u, x: rl(e, r) })), o = ul.lastIndex;return o < n.length && (i = n.slice(o), a[u] ? a[u] += i : a[++u] = i), a.length < 2 ? c[0] ? en(c[0].x) : nn(n) : (n = c.length, function (t) {
      for (var e, r = 0; r < n; ++r) a[(e = c[r]).i] = e.x(t);return a.join("");
    });
  },
      cl = function (t, n) {
    var e,
        r = typeof n;return null == n || "boolean" === r ? Jf(n) : ("number" === r ? rl : "string" === r ? (e = Tt(n)) ? (n = e, Qf) : al : n instanceof Tt ? Qf : n instanceof Date ? el : Array.isArray(n) ? nl : "function" != typeof n.valueOf && "function" != typeof n.toString || isNaN(n) ? il : rl)(t, n);
  },
      sl = function (t, n) {
    return t = +t, n -= t, function (e) {
      return Math.round(t + n * e);
    };
  },
      fl = 180 / Math.PI,
      ll = { translateX: 0, translateY: 0, rotate: 0, skewX: 0, scaleX: 1, scaleY: 1 },
      hl = function (t, n, e, r, i, o) {
    var u, a, c;return (u = Math.sqrt(t * t + n * n)) && (t /= u, n /= u), (c = t * e + n * r) && (e -= t * c, r -= n * c), (a = Math.sqrt(e * e + r * r)) && (e /= a, r /= a, c /= a), t * r < n * e && (t = -t, n = -n, c = -c, u = -u), { translateX: i, translateY: o, rotate: Math.atan2(n, t) * fl, skewX: Math.atan(c) * fl, scaleX: u, scaleY: a };
  },
      pl = rn(function (t) {
    return "none" === t ? ll : (jf || (jf = document.createElement("DIV"), Hf = document.documentElement, Xf = document.defaultView), jf.style.transform = t, t = Xf.getComputedStyle(Hf.appendChild(jf), null).getPropertyValue("transform"), Hf.removeChild(jf), t = t.slice(7, -1).split(","), hl(+t[0], +t[1], +t[2], +t[3], +t[4], +t[5]));
  }, "px, ", "px)", "deg)"),
      dl = rn(function (t) {
    return null == t ? ll : ($f || ($f = document.createElementNS("http://www.w3.org/2000/svg", "g")), $f.setAttribute("transform", t), (t = $f.transform.baseVal.consolidate()) ? (t = t.matrix, hl(t.a, t.b, t.c, t.d, t.e, t.f)) : ll);
  }, ", ", ")", ")"),
      vl = Math.SQRT2,
      _l = function (t, n) {
    var e,
        r,
        i = t[0],
        o = t[1],
        u = t[2],
        a = n[0],
        c = n[1],
        s = n[2],
        f = a - i,
        l = c - o,
        h = f * f + l * l;if (h < 1e-12) r = Math.log(s / u) / vl, e = function (t) {
      return [i + t * f, o + t * l, u * Math.exp(vl * t * r)];
    };else {
      var p = Math.sqrt(h),
          d = (s * s - u * u + 4 * h) / (2 * u * 2 * p),
          v = (s * s - u * u - 4 * h) / (2 * s * 2 * p),
          _ = Math.log(Math.sqrt(d * d + 1) - d),
          y = Math.log(Math.sqrt(v * v + 1) - v);r = (y - _) / vl, e = function (t) {
        var n = t * r,
            e = on(_),
            a = u / (2 * p) * (e * an(vl * n + _) - un(_));return [i + a * f, o + a * l, u * e / on(vl * n + _)];
      };
    }return e.duration = 1e3 * r, e;
  },
      yl = cn(Jt),
      gl = cn(Kt),
      ml = sn(Jt),
      xl = sn(Kt),
      bl = fn(Jt),
      wl = fn(Kt),
      Ml = 0,
      Tl = 0,
      kl = 0,
      Nl = 1e3,
      Sl = 0,
      El = 0,
      Al = 0,
      Cl = "object" == typeof performance && performance.now ? performance : Date,
      zl = "object" == typeof window && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (t) {
    setTimeout(t, 17);
  };pn.prototype = dn.prototype = { constructor: pn, restart: function (t, n, e) {
      if ("function" != typeof t) throw new TypeError("callback is not a function");e = (null == e ? ln() : +e) + (null == n ? 0 : +n), this._next || Wf === this || (Wf ? Wf._next = this : Vf = this, Wf = this), this._call = t, this._time = e, mn();
    }, stop: function () {
      this._call && (this._call = null, this._time = 1 / 0, mn());
    } };var Pl = function (t, n, e) {
    var r = new pn();return n = null == n ? 0 : +n, r.restart(function (e) {
      r.stop(), t(e + n);
    }, n, e), r;
  },
      Rl = h("start", "end", "interrupt"),
      Ll = [],
      ql = 0,
      Ul = 1,
      Dl = 2,
      Ol = 3,
      Fl = 4,
      Il = 5,
      Yl = 6,
      Bl = function (t, n, e, r, i, o) {
    var u = t.__transition;if (u) {
      if (e in u) return;
    } else t.__transition = {};Mn(t, e, { name: n, index: r, group: i, on: Rl, tween: Ll, time: o.time, delay: o.delay, duration: o.duration, ease: o.ease, timer: null, state: ql });
  },
      jl = function (t, n) {
    var e,
        r,
        i,
        o = t.__transition,
        u = !0;if (o) {
      n = null == n ? null : n + "";for (i in o) (e = o[i]).name === n ? (r = e.state > Dl && e.state < Il, e.state = Yl, e.timer.stop(), r && e.on.call("interrupt", t, t.__data__, e.index, e.group), delete o[i]) : u = !1;u && delete t.__transition;
    }
  },
      Hl = function (t, n) {
    var e;return ("number" == typeof n ? rl : n instanceof Tt ? Qf : (e = Tt(n)) ? (n = e, Qf) : al)(t, n);
  },
      Xl = dt.prototype.constructor,
      $l = 0,
      Vl = dt.prototype;Gn.prototype = Jn.prototype = { constructor: Gn, select: function (t) {
      var n = this._name,
          e = this._id;"function" != typeof t && (t = tf(t));for (var r = this._groups, i = r.length, o = new Array(i), u = 0; u < i; ++u) for (var a, c, s = r[u], f = s.length, l = o[u] = new Array(f), h = 0; h < f; ++h) (a = s[h]) && (c = t.call(a, a.__data__, h, s)) && ("__data__" in a && (c.__data__ = a.__data__), l[h] = c, Bl(l[h], n, e, h, l, wn(a, e)));return new Gn(o, this._parents, n, e);
    }, selectAll: function (t) {
      var n = this._name,
          e = this._id;"function" != typeof t && (t = nf(t));for (var r = this._groups, i = r.length, o = [], u = [], a = 0; a < i; ++a) for (var c, s = r[a], f = s.length, l = 0; l < f; ++l) if (c = s[l]) {
        for (var h, p = t.call(c, c.__data__, l, s), d = wn(c, e), v = 0, _ = p.length; v < _; ++v) (h = p[v]) && Bl(h, n, e, v, p, d);o.push(p), u.push(c);
      }return new Gn(o, u, n, e);
    }, filter: function (t) {
      "function" != typeof t && (t = Zs(t));for (var n = this._groups, e = n.length, r = new Array(e), i = 0; i < e; ++i) for (var o, u = n[i], a = u.length, c = r[i] = [], s = 0; s < a; ++s) (o = u[s]) && t.call(o, o.__data__, s, u) && c.push(o);return new Gn(r, this._parents, this._name, this._id);
    }, merge: function (t) {
      if (t._id !== this._id) throw new Error();for (var n = this._groups, e = t._groups, r = n.length, i = e.length, o = Math.min(r, i), u = new Array(r), a = 0; a < o; ++a) for (var c, s = n[a], f = e[a], l = s.length, h = u[a] = new Array(l), p = 0; p < l; ++p) (c = s[p] || f[p]) && (h[p] = c);for (; a < r; ++a) u[a] = n[a];return new Gn(u, this._parents, this._name, this._id);
    }, selection: function () {
      return new Xl(this._groups, this._parents);
    }, transition: function () {
      for (var t = this._name, n = this._id, e = Qn(), r = this._groups, i = r.length, o = 0; o < i; ++o) for (var u, a = r[o], c = a.length, s = 0; s < c; ++s) if (u = a[s]) {
        var f = wn(u, n);Bl(u, t, e, s, a, { time: f.time + f.delay + f.duration, delay: 0, duration: f.duration, ease: f.ease });
      }return new Gn(r, this._parents, t, e);
    }, call: Vl.call, nodes: Vl.nodes, node: Vl.node, size: Vl.size, empty: Vl.empty, each: Vl.each, on: function (t, n) {
      var e = this._id;return arguments.length < 2 ? wn(this.node(), e).on.on(t) : this.each(Yn(e, t, n));
    }, attr: function (t, n) {
      var e = js(t),
          r = "transform" === e ? dl : Hl;return this.attrTween(t, "function" == typeof n ? (e.local ? Pn : zn)(e, r, Nn(this, "attr." + t, n)) : null == n ? (e.local ? En : Sn)(e) : (e.local ? Cn : An)(e, r, n + ""));
    }, attrTween: function (t, n) {
      var e = "attr." + t;if (arguments.length < 2) return (e = this.tween(e)) && e._value;if (null == n) return this.tween(e, null);if ("function" != typeof n) throw new Error();var r = js(t);return this.tween(e, (r.local ? Rn : Ln)(r, n));
    }, style: function (t, n, e) {
      var r = "transform" == (t += "") ? pl : Hl;return null == n ? this.styleTween(t, jn(t, r)).on("end.style." + t, Hn(t)) : this.styleTween(t, "function" == typeof n ? $n(t, r, Nn(this, "style." + t, n)) : Xn(t, r, n + ""), e);
    }, styleTween: function (t, n, e) {
      var r = "style." + (t += "");if (arguments.length < 2) return (r = this.tween(r)) && r._value;if (null == n) return this.tween(r, null);if ("function" != typeof n) throw new Error();return this.tween(r, Vn(t, n, null == e ? "" : e));
    }, text: function (t) {
      return this.tween("text", "function" == typeof t ? Zn(Nn(this, "text", t)) : Wn(null == t ? "" : t + ""));
    }, remove: function () {
      return this.on("end.remove", Bn(this._id));
    }, tween: function (t, n) {
      var e = this._id;if (t += "", arguments.length < 2) {
        for (var r, i = wn(this.node(), e).tween, o = 0, u = i.length; o < u; ++o) if ((r = i[o]).name === t) return r.value;return null;
      }return this.each((null == n ? Tn : kn)(e, t, n));
    }, delay: function (t) {
      var n = this._id;return arguments.length ? this.each(("function" == typeof t ? qn : Un)(n, t)) : wn(this.node(), n).delay;
    }, duration: function (t) {
      var n = this._id;return arguments.length ? this.each(("function" == typeof t ? Dn : On)(n, t)) : wn(this.node(), n).duration;
    }, ease: function (t) {
      var n = this._id;return arguments.length ? this.each(Fn(n, t)) : wn(this.node(), n).ease;
    } };var Wl = function t(n) {
    function e(t) {
      return Math.pow(t, n);
    }return n = +n, e.exponent = t, e;
  }(3),
      Zl = function t(n) {
    function e(t) {
      return 1 - Math.pow(1 - t, n);
    }return n = +n, e.exponent = t, e;
  }(3),
      Gl = function t(n) {
    function e(t) {
      return ((t *= 2) <= 1 ? Math.pow(t, n) : 2 - Math.pow(2 - t, n)) / 2;
    }return n = +n, e.exponent = t, e;
  }(3),
      Jl = Math.PI,
      Ql = Jl / 2,
      Kl = 4 / 11,
      th = 6 / 11,
      nh = 8 / 11,
      eh = .75,
      rh = 9 / 11,
      ih = 10 / 11,
      oh = .9375,
      uh = 21 / 22,
      ah = 63 / 64,
      ch = 1 / Kl / Kl,
      sh = function t(n) {
    function e(t) {
      return t * t * ((n + 1) * t - n);
    }return n = +n, e.overshoot = t, e;
  }(1.70158),
      fh = function t(n) {
    function e(t) {
      return --t * t * ((n + 1) * t + n) + 1;
    }return n = +n, e.overshoot = t, e;
  }(1.70158),
      lh = function t(n) {
    function e(t) {
      return ((t *= 2) < 1 ? t * t * ((n + 1) * t - n) : (t -= 2) * t * ((n + 1) * t + n) + 2) / 2;
    }return n = +n, e.overshoot = t, e;
  }(1.70158),
      hh = 2 * Math.PI,
      ph = function t(n, e) {
    function r(t) {
      return n * Math.pow(2, 10 * --t) * Math.sin((i - t) / e);
    }var i = Math.asin(1 / (n = Math.max(1, n))) * (e /= hh);return r.amplitude = function (n) {
      return t(n, e * hh);
    }, r.period = function (e) {
      return t(n, e);
    }, r;
  }(1, .3),
      dh = function t(n, e) {
    function r(t) {
      return 1 - n * Math.pow(2, -10 * (t = +t)) * Math.sin((t + i) / e);
    }var i = Math.asin(1 / (n = Math.max(1, n))) * (e /= hh);return r.amplitude = function (n) {
      return t(n, e * hh);
    }, r.period = function (e) {
      return t(n, e);
    }, r;
  }(1, .3),
      vh = function t(n, e) {
    function r(t) {
      return ((t = 2 * t - 1) < 0 ? n * Math.pow(2, 10 * t) * Math.sin((i - t) / e) : 2 - n * Math.pow(2, -10 * t) * Math.sin((i + t) / e)) / 2;
    }var i = Math.asin(1 / (n = Math.max(1, n))) * (e /= hh);return r.amplitude = function (n) {
      return t(n, e * hh);
    }, r.period = function (e) {
      return t(n, e);
    }, r;
  }(1, .3),
      _h = { time: null, delay: 0, duration: 250, ease: te };dt.prototype.interrupt = function (t) {
    return this.each(function () {
      jl(this, t);
    });
  }, dt.prototype.transition = function (t) {
    var n, e;t instanceof Gn ? (n = t._id, t = t._name) : (n = Qn(), (e = _h).time = ln(), t = null == t ? null : t + "");for (var r = this._groups, i = r.length, o = 0; o < i; ++o) for (var u, a = r[o], c = a.length, s = 0; s < c; ++s) (u = a[s]) && Bl(u, t, n, s, a, e || oe(u, n));return new Gn(r, this._parents, t, n);
  };var yh = [null],
      gh = function (t) {
    return function () {
      return t;
    };
  },
      mh = function (t, n, e) {
    this.target = t, this.type = n, this.selection = e;
  },
      xh = function () {
    t.event.preventDefault(), t.event.stopImmediatePropagation();
  },
      bh = { name: "drag" },
      wh = { name: "space" },
      Mh = { name: "handle" },
      Th = { name: "center" },
      kh = { name: "x", handles: ["e", "w"].map(ae), input: function (t, n) {
      return t && [[t[0], n[0][1]], [t[1], n[1][1]]];
    }, output: function (t) {
      return t && [t[0][0], t[1][0]];
    } },
      Nh = { name: "y", handles: ["n", "s"].map(ae), input: function (t, n) {
      return t && [[n[0][0], t[0]], [n[1][0], t[1]]];
    }, output: function (t) {
      return t && [t[0][1], t[1][1]];
    } },
      Sh = { name: "xy", handles: ["n", "e", "s", "w", "nw", "ne", "se", "sw"].map(ae), input: function (t) {
      return t;
    }, output: function (t) {
      return t;
    } },
      Eh = { overlay: "crosshair", selection: "move", n: "ns-resize", e: "ew-resize", s: "ns-resize", w: "ew-resize", nw: "nwse-resize", ne: "nesw-resize", se: "nwse-resize", sw: "nesw-resize" },
      Ah = { e: "w", w: "e", nw: "ne", ne: "nw", se: "sw", sw: "se" },
      Ch = { n: "s", s: "n", nw: "sw", ne: "se", se: "ne", sw: "nw" },
      zh = { overlay: 1, selection: 1, n: null, e: 1, s: null, w: -1, nw: -1, ne: 1, se: 1, sw: -1 },
      Ph = { overlay: 1, selection: 1, n: -1, e: null, s: 1, w: null, nw: -1, ne: -1, se: 1, sw: 1 },
      Rh = Math.cos,
      Lh = Math.sin,
      qh = Math.PI,
      Uh = qh / 2,
      Dh = 2 * qh,
      Oh = Math.max,
      Fh = Array.prototype.slice,
      Ih = function (t) {
    return function () {
      return t;
    };
  },
      Yh = Math.PI,
      Bh = 2 * Yh,
      jh = Bh - 1e-6;de.prototype = ve.prototype = { constructor: de, moveTo: function (t, n) {
      this._ += "M" + (this._x0 = this._x1 = +t) + "," + (this._y0 = this._y1 = +n);
    }, closePath: function () {
      null !== this._x1 && (this._x1 = this._x0, this._y1 = this._y0, this._ += "Z");
    }, lineTo: function (t, n) {
      this._ += "L" + (this._x1 = +t) + "," + (this._y1 = +n);
    }, quadraticCurveTo: function (t, n, e, r) {
      this._ += "Q" + +t + "," + +n + "," + (this._x1 = +e) + "," + (this._y1 = +r);
    }, bezierCurveTo: function (t, n, e, r, i, o) {
      this._ += "C" + +t + "," + +n + "," + +e + "," + +r + "," + (this._x1 = +i) + "," + (this._y1 = +o);
    }, arcTo: function (t, n, e, r, i) {
      t = +t, n = +n, e = +e, r = +r, i = +i;var o = this._x1,
          u = this._y1,
          a = e - t,
          c = r - n,
          s = o - t,
          f = u - n,
          l = s * s + f * f;if (i < 0) throw new Error("negative radius: " + i);if (null === this._x1) this._ += "M" + (this._x1 = t) + "," + (this._y1 = n);else if (l > 1e-6) {
        if (Math.abs(f * a - c * s) > 1e-6 && i) {
          var h = e - o,
              p = r - u,
              d = a * a + c * c,
              v = h * h + p * p,
              _ = Math.sqrt(d),
              y = Math.sqrt(l),
              g = i * Math.tan((Yh - Math.acos((d + l - v) / (2 * _ * y))) / 2),
              m = g / y,
              x = g / _;Math.abs(m - 1) > 1e-6 && (this._ += "L" + (t + m * s) + "," + (n + m * f)), this._ += "A" + i + "," + i + ",0,0," + +(f * h > s * p) + "," + (this._x1 = t + x * a) + "," + (this._y1 = n + x * c);
        } else this._ += "L" + (this._x1 = t) + "," + (this._y1 = n);
      } else ;
    }, arc: function (t, n, e, r, i, o) {
      t = +t, n = +n;var u = (e = +e) * Math.cos(r),
          a = e * Math.sin(r),
          c = t + u,
          s = n + a,
          f = 1 ^ o,
          l = o ? r - i : i - r;if (e < 0) throw new Error("negative radius: " + e);null === this._x1 ? this._ += "M" + c + "," + s : (Math.abs(this._x1 - c) > 1e-6 || Math.abs(this._y1 - s) > 1e-6) && (this._ += "L" + c + "," + s), e && (l < 0 && (l = l % Bh + Bh), l > jh ? this._ += "A" + e + "," + e + ",0,1," + f + "," + (t - u) + "," + (n - a) + "A" + e + "," + e + ",0,1," + f + "," + (this._x1 = c) + "," + (this._y1 = s) : l > 1e-6 && (this._ += "A" + e + "," + e + ",0," + +(l >= Yh) + "," + f + "," + (this._x1 = t + e * Math.cos(i)) + "," + (this._y1 = n + e * Math.sin(i))));
    }, rect: function (t, n, e, r) {
      this._ += "M" + (this._x0 = this._x1 = +t) + "," + (this._y0 = this._y1 = +n) + "h" + +e + "v" + +r + "h" + -e + "Z";
    }, toString: function () {
      return this._;
    } };be.prototype = we.prototype = { constructor: be, has: function (t) {
      return "$" + t in this;
    }, get: function (t) {
      return this["$" + t];
    }, set: function (t, n) {
      return this["$" + t] = n, this;
    }, remove: function (t) {
      var n = "$" + t;return n in this && delete this[n];
    }, clear: function () {
      for (var t in this) "$" === t[0] && delete this[t];
    }, keys: function () {
      var t = [];for (var n in this) "$" === n[0] && t.push(n.slice(1));return t;
    }, values: function () {
      var t = [];for (var n in this) "$" === n[0] && t.push(this[n]);return t;
    }, entries: function () {
      var t = [];for (var n in this) "$" === n[0] && t.push({ key: n.slice(1), value: this[n] });return t;
    }, size: function () {
      var t = 0;for (var n in this) "$" === n[0] && ++t;return t;
    }, empty: function () {
      for (var t in this) if ("$" === t[0]) return !1;return !0;
    }, each: function (t) {
      for (var n in this) "$" === n[0] && t(this[n], n.slice(1), this);
    } };var Hh = we.prototype;Se.prototype = Ee.prototype = { constructor: Se, has: Hh.has, add: function (t) {
      return t += "", this["$" + t] = t, this;
    }, remove: Hh.remove, clear: Hh.clear, values: Hh.keys, size: Hh.size, empty: Hh.empty, each: Hh.each };var Xh = {},
      $h = {},
      Vh = 34,
      Wh = 10,
      Zh = 13,
      Gh = function (t) {
    function n(t, n) {
      function e() {
        if (s) return $h;if (f) return f = !1, Xh;var n,
            e,
            r = a;if (t.charCodeAt(r) === Vh) {
          for (; a++ < u && t.charCodeAt(a) !== Vh || t.charCodeAt(++a) === Vh;);return (n = a) >= u ? s = !0 : (e = t.charCodeAt(a++)) === Wh ? f = !0 : e === Zh && (f = !0, t.charCodeAt(a) === Wh && ++a), t.slice(r + 1, n - 1).replace(/""/g, '"');
        }for (; a < u;) {
          if ((e = t.charCodeAt(n = a++)) === Wh) f = !0;else if (e === Zh) f = !0, t.charCodeAt(a) === Wh && ++a;else if (e !== o) continue;return t.slice(r, n);
        }return s = !0, t.slice(r, u);
      }var r,
          i = [],
          u = t.length,
          a = 0,
          c = 0,
          s = u <= 0,
          f = !1;for (t.charCodeAt(u - 1) === Wh && --u, t.charCodeAt(u - 1) === Zh && --u; (r = e()) !== $h;) {
        for (var l = []; r !== Xh && r !== $h;) l.push(r), r = e();n && null == (l = n(l, c++)) || i.push(l);
      }return i;
    }function e(n) {
      return n.map(r).join(t);
    }function r(t) {
      return null == t ? "" : i.test(t += "") ? '"' + t.replace(/"/g, '""') + '"' : t;
    }var i = new RegExp('["' + t + "\n\r]"),
        o = t.charCodeAt(0);return { parse: function (t, e) {
        var r,
            i,
            o = n(t, function (t, n) {
          if (r) return r(t, n - 1);i = t, r = e ? Ce(t, e) : Ae(t);
        });return o.columns = i, o;
      }, parseRows: n, format: function (n, e) {
        return null == e && (e = ze(n)), [e.map(r).join(t)].concat(n.map(function (n) {
          return e.map(function (t) {
            return r(n[t]);
          }).join(t);
        })).join("\n");
      }, formatRows: function (t) {
        return t.map(e).join("\n");
      } };
  },
      Jh = Gh(","),
      Qh = Jh.parse,
      Kh = Jh.parseRows,
      tp = Jh.format,
      np = Jh.formatRows,
      ep = Gh("\t"),
      rp = ep.parse,
      ip = ep.parseRows,
      op = ep.format,
      up = ep.formatRows,
      ap = function (t) {
    return function () {
      return t;
    };
  },
      cp = function () {
    return 1e-6 * (Math.random() - .5);
  },
      sp = function (t, n, e, r, i) {
    this.node = t, this.x0 = n, this.y0 = e, this.x1 = r, this.y1 = i;
  },
      fp = qe.prototype = Ue.prototype;fp.copy = function () {
    var t,
        n,
        e = new Ue(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
        r = this._root;if (!r) return e;if (!r.length) return e._root = De(r), e;for (t = [{ source: r, target: e._root = new Array(4) }]; r = t.pop();) for (var i = 0; i < 4; ++i) (n = r.source[i]) && (n.length ? t.push({ source: n, target: r.target[i] = new Array(4) }) : r.target[i] = De(n));return e;
  }, fp.add = function (t) {
    var n = +this._x.call(null, t),
        e = +this._y.call(null, t);return Pe(this.cover(n, e), n, e, t);
  }, fp.addAll = function (t) {
    var n,
        e,
        r,
        i,
        o = t.length,
        u = new Array(o),
        a = new Array(o),
        c = 1 / 0,
        s = 1 / 0,
        f = -1 / 0,
        l = -1 / 0;for (e = 0; e < o; ++e) isNaN(r = +this._x.call(null, n = t[e])) || isNaN(i = +this._y.call(null, n)) || (u[e] = r, a[e] = i, r < c && (c = r), r > f && (f = r), i < s && (s = i), i > l && (l = i));for (f < c && (c = this._x0, f = this._x1), l < s && (s = this._y0, l = this._y1), this.cover(c, s).cover(f, l), e = 0; e < o; ++e) Pe(this, u[e], a[e], t[e]);return this;
  }, fp.cover = function (t, n) {
    if (isNaN(t = +t) || isNaN(n = +n)) return this;var e = this._x0,
        r = this._y0,
        i = this._x1,
        o = this._y1;if (isNaN(e)) i = (e = Math.floor(t)) + 1, o = (r = Math.floor(n)) + 1;else {
      if (!(e > t || t > i || r > n || n > o)) return this;var u,
          a,
          c = i - e,
          s = this._root;switch (a = (n < (r + o) / 2) << 1 | t < (e + i) / 2) {case 0:
          do {
            u = new Array(4), u[a] = s, s = u;
          } while ((c *= 2, i = e + c, o = r + c, t > i || n > o));break;case 1:
          do {
            u = new Array(4), u[a] = s, s = u;
          } while ((c *= 2, e = i - c, o = r + c, e > t || n > o));break;case 2:
          do {
            u = new Array(4), u[a] = s, s = u;
          } while ((c *= 2, i = e + c, r = o - c, t > i || r > n));break;case 3:
          do {
            u = new Array(4), u[a] = s, s = u;
          } while ((c *= 2, e = i - c, r = o - c, e > t || r > n));}this._root && this._root.length && (this._root = s);
    }return this._x0 = e, this._y0 = r, this._x1 = i, this._y1 = o, this;
  }, fp.data = function () {
    var t = [];return this.visit(function (n) {
      if (!n.length) do {
        t.push(n.data);
      } while (n = n.next);
    }), t;
  }, fp.extent = function (t) {
    return arguments.length ? this.cover(+t[0][0], +t[0][1]).cover(+t[1][0], +t[1][1]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0], [this._x1, this._y1]];
  }, fp.find = function (t, n, e) {
    var r,
        i,
        o,
        u,
        a,
        c,
        s,
        f = this._x0,
        l = this._y0,
        h = this._x1,
        p = this._y1,
        d = [],
        v = this._root;for (v && d.push(new sp(v, f, l, h, p)), null == e ? e = 1 / 0 : (f = t - e, l = n - e, h = t + e, p = n + e, e *= e); c = d.pop();) if (!(!(v = c.node) || (i = c.x0) > h || (o = c.y0) > p || (u = c.x1) < f || (a = c.y1) < l)) if (v.length) {
      var _ = (i + u) / 2,
          y = (o + a) / 2;d.push(new sp(v[3], _, y, u, a), new sp(v[2], i, y, _, a), new sp(v[1], _, o, u, y), new sp(v[0], i, o, _, y)), (s = (n >= y) << 1 | t >= _) && (c = d[d.length - 1], d[d.length - 1] = d[d.length - 1 - s], d[d.length - 1 - s] = c);
    } else {
      var g = t - +this._x.call(null, v.data),
          m = n - +this._y.call(null, v.data),
          x = g * g + m * m;if (x < e) {
        var b = Math.sqrt(e = x);f = t - b, l = n - b, h = t + b, p = n + b, r = v.data;
      }
    }return r;
  }, fp.remove = function (t) {
    if (isNaN(o = +this._x.call(null, t)) || isNaN(u = +this._y.call(null, t))) return this;var n,
        e,
        r,
        i,
        o,
        u,
        a,
        c,
        s,
        f,
        l,
        h,
        p = this._root,
        d = this._x0,
        v = this._y0,
        _ = this._x1,
        y = this._y1;if (!p) return this;if (p.length) for (;;) {
      if ((s = o >= (a = (d + _) / 2)) ? d = a : _ = a, (f = u >= (c = (v + y) / 2)) ? v = c : y = c, n = p, !(p = p[l = f << 1 | s])) return this;if (!p.length) break;(n[l + 1 & 3] || n[l + 2 & 3] || n[l + 3 & 3]) && (e = n, h = l);
    }for (; p.data !== t;) if (r = p, !(p = p.next)) return this;return (i = p.next) && delete p.next, r ? (i ? r.next = i : delete r.next, this) : n ? (i ? n[l] = i : delete n[l], (p = n[0] || n[1] || n[2] || n[3]) && p === (n[3] || n[2] || n[1] || n[0]) && !p.length && (e ? e[h] = p : this._root = p), this) : (this._root = i, this);
  }, fp.removeAll = function (t) {
    for (var n = 0, e = t.length; n < e; ++n) this.remove(t[n]);return this;
  }, fp.root = function () {
    return this._root;
  }, fp.size = function () {
    var t = 0;return this.visit(function (n) {
      if (!n.length) do {
        ++t;
      } while (n = n.next);
    }), t;
  }, fp.visit = function (t) {
    var n,
        e,
        r,
        i,
        o,
        u,
        a = [],
        c = this._root;for (c && a.push(new sp(c, this._x0, this._y0, this._x1, this._y1)); n = a.pop();) if (!t(c = n.node, r = n.x0, i = n.y0, o = n.x1, u = n.y1) && c.length) {
      var s = (r + o) / 2,
          f = (i + u) / 2;(e = c[3]) && a.push(new sp(e, s, f, o, u)), (e = c[2]) && a.push(new sp(e, r, f, s, u)), (e = c[1]) && a.push(new sp(e, s, i, o, f)), (e = c[0]) && a.push(new sp(e, r, i, s, f));
    }return this;
  }, fp.visitAfter = function (t) {
    var n,
        e = [],
        r = [];for (this._root && e.push(new sp(this._root, this._x0, this._y0, this._x1, this._y1)); n = e.pop();) {
      var i = n.node;if (i.length) {
        var o,
            u = n.x0,
            a = n.y0,
            c = n.x1,
            s = n.y1,
            f = (u + c) / 2,
            l = (a + s) / 2;(o = i[0]) && e.push(new sp(o, u, a, f, l)), (o = i[1]) && e.push(new sp(o, f, a, c, l)), (o = i[2]) && e.push(new sp(o, u, l, f, s)), (o = i[3]) && e.push(new sp(o, f, l, c, s));
      }r.push(n);
    }for (; n = r.pop();) t(n.node, n.x0, n.y0, n.x1, n.y1);return this;
  }, fp.x = function (t) {
    return arguments.length ? (this._x = t, this) : this._x;
  }, fp.y = function (t) {
    return arguments.length ? (this._y = t, this) : this._y;
  };var lp,
      hp = 10,
      pp = Math.PI * (3 - Math.sqrt(5)),
      dp = function (t, n) {
    if ((e = (t = n ? t.toExponential(n - 1) : t.toExponential()).indexOf("e")) < 0) return null;var e,
        r = t.slice(0, e);return [r.length > 1 ? r[0] + r.slice(2) : r, +t.slice(e + 1)];
  },
      vp = function (t) {
    return (t = dp(Math.abs(t))) ? t[1] : NaN;
  },
      _p = function (t, n) {
    return function (e, r) {
      for (var i = e.length, o = [], u = 0, a = t[0], c = 0; i > 0 && a > 0 && (c + a + 1 > r && (a = Math.max(1, r - c)), o.push(e.substring(i -= a, i + a)), !((c += a + 1) > r));) a = t[u = (u + 1) % t.length];return o.reverse().join(n);
    };
  },
      yp = function (t) {
    return function (n) {
      return n.replace(/[0-9]/g, function (n) {
        return t[+n];
      });
    };
  },
      gp = function (t, n) {
    var e = dp(t, n);if (!e) return t + "";var r = e[0],
        i = e[1];return i < 0 ? "0." + new Array(-i).join("0") + r : r.length > i + 1 ? r.slice(0, i + 1) + "." + r.slice(i + 1) : r + new Array(i - r.length + 2).join("0");
  },
      mp = { "": function (t, n) {
      t: for (var e, r = (t = t.toPrecision(n)).length, i = 1, o = -1; i < r; ++i) switch (t[i]) {case ".":
          o = e = i;break;case "0":
          0 === o && (o = i), e = i;break;case "e":
          break t;default:
          o > 0 && (o = 0);}return o > 0 ? t.slice(0, o) + t.slice(e + 1) : t;
    }, "%": function (t, n) {
      return (100 * t).toFixed(n);
    }, b: function (t) {
      return Math.round(t).toString(2);
    }, c: function (t) {
      return t + "";
    }, d: function (t) {
      return Math.round(t).toString(10);
    }, e: function (t, n) {
      return t.toExponential(n);
    }, f: function (t, n) {
      return t.toFixed(n);
    }, g: function (t, n) {
      return t.toPrecision(n);
    }, o: function (t) {
      return Math.round(t).toString(8);
    }, p: function (t, n) {
      return gp(100 * t, n);
    }, r: gp, s: function (t, n) {
      var e = dp(t, n);if (!e) return t + "";var r = e[0],
          i = e[1],
          o = i - (lp = 3 * Math.max(-8, Math.min(8, Math.floor(i / 3)))) + 1,
          u = r.length;return o === u ? r : o > u ? r + new Array(o - u + 1).join("0") : o > 0 ? r.slice(0, o) + "." + r.slice(o) : "0." + new Array(1 - o).join("0") + dp(t, Math.max(0, n + o - 1))[0];
    }, X: function (t) {
      return Math.round(t).toString(16).toUpperCase();
    }, x: function (t) {
      return Math.round(t).toString(16);
    } },
      xp = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;He.prototype = Xe.prototype, Xe.prototype.toString = function () {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (null == this.width ? "" : Math.max(1, 0 | this.width)) + (this.comma ? "," : "") + (null == this.precision ? "" : "." + Math.max(0, 0 | this.precision)) + this.type;
  };var bp,
      wp = function (t) {
    return t;
  },
      Mp = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"],
      Tp = function (t) {
    function n(t) {
      function n(t) {
        var n,
            r,
            u,
            f = _,
            x = y;if ("c" === v) x = g(t) + x, t = "";else {
          var b = (t = +t) < 0;if (t = g(Math.abs(t), d), b && 0 == +t && (b = !1), f = (b ? "(" === s ? s : "-" : "-" === s || "(" === s ? "" : s) + f, x = x + ("s" === v ? Mp[8 + lp / 3] : "") + (b && "(" === s ? ")" : ""), m) for (n = -1, r = t.length; ++n < r;) if (48 > (u = t.charCodeAt(n)) || u > 57) {
            x = (46 === u ? i + t.slice(n + 1) : t.slice(n)) + x, t = t.slice(0, n);break;
          }
        }p && !l && (t = e(t, 1 / 0));var w = f.length + t.length + x.length,
            M = w < h ? new Array(h - w + 1).join(a) : "";switch (p && l && (t = e(M + t, M.length ? h - x.length : 1 / 0), M = ""), c) {case "<":
            t = f + t + x + M;break;case "=":
            t = f + M + t + x;break;case "^":
            t = M.slice(0, w = M.length >> 1) + f + t + x + M.slice(w);break;default:
            t = M + f + t + x;}return o(t);
      }var a = (t = He(t)).fill,
          c = t.align,
          s = t.sign,
          f = t.symbol,
          l = t.zero,
          h = t.width,
          p = t.comma,
          d = t.precision,
          v = t.type,
          _ = "$" === f ? r[0] : "#" === f && /[boxX]/.test(v) ? "0" + v.toLowerCase() : "",
          y = "$" === f ? r[1] : /[%p]/.test(v) ? u : "",
          g = mp[v],
          m = !v || /[defgprs%]/.test(v);return d = null == d ? v ? 6 : 12 : /[gprs]/.test(v) ? Math.max(1, Math.min(21, d)) : Math.max(0, Math.min(20, d)), n.toString = function () {
        return t + "";
      }, n;
    }var e = t.grouping && t.thousands ? _p(t.grouping, t.thousands) : wp,
        r = t.currency,
        i = t.decimal,
        o = t.numerals ? yp(t.numerals) : wp,
        u = t.percent || "%";return { format: n, formatPrefix: function (t, e) {
        var r = n((t = He(t), t.type = "f", t)),
            i = 3 * Math.max(-8, Math.min(8, Math.floor(vp(e) / 3))),
            o = Math.pow(10, -i),
            u = Mp[8 + i / 3];return function (t) {
          return r(o * t) + u;
        };
      } };
  };$e({ decimal: ".", thousands: ",", grouping: [3], currency: ["$", ""] });var kp = function (t) {
    return Math.max(0, -vp(Math.abs(t)));
  },
      Np = function (t, n) {
    return Math.max(0, 3 * Math.max(-8, Math.min(8, Math.floor(vp(n) / 3))) - vp(Math.abs(t)));
  },
      Sp = function (t, n) {
    return t = Math.abs(t), n = Math.abs(n) - t, Math.max(0, vp(n) - vp(t)) + 1;
  },
      Ep = function () {
    return new Ve();
  };Ve.prototype = { constructor: Ve, reset: function () {
      this.s = this.t = 0;
    }, add: function (t) {
      We(ud, t, this.t), We(this, ud.s, this.s), this.s ? this.t += ud.t : this.s = ud.t;
    }, valueOf: function () {
      return this.s;
    } };var Ap,
      Cp,
      zp,
      Pp,
      Rp,
      Lp,
      qp,
      Up,
      Dp,
      Op,
      Fp,
      Ip,
      Yp,
      Bp,
      jp,
      Hp,
      Xp,
      $p,
      Vp,
      Wp,
      Zp,
      Gp,
      Jp,
      Qp,
      Kp,
      td,
      nd,
      ed,
      rd,
      id,
      od,
      ud = new Ve(),
      ad = 1e-6,
      cd = Math.PI,
      sd = cd / 2,
      fd = cd / 4,
      ld = 2 * cd,
      hd = 180 / cd,
      pd = cd / 180,
      dd = Math.abs,
      vd = Math.atan,
      _d = Math.atan2,
      yd = Math.cos,
      gd = Math.ceil,
      md = Math.exp,
      xd = Math.log,
      bd = Math.pow,
      wd = Math.sin,
      Md = Math.sign || function (t) {
    return t > 0 ? 1 : t < 0 ? -1 : 0;
  },
      Td = Math.sqrt,
      kd = Math.tan,
      Nd = { Feature: function (t, n) {
      Ke(t.geometry, n);
    }, FeatureCollection: function (t, n) {
      for (var e = t.features, r = -1, i = e.length; ++r < i;) Ke(e[r].geometry, n);
    } },
      Sd = { Sphere: function (t, n) {
      n.sphere();
    }, Point: function (t, n) {
      t = t.coordinates, n.point(t[0], t[1], t[2]);
    }, MultiPoint: function (t, n) {
      for (var e = t.coordinates, r = -1, i = e.length; ++r < i;) t = e[r], n.point(t[0], t[1], t[2]);
    }, LineString: function (t, n) {
      tr(t.coordinates, n, 0);
    }, MultiLineString: function (t, n) {
      for (var e = t.coordinates, r = -1, i = e.length; ++r < i;) tr(e[r], n, 0);
    }, Polygon: function (t, n) {
      nr(t.coordinates, n);
    }, MultiPolygon: function (t, n) {
      for (var e = t.coordinates, r = -1, i = e.length; ++r < i;) nr(e[r], n);
    }, GeometryCollection: function (t, n) {
      for (var e = t.geometries, r = -1, i = e.length; ++r < i;) Ke(e[r], n);
    } },
      Ed = function (t, n) {
    t && Nd.hasOwnProperty(t.type) ? Nd[t.type](t, n) : Ke(t, n);
  },
      Ad = Ep(),
      Cd = Ep(),
      zd = { point: Qe, lineStart: Qe, lineEnd: Qe, polygonStart: function () {
      Ad.reset(), zd.lineStart = er, zd.lineEnd = rr;
    }, polygonEnd: function () {
      var t = +Ad;Cd.add(t < 0 ? ld + t : t), this.lineStart = this.lineEnd = this.point = Qe;
    }, sphere: function () {
      Cd.add(ld);
    } },
      Pd = Ep(),
      Rd = { point: pr, lineStart: vr, lineEnd: _r, polygonStart: function () {
      Rd.point = yr, Rd.lineStart = gr, Rd.lineEnd = mr, Pd.reset(), zd.polygonStart();
    }, polygonEnd: function () {
      zd.polygonEnd(), Rd.point = pr, Rd.lineStart = vr, Rd.lineEnd = _r, Ad < 0 ? (Lp = -(Up = 180), qp = -(Dp = 90)) : Pd > ad ? Dp = 90 : Pd < -ad && (qp = -90), jp[0] = Lp, jp[1] = Up;
    } },
      Ld = { sphere: Qe, point: Mr, lineStart: kr, lineEnd: Er, polygonStart: function () {
      Ld.lineStart = Ar, Ld.lineEnd = Cr;
    }, polygonEnd: function () {
      Ld.lineStart = kr, Ld.lineEnd = Er;
    } },
      qd = function (t) {
    return function () {
      return t;
    };
  },
      Ud = function (t, n) {
    function e(e, r) {
      return e = t(e, r), n(e[0], e[1]);
    }return t.invert && n.invert && (e.invert = function (e, r) {
      return (e = n.invert(e, r)) && t.invert(e[0], e[1]);
    }), e;
  };Rr.invert = Rr;var Dd,
      Od,
      Fd,
      Id,
      Yd,
      Bd,
      jd,
      Hd,
      Xd,
      $d,
      Vd,
      Wd = function (t) {
    function n(n) {
      return n = t(n[0] * pd, n[1] * pd), n[0] *= hd, n[1] *= hd, n;
    }return t = Lr(t[0] * pd, t[1] * pd, t.length > 2 ? t[2] * pd : 0), n.invert = function (n) {
      return n = t.invert(n[0] * pd, n[1] * pd), n[0] *= hd, n[1] *= hd, n;
    }, n;
  },
      Zd = function () {
    var t,
        n = [];return { point: function (n, e) {
        t.push([n, e]);
      }, lineStart: function () {
        n.push(t = []);
      }, lineEnd: Qe, rejoin: function () {
        n.length > 1 && n.push(n.pop().concat(n.shift()));
      }, result: function () {
        var e = n;return n = [], t = null, e;
      } };
  },
      Gd = function (t, n, e, r, i, o) {
    var u,
        a = t[0],
        c = t[1],
        s = 0,
        f = 1,
        l = n[0] - a,
        h = n[1] - c;if (u = e - a, l || !(u > 0)) {
      if (u /= l, l < 0) {
        if (u < s) return;u < f && (f = u);
      } else if (l > 0) {
        if (u > f) return;u > s && (s = u);
      }if (u = i - a, l || !(u < 0)) {
        if (u /= l, l < 0) {
          if (u > f) return;u > s && (s = u);
        } else if (l > 0) {
          if (u < s) return;u < f && (f = u);
        }if (u = r - c, h || !(u > 0)) {
          if (u /= h, h < 0) {
            if (u < s) return;u < f && (f = u);
          } else if (h > 0) {
            if (u > f) return;u > s && (s = u);
          }if (u = o - c, h || !(u < 0)) {
            if (u /= h, h < 0) {
              if (u > f) return;u > s && (s = u);
            } else if (h > 0) {
              if (u < s) return;u < f && (f = u);
            }return s > 0 && (t[0] = a + s * l, t[1] = c + s * h), f < 1 && (n[0] = a + f * l, n[1] = c + f * h), !0;
          }
        }
      }
    }
  },
      Jd = function (t, n) {
    return dd(t[0] - n[0]) < ad && dd(t[1] - n[1]) < ad;
  },
      Qd = function (t, n, e, r, i) {
    var o,
        u,
        a = [],
        c = [];if (t.forEach(function (t) {
      if (!((n = t.length - 1) <= 0)) {
        var n,
            e,
            r = t[0],
            u = t[n];if (Jd(r, u)) {
          for (i.lineStart(), o = 0; o < n; ++o) i.point((r = t[o])[0], r[1]);i.lineEnd();
        } else a.push(e = new Ir(r, t, null, !0)), c.push(e.o = new Ir(r, null, e, !1)), a.push(e = new Ir(u, t, null, !1)), c.push(e.o = new Ir(u, null, e, !0));
      }
    }), a.length) {
      for (c.sort(n), Yr(a), Yr(c), o = 0, u = c.length; o < u; ++o) c[o].e = e = !e;for (var s, f, l = a[0];;) {
        for (var h = l, p = !0; h.v;) if ((h = h.n) === l) return;s = h.z, i.lineStart();do {
          if (h.v = h.o.v = !0, h.e) {
            if (p) for (o = 0, u = s.length; o < u; ++o) i.point((f = s[o])[0], f[1]);else r(h.x, h.n.x, 1, i);h = h.n;
          } else {
            if (p) for (s = h.p.z, o = s.length - 1; o >= 0; --o) i.point((f = s[o])[0], f[1]);else r(h.x, h.p.x, -1, i);h = h.p;
          }s = (h = h.o).z, p = !p;
        } while (!h.v);i.lineEnd();
      }
    }
  },
      Kd = 1e9,
      tv = -Kd,
      nv = Ep(),
      ev = function (t, n) {
    var e = n[0],
        r = n[1],
        i = [wd(e), -yd(e), 0],
        o = 0,
        u = 0;nv.reset();for (var a = 0, c = t.length; a < c; ++a) if (f = (s = t[a]).length) for (var s, f, l = s[f - 1], h = l[0], p = l[1] / 2 + fd, d = wd(p), v = yd(p), _ = 0; _ < f; ++_, h = g, d = x, v = b, l = y) {
      var y = s[_],
          g = y[0],
          m = y[1] / 2 + fd,
          x = wd(m),
          b = yd(m),
          w = g - h,
          M = w >= 0 ? 1 : -1,
          T = M * w,
          k = T > cd,
          N = d * x;if (nv.add(_d(N * M * wd(T), v * b + N * yd(T))), o += k ? w + M * ld : w, k ^ h >= e ^ g >= e) {
        var S = sr(ar(l), ar(y));hr(S);var E = sr(i, S);hr(E);var A = (k ^ w >= 0 ? -1 : 1) * Ge(E[2]);(r > A || r === A && (S[0] || S[1])) && (u += k ^ w >= 0 ? 1 : -1);
      }
    }return (o < -ad || o < ad && nv < -ad) ^ 1 & u;
  },
      rv = Ep(),
      iv = { sphere: Qe, point: Qe, lineStart: function () {
      iv.point = Hr, iv.lineEnd = jr;
    }, lineEnd: Qe, polygonStart: Qe, polygonEnd: Qe },
      ov = function (t) {
    return rv.reset(), Ed(t, iv), +rv;
  },
      uv = [null, null],
      av = { type: "LineString", coordinates: uv },
      cv = function (t, n) {
    return uv[0] = t, uv[1] = n, ov(av);
  },
      sv = { Feature: function (t, n) {
      return $r(t.geometry, n);
    }, FeatureCollection: function (t, n) {
      for (var e = t.features, r = -1, i = e.length; ++r < i;) if ($r(e[r].geometry, n)) return !0;return !1;
    } },
      fv = { Sphere: function () {
      return !0;
    }, Point: function (t, n) {
      return Vr(t.coordinates, n);
    }, MultiPoint: function (t, n) {
      for (var e = t.coordinates, r = -1, i = e.length; ++r < i;) if (Vr(e[r], n)) return !0;return !1;
    }, LineString: function (t, n) {
      return Wr(t.coordinates, n);
    }, MultiLineString: function (t, n) {
      for (var e = t.coordinates, r = -1, i = e.length; ++r < i;) if (Wr(e[r], n)) return !0;return !1;
    }, Polygon: function (t, n) {
      return Zr(t.coordinates, n);
    }, MultiPolygon: function (t, n) {
      for (var e = t.coordinates, r = -1, i = e.length; ++r < i;) if (Zr(e[r], n)) return !0;return !1;
    }, GeometryCollection: function (t, n) {
      for (var e = t.geometries, r = -1, i = e.length; ++r < i;) if ($r(e[r], n)) return !0;return !1;
    } },
      lv = function (t) {
    return t;
  },
      hv = Ep(),
      pv = Ep(),
      dv = { point: Qe, lineStart: Qe, lineEnd: Qe, polygonStart: function () {
      dv.lineStart = ni, dv.lineEnd = ii;
    }, polygonEnd: function () {
      dv.lineStart = dv.lineEnd = dv.point = Qe, hv.add(dd(pv)), pv.reset();
    }, result: function () {
      var t = hv / 2;return hv.reset(), t;
    } },
      vv = 1 / 0,
      _v = vv,
      yv = -vv,
      gv = yv,
      mv = { point: function (t, n) {
      t < vv && (vv = t), t > yv && (yv = t), n < _v && (_v = n), n > gv && (gv = n);
    }, lineStart: Qe, lineEnd: Qe, polygonStart: Qe, polygonEnd: Qe, result: function () {
      var t = [[vv, _v], [yv, gv]];return yv = gv = -(_v = vv = 1 / 0), t;
    } },
      xv = 0,
      bv = 0,
      wv = 0,
      Mv = 0,
      Tv = 0,
      kv = 0,
      Nv = 0,
      Sv = 0,
      Ev = 0,
      Av = { point: oi, lineStart: ui, lineEnd: si, polygonStart: function () {
      Av.lineStart = fi, Av.lineEnd = li;
    }, polygonEnd: function () {
      Av.point = oi, Av.lineStart = ui, Av.lineEnd = si;
    }, result: function () {
      var t = Ev ? [Nv / Ev, Sv / Ev] : kv ? [Mv / kv, Tv / kv] : wv ? [xv / wv, bv / wv] : [NaN, NaN];return xv = bv = wv = Mv = Tv = kv = Nv = Sv = Ev = 0, t;
    } };di.prototype = { _radius: 4.5, pointRadius: function (t) {
      return this._radius = t, this;
    }, polygonStart: function () {
      this._line = 0;
    }, polygonEnd: function () {
      this._line = NaN;
    }, lineStart: function () {
      this._point = 0;
    }, lineEnd: function () {
      0 === this._line && this._context.closePath(), this._point = NaN;
    }, point: function (t, n) {
      switch (this._point) {case 0:
          this._context.moveTo(t, n), this._point = 1;break;case 1:
          this._context.lineTo(t, n);break;default:
          this._context.moveTo(t + this._radius, n), this._context.arc(t, n, this._radius, 0, ld);}
    }, result: Qe };var Cv,
      zv,
      Pv,
      Rv,
      Lv,
      qv = Ep(),
      Uv = { point: Qe, lineStart: function () {
      Uv.point = vi;
    }, lineEnd: function () {
      Cv && _i(zv, Pv), Uv.point = Qe;
    }, polygonStart: function () {
      Cv = !0;
    }, polygonEnd: function () {
      Cv = null;
    }, result: function () {
      var t = +qv;return qv.reset(), t;
    } };yi.prototype = { _radius: 4.5, _circle: gi(4.5), pointRadius: function (t) {
      return (t = +t) !== this._radius && (this._radius = t, this._circle = null), this;
    }, polygonStart: function () {
      this._line = 0;
    }, polygonEnd: function () {
      this._line = NaN;
    }, lineStart: function () {
      this._point = 0;
    }, lineEnd: function () {
      0 === this._line && this._string.push("Z"), this._point = NaN;
    }, point: function (t, n) {
      switch (this._point) {case 0:
          this._string.push("M", t, ",", n), this._point = 1;break;case 1:
          this._string.push("L", t, ",", n);break;default:
          null == this._circle && (this._circle = gi(this._radius)), this._string.push("M", t, ",", n, this._circle);}
    }, result: function () {
      if (this._string.length) {
        var t = this._string.join("");return this._string = [], t;
      }return null;
    } };var Dv = function (t, n, e, r) {
    return function (i, o) {
      function u(n, e) {
        var r = i(n, e);t(n = r[0], e = r[1]) && o.point(n, e);
      }function a(t, n) {
        var e = i(t, n);_.point(e[0], e[1]);
      }function c() {
        b.point = a, _.lineStart();
      }function s() {
        b.point = u, _.lineEnd();
      }function f(t, n) {
        v.push([t, n]);var e = i(t, n);m.point(e[0], e[1]);
      }function l() {
        m.lineStart(), v = [];
      }function h() {
        f(v[0][0], v[0][1]), m.lineEnd();var t,
            n,
            e,
            r,
            i = m.clean(),
            u = g.result(),
            a = u.length;if (v.pop(), p.push(v), v = null, a) if (1 & i) {
          if (e = u[0], (n = e.length - 1) > 0) {
            for (x || (o.polygonStart(), x = !0), o.lineStart(), t = 0; t < n; ++t) o.point((r = e[t])[0], r[1]);o.lineEnd();
          }
        } else a > 1 && 2 & i && u.push(u.pop().concat(u.shift())), d.push(u.filter(mi));
      }var p,
          d,
          v,
          _ = n(o),
          y = i.invert(r[0], r[1]),
          g = Zd(),
          m = n(g),
          x = !1,
          b = { point: u, lineStart: c, lineEnd: s, polygonStart: function () {
          b.point = f, b.lineStart = l, b.lineEnd = h, d = [], p = [];
        }, polygonEnd: function () {
          b.point = u, b.lineStart = c, b.lineEnd = s, d = Cs(d);var t = ev(p, y);d.length ? (x || (o.polygonStart(), x = !0), Qd(d, xi, t, e, o)) : t && (x || (o.polygonStart(), x = !0), o.lineStart(), e(null, null, 1, o), o.lineEnd()), x && (o.polygonEnd(), x = !1), d = p = null;
        }, sphere: function () {
          o.polygonStart(), o.lineStart(), e(null, null, 1, o), o.lineEnd(), o.polygonEnd();
        } };return b;
    };
  },
      Ov = Dv(function () {
    return !0;
  }, function (t) {
    var n,
        e = NaN,
        r = NaN,
        i = NaN;return { lineStart: function () {
        t.lineStart(), n = 1;
      }, point: function (o, u) {
        var a = o > 0 ? cd : -cd,
            c = dd(o - e);dd(c - cd) < ad ? (t.point(e, r = (r + u) / 2 > 0 ? sd : -sd), t.point(i, r), t.lineEnd(), t.lineStart(), t.point(a, r), t.point(o, r), n = 0) : i !== a && c >= cd && (dd(e - i) < ad && (e -= i * ad), dd(o - a) < ad && (o -= a * ad), r = bi(e, r, o, u), t.point(i, r), t.lineEnd(), t.lineStart(), t.point(a, r), n = 0), t.point(e = o, r = u), i = a;
      }, lineEnd: function () {
        t.lineEnd(), e = r = NaN;
      }, clean: function () {
        return 2 - n;
      } };
  }, function (t, n, e, r) {
    var i;if (null == t) i = e * sd, r.point(-cd, i), r.point(0, i), r.point(cd, i), r.point(cd, 0), r.point(cd, -i), r.point(0, -i), r.point(-cd, -i), r.point(-cd, 0), r.point(-cd, i);else if (dd(t[0] - n[0]) > ad) {
      var o = t[0] < n[0] ? cd : -cd;i = e * o / 2, r.point(-o, i), r.point(0, i), r.point(o, i);
    } else r.point(n[0], n[1]);
  }, [-cd, -sd]),
      Fv = function (t, n) {
    function e(t, n) {
      return yd(t) * yd(n) > o;
    }function r(t, n, e) {
      var r = [1, 0, 0],
          i = sr(ar(t), ar(n)),
          u = cr(i, i),
          a = i[0],
          c = u - a * a;if (!c) return !e && t;var s = o * u / c,
          f = -o * a / c,
          l = sr(r, i),
          h = lr(r, s);fr(h, lr(i, f));var p = l,
          d = cr(h, p),
          v = cr(p, p),
          _ = d * d - v * (cr(h, h) - 1);if (!(_ < 0)) {
        var y = Td(_),
            g = lr(p, (-d - y) / v);if (fr(g, h), g = ur(g), !e) return g;var m,
            x = t[0],
            b = n[0],
            w = t[1],
            M = n[1];b < x && (m = x, x = b, b = m);var T = b - x,
            k = dd(T - cd) < ad,
            N = k || T < ad;if (!k && M < w && (m = w, w = M, M = m), N ? k ? w + M > 0 ^ g[1] < (dd(g[0] - x) < ad ? w : M) : w <= g[1] && g[1] <= M : T > cd ^ (x <= g[0] && g[0] <= b)) {
          var S = lr(p, (-d + y) / v);return fr(S, h), [g, ur(S)];
        }
      }
    }function i(n, e) {
      var r = u ? t : cd - t,
          i = 0;return n < -r ? i |= 1 : n > r && (i |= 2), e < -r ? i |= 4 : e > r && (i |= 8), i;
    }var o = yd(t),
        u = o > 0,
        a = dd(o) > ad;return Dv(e, function (t) {
      var n, o, c, s, f;return { lineStart: function () {
          s = c = !1, f = 1;
        }, point: function (l, h) {
          var p,
              d = [l, h],
              v = e(l, h),
              _ = u ? v ? 0 : i(l, h) : v ? i(l + (l < 0 ? cd : -cd), h) : 0;if (!n && (s = c = v) && t.lineStart(), v !== c && (!(p = r(n, d)) || Jd(n, p) || Jd(d, p)) && (d[0] += ad, d[1] += ad, v = e(d[0], d[1])), v !== c) f = 0, v ? (t.lineStart(), p = r(d, n), t.point(p[0], p[1])) : (p = r(n, d), t.point(p[0], p[1]), t.lineEnd()), n = p;else if (a && n && u ^ v) {
            var y;_ & o || !(y = r(d, n, !0)) || (f = 0, u ? (t.lineStart(), t.point(y[0][0], y[0][1]), t.point(y[1][0], y[1][1]), t.lineEnd()) : (t.point(y[1][0], y[1][1]), t.lineEnd(), t.lineStart(), t.point(y[0][0], y[0][1])));
          }!v || n && Jd(n, d) || t.point(d[0], d[1]), n = d, c = v, o = _;
        }, lineEnd: function () {
          c && t.lineEnd(), n = null;
        }, clean: function () {
          return f | (s && c) << 1;
        } };
    }, function (e, r, i, o) {
      Or(o, t, n, i, e, r);
    }, u ? [0, -t] : [-cd, t - cd]);
  };Mi.prototype = { constructor: Mi, point: function (t, n) {
      this.stream.point(t, n);
    }, sphere: function () {
      this.stream.sphere();
    }, lineStart: function () {
      this.stream.lineStart();
    }, lineEnd: function () {
      this.stream.lineEnd();
    }, polygonStart: function () {
      this.stream.polygonStart();
    }, polygonEnd: function () {
      this.stream.polygonEnd();
    } };var Iv = 16,
      Yv = yd(30 * pd),
      Bv = function (t, n) {
    return +n ? Si(t, n) : Ni(t);
  },
      jv = wi({ point: function (t, n) {
      this.stream.point(t * pd, n * pd);
    } }),
      Hv = function () {
    return Ci(Pi).scale(155.424).center([0, 33.6442]);
  },
      Xv = function () {
    return Hv().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-.6, 38.7]);
  },
      $v = Li(function (t) {
    return Td(2 / (1 + t));
  });$v.invert = qi(function (t) {
    return 2 * Ge(t / 2);
  });var Vv = Li(function (t) {
    return (t = Ze(t)) && t / wd(t);
  });Vv.invert = qi(function (t) {
    return t;
  });Ui.invert = function (t, n) {
    return [t, 2 * vd(md(n)) - sd];
  };Ii.invert = Ii;Bi.invert = qi(vd);Hi.invert = qi(Ge);Xi.invert = qi(function (t) {
    return 2 * vd(t);
  });$i.invert = function (t, n) {
    return [-n, 2 * vd(md(t)) - sd];
  };uo.prototype = eo.prototype = { constructor: uo, count: function () {
      return this.eachAfter(to);
    }, each: function (t) {
      var n,
          e,
          r,
          i,
          o = this,
          u = [o];do {
        for (n = u.reverse(), u = []; o = n.pop();) if (t(o), e = o.children) for (r = 0, i = e.length; r < i; ++r) u.push(e[r]);
      } while (u.length);return this;
    }, eachAfter: function (t) {
      for (var n, e, r, i = this, o = [i], u = []; i = o.pop();) if (u.push(i), n = i.children) for (e = 0, r = n.length; e < r; ++e) o.push(n[e]);for (; i = u.pop();) t(i);return this;
    }, eachBefore: function (t) {
      for (var n, e, r = this, i = [r]; r = i.pop();) if (t(r), n = r.children) for (e = n.length - 1; e >= 0; --e) i.push(n[e]);return this;
    }, sum: function (t) {
      return this.eachAfter(function (n) {
        for (var e = +t(n.data) || 0, r = n.children, i = r && r.length; --i >= 0;) e += r[i].value;n.value = e;
      });
    }, sort: function (t) {
      return this.eachBefore(function (n) {
        n.children && n.children.sort(t);
      });
    }, path: function (t) {
      for (var n = this, e = no(n, t), r = [n]; n !== e;) n = n.parent, r.push(n);for (var i = r.length; t !== e;) r.splice(i, 0, t), t = t.parent;return r;
    }, ancestors: function () {
      for (var t = this, n = [t]; t = t.parent;) n.push(t);return n;
    }, descendants: function () {
      var t = [];return this.each(function (n) {
        t.push(n);
      }), t;
    }, leaves: function () {
      var t = [];return this.eachBefore(function (n) {
        n.children || t.push(n);
      }), t;
    }, links: function () {
      var t = this,
          n = [];return t.each(function (e) {
        e !== t && n.push({ source: e.parent, target: e });
      }), n;
    }, copy: function () {
      return eo(this).eachBefore(io);
    } };var Wv = Array.prototype.slice,
      Zv = function (t) {
    for (var n, e, r = 0, i = (t = ao(Wv.call(t))).length, o = []; r < i;) n = t[r], e && fo(e, n) ? ++r : (e = ho(o = co(o, n)), r = 0);return e;
  },
      Gv = function (t) {
    return function () {
      return t;
    };
  },
      Jv = function (t) {
    t.x0 = Math.round(t.x0), t.y0 = Math.round(t.y0), t.x1 = Math.round(t.x1), t.y1 = Math.round(t.y1);
  },
      Qv = function (t, n, e, r, i) {
    for (var o, u = t.children, a = -1, c = u.length, s = t.value && (r - n) / t.value; ++a < c;) (o = u[a]).y0 = e, o.y1 = i, o.x0 = n, o.x1 = n += o.value * s;
  },
      Kv = "$",
      t_ = { depth: -1 },
      n_ = {};Do.prototype = Object.create(uo.prototype);var e_ = function (t, n, e, r, i) {
    for (var o, u = t.children, a = -1, c = u.length, s = t.value && (i - e) / t.value; ++a < c;) (o = u[a]).x0 = n, o.x1 = r, o.y0 = e, o.y1 = e += o.value * s;
  },
      r_ = (1 + Math.sqrt(5)) / 2,
      i_ = function t(n) {
    function e(t, e, r, i, o) {
      Fo(n, t, e, r, i, o);
    }return e.ratio = function (n) {
      return t((n = +n) > 1 ? n : 1);
    }, e;
  }(r_),
      o_ = function t(n) {
    function e(t, e, r, i, o) {
      if ((u = t._squarify) && u.ratio === n) for (var u, a, c, s, f, l = -1, h = u.length, p = t.value; ++l < h;) {
        for (c = (a = u[l]).children, s = a.value = 0, f = c.length; s < f; ++s) a.value += c[s].value;a.dice ? Qv(a, e, r, i, r += (o - r) * a.value / p) : e_(a, e, r, e += (i - e) * a.value / p, o), p -= a.value;
      } else t._squarify = u = Fo(n, t, e, r, i, o), u.ratio = n;
    }return e.ratio = function (n) {
      return t((n = +n) > 1 ? n : 1);
    }, e;
  }(r_),
      u_ = function (t, n, e) {
    return (n[0] - t[0]) * (e[1] - t[1]) - (n[1] - t[1]) * (e[0] - t[0]);
  },
      a_ = [].slice,
      c_ = {};Bo.prototype = Wo.prototype = { constructor: Bo, defer: function (t) {
      if ("function" != typeof t) throw new Error("invalid callback");if (this._call) throw new Error("defer after await");if (null != this._error) return this;var n = a_.call(arguments, 1);return n.push(t), ++this._waiting, this._tasks.push(n), jo(this), this;
    }, abort: function () {
      return null == this._error && $o(this, new Error("abort")), this;
    }, await: function (t) {
      if ("function" != typeof t) throw new Error("invalid callback");if (this._call) throw new Error("multiple await");return this._call = function (n, e) {
        t.apply(null, [n].concat(e));
      }, Vo(this), this;
    }, awaitAll: function (t) {
      if ("function" != typeof t) throw new Error("invalid callback");if (this._call) throw new Error("multiple await");return this._call = t, Vo(this), this;
    } };var s_ = function () {
    return Math.random();
  },
      f_ = function t(n) {
    function e(t, e) {
      return t = null == t ? 0 : +t, e = null == e ? 1 : +e, 1 === arguments.length ? (e = t, t = 0) : e -= t, function () {
        return n() * e + t;
      };
    }return e.source = t, e;
  }(s_),
      l_ = function t(n) {
    function e(t, e) {
      var r, i;return t = null == t ? 0 : +t, e = null == e ? 1 : +e, function () {
        var o;if (null != r) o = r, r = null;else do {
          r = 2 * n() - 1, o = 2 * n() - 1, i = r * r + o * o;
        } while (!i || i > 1);return t + e * o * Math.sqrt(-2 * Math.log(i) / i);
      };
    }return e.source = t, e;
  }(s_),
      h_ = function t(n) {
    function e() {
      var t = l_.source(n).apply(this, arguments);return function () {
        return Math.exp(t());
      };
    }return e.source = t, e;
  }(s_),
      p_ = function t(n) {
    function e(t) {
      return function () {
        for (var e = 0, r = 0; r < t; ++r) e += n();return e;
      };
    }return e.source = t, e;
  }(s_),
      d_ = function t(n) {
    function e(t) {
      var e = p_.source(n)(t);return function () {
        return e() / t;
      };
    }return e.source = t, e;
  }(s_),
      v_ = function t(n) {
    function e(t) {
      return function () {
        return -Math.log(1 - n()) / t;
      };
    }return e.source = t, e;
  }(s_),
      __ = function (t, n) {
    function e(t) {
      var n,
          e = s.status;if (!e && Go(s) || e >= 200 && e < 300 || 304 === e) {
        if (o) try {
          n = o.call(r, s);
        } catch (t) {
          return void a.call("error", r, t);
        } else n = s;a.call("load", r, n);
      } else a.call("error", r, t);
    }var r,
        i,
        o,
        u,
        a = h("beforesend", "progress", "load", "error"),
        c = we(),
        s = new XMLHttpRequest(),
        f = null,
        l = null,
        p = 0;if ("undefined" == typeof XDomainRequest || "withCredentials" in s || !/^(http(s)?:)?\/\//.test(t) || (s = new XDomainRequest()), "onload" in s ? s.onload = s.onerror = s.ontimeout = e : s.onreadystatechange = function (t) {
      s.readyState > 3 && e(t);
    }, s.onprogress = function (t) {
      a.call("progress", r, t);
    }, r = { header: function (t, n) {
        return t = (t + "").toLowerCase(), arguments.length < 2 ? c.get(t) : (null == n ? c.remove(t) : c.set(t, n + ""), r);
      }, mimeType: function (t) {
        return arguments.length ? (i = null == t ? null : t + "", r) : i;
      }, responseType: function (t) {
        return arguments.length ? (u = t, r) : u;
      }, timeout: function (t) {
        return arguments.length ? (p = +t, r) : p;
      }, user: function (t) {
        return arguments.length < 1 ? f : (f = null == t ? null : t + "", r);
      }, password: function (t) {
        return arguments.length < 1 ? l : (l = null == t ? null : t + "", r);
      }, response: function (t) {
        return o = t, r;
      }, get: function (t, n) {
        return r.send("GET", t, n);
      }, post: function (t, n) {
        return r.send("POST", t, n);
      }, send: function (n, e, o) {
        return s.open(n, t, !0, f, l), null == i || c.has("accept") || c.set("accept", i + ",*/*"), s.setRequestHeader && c.each(function (t, n) {
          s.setRequestHeader(n, t);
        }), null != i && s.overrideMimeType && s.overrideMimeType(i), null != u && (s.responseType = u), p > 0 && (s.timeout = p), null == o && "function" == typeof e && (o = e, e = null), null != o && 1 === o.length && (o = Zo(o)), null != o && r.on("error", o).on("load", function (t) {
          o(null, t);
        }), a.call("beforesend", r, s), s.send(null == e ? null : e), r;
      }, abort: function () {
        return s.abort(), r;
      }, on: function () {
        var t = a.on.apply(a, arguments);return t === a ? r : t;
      } }, null != n) {
      if ("function" != typeof n) throw new Error("invalid callback: " + n);return r.get(n);
    }return r;
  },
      y_ = function (t, n) {
    return function (e, r) {
      var i = __(e).mimeType(t).response(n);if (null != r) {
        if ("function" != typeof r) throw new Error("invalid callback: " + r);return i.get(r);
      }return i;
    };
  },
      g_ = y_("text/html", function (t) {
    return document.createRange().createContextualFragment(t.responseText);
  }),
      m_ = y_("application/json", function (t) {
    return JSON.parse(t.responseText);
  }),
      x_ = y_("text/plain", function (t) {
    return t.responseText;
  }),
      b_ = y_("application/xml", function (t) {
    var n = t.responseXML;if (!n) throw new Error("parse error");return n;
  }),
      w_ = function (t, n) {
    return function (e, r, i) {
      arguments.length < 3 && (i = r, r = null);var o = __(e).mimeType(t);return o.row = function (t) {
        return arguments.length ? o.response(Jo(n, r = t)) : r;
      }, o.row(r), i ? o.get(i) : o;
    };
  },
      M_ = w_("text/csv", Qh),
      T_ = w_("text/tab-separated-values", rp),
      k_ = Array.prototype,
      N_ = k_.map,
      S_ = k_.slice,
      E_ = { name: "implicit" },
      A_ = function (t) {
    return function () {
      return t;
    };
  },
      C_ = function (t) {
    return +t;
  },
      z_ = [0, 1],
      P_ = function (n, e, r) {
    var o,
        u = n[0],
        a = n[n.length - 1],
        c = i(u, a, null == e ? 10 : e);switch ((r = He(null == r ? ",f" : r)).type) {case "s":
        var s = Math.max(Math.abs(u), Math.abs(a));return null != r.precision || isNaN(o = Np(c, s)) || (r.precision = o), t.formatPrefix(r, s);case "":case "e":case "g":case "p":case "r":
        null != r.precision || isNaN(o = Sp(c, Math.max(Math.abs(u), Math.abs(a)))) || (r.precision = o - ("e" === r.type));break;case "f":case "%":
        null != r.precision || isNaN(o = kp(c)) || (r.precision = o - 2 * ("%" === r.type));}return t.format(r);
  },
      R_ = function (t, n) {
    var e,
        r = 0,
        i = (t = t.slice()).length - 1,
        o = t[r],
        u = t[i];return u < o && (e = r, r = i, i = e, e = o, o = u, u = e), t[r] = n.floor(o), t[i] = n.ceil(u), t;
  },
      L_ = new Date(),
      q_ = new Date(),
      U_ = Mu(function () {}, function (t, n) {
    t.setTime(+t + n);
  }, function (t, n) {
    return n - t;
  });U_.every = function (t) {
    return t = Math.floor(t), isFinite(t) && t > 0 ? t > 1 ? Mu(function (n) {
      n.setTime(Math.floor(n / t) * t);
    }, function (n, e) {
      n.setTime(+n + e * t);
    }, function (n, e) {
      return (e - n) / t;
    }) : U_ : null;
  };var D_ = U_.range,
      O_ = 6e4,
      F_ = 6048e5,
      I_ = Mu(function (t) {
    t.setTime(1e3 * Math.floor(t / 1e3));
  }, function (t, n) {
    t.setTime(+t + 1e3 * n);
  }, function (t, n) {
    return (n - t) / 1e3;
  }, function (t) {
    return t.getUTCSeconds();
  }),
      Y_ = I_.range,
      B_ = Mu(function (t) {
    t.setTime(Math.floor(t / O_) * O_);
  }, function (t, n) {
    t.setTime(+t + n * O_);
  }, function (t, n) {
    return (n - t) / O_;
  }, function (t) {
    return t.getMinutes();
  }),
      j_ = B_.range,
      H_ = Mu(function (t) {
    var n = t.getTimezoneOffset() * O_ % 36e5;n < 0 && (n += 36e5), t.setTime(36e5 * Math.floor((+t - n) / 36e5) + n);
  }, function (t, n) {
    t.setTime(+t + 36e5 * n);
  }, function (t, n) {
    return (n - t) / 36e5;
  }, function (t) {
    return t.getHours();
  }),
      X_ = H_.range,
      $_ = Mu(function (t) {
    t.setHours(0, 0, 0, 0);
  }, function (t, n) {
    t.setDate(t.getDate() + n);
  }, function (t, n) {
    return (n - t - (n.getTimezoneOffset() - t.getTimezoneOffset()) * O_) / 864e5;
  }, function (t) {
    return t.getDate() - 1;
  }),
      V_ = $_.range,
      W_ = Tu(0),
      Z_ = Tu(1),
      G_ = Tu(2),
      J_ = Tu(3),
      Q_ = Tu(4),
      K_ = Tu(5),
      ty = Tu(6),
      ny = W_.range,
      ey = Z_.range,
      ry = G_.range,
      iy = J_.range,
      oy = Q_.range,
      uy = K_.range,
      ay = ty.range,
      cy = Mu(function (t) {
    t.setDate(1), t.setHours(0, 0, 0, 0);
  }, function (t, n) {
    t.setMonth(t.getMonth() + n);
  }, function (t, n) {
    return n.getMonth() - t.getMonth() + 12 * (n.getFullYear() - t.getFullYear());
  }, function (t) {
    return t.getMonth();
  }),
      sy = cy.range,
      fy = Mu(function (t) {
    t.setMonth(0, 1), t.setHours(0, 0, 0, 0);
  }, function (t, n) {
    t.setFullYear(t.getFullYear() + n);
  }, function (t, n) {
    return n.getFullYear() - t.getFullYear();
  }, function (t) {
    return t.getFullYear();
  });fy.every = function (t) {
    return isFinite(t = Math.floor(t)) && t > 0 ? Mu(function (n) {
      n.setFullYear(Math.floor(n.getFullYear() / t) * t), n.setMonth(0, 1), n.setHours(0, 0, 0, 0);
    }, function (n, e) {
      n.setFullYear(n.getFullYear() + e * t);
    }) : null;
  };var ly = fy.range,
      hy = Mu(function (t) {
    t.setUTCSeconds(0, 0);
  }, function (t, n) {
    t.setTime(+t + n * O_);
  }, function (t, n) {
    return (n - t) / O_;
  }, function (t) {
    return t.getUTCMinutes();
  }),
      py = hy.range,
      dy = Mu(function (t) {
    t.setUTCMinutes(0, 0, 0);
  }, function (t, n) {
    t.setTime(+t + 36e5 * n);
  }, function (t, n) {
    return (n - t) / 36e5;
  }, function (t) {
    return t.getUTCHours();
  }),
      vy = dy.range,
      _y = Mu(function (t) {
    t.setUTCHours(0, 0, 0, 0);
  }, function (t, n) {
    t.setUTCDate(t.getUTCDate() + n);
  }, function (t, n) {
    return (n - t) / 864e5;
  }, function (t) {
    return t.getUTCDate() - 1;
  }),
      yy = _y.range,
      gy = ku(0),
      my = ku(1),
      xy = ku(2),
      by = ku(3),
      wy = ku(4),
      My = ku(5),
      Ty = ku(6),
      ky = gy.range,
      Ny = my.range,
      Sy = xy.range,
      Ey = by.range,
      Ay = wy.range,
      Cy = My.range,
      zy = Ty.range,
      Py = Mu(function (t) {
    t.setUTCDate(1), t.setUTCHours(0, 0, 0, 0);
  }, function (t, n) {
    t.setUTCMonth(t.getUTCMonth() + n);
  }, function (t, n) {
    return n.getUTCMonth() - t.getUTCMonth() + 12 * (n.getUTCFullYear() - t.getUTCFullYear());
  }, function (t) {
    return t.getUTCMonth();
  }),
      Ry = Py.range,
      Ly = Mu(function (t) {
    t.setUTCMonth(0, 1), t.setUTCHours(0, 0, 0, 0);
  }, function (t, n) {
    t.setUTCFullYear(t.getUTCFullYear() + n);
  }, function (t, n) {
    return n.getUTCFullYear() - t.getUTCFullYear();
  }, function (t) {
    return t.getUTCFullYear();
  });Ly.every = function (t) {
    return isFinite(t = Math.floor(t)) && t > 0 ? Mu(function (n) {
      n.setUTCFullYear(Math.floor(n.getUTCFullYear() / t) * t), n.setUTCMonth(0, 1), n.setUTCHours(0, 0, 0, 0);
    }, function (n, e) {
      n.setUTCFullYear(n.getUTCFullYear() + e * t);
    }) : null;
  };var qy,
      Uy = Ly.range,
      Dy = { "-": "", _: " ", 0: "0" },
      Oy = /^\s*\d+/,
      Fy = /^%/,
      Iy = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;Ma({ dateTime: "%x, %X", date: "%-m/%-d/%Y", time: "%-I:%M:%S %p", periods: ["AM", "PM"], days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"] });var Yy = Date.prototype.toISOString ? function (t) {
    return t.toISOString();
  } : t.utcFormat("%Y-%m-%dT%H:%M:%S.%LZ"),
      By = +new Date("2000-01-01T00:00:00.000Z") ? function (t) {
    var n = new Date(t);return isNaN(n) ? null : n;
  } : t.utcParse("%Y-%m-%dT%H:%M:%S.%LZ"),
      jy = 1e3,
      Hy = 60 * jy,
      Xy = 60 * Hy,
      $y = 24 * Xy,
      Vy = 7 * $y,
      Wy = 30 * $y,
      Zy = 365 * $y,
      Gy = function (t) {
    return t.match(/.{6}/g).map(function (t) {
      return "#" + t;
    });
  },
      Jy = Gy("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),
      Qy = Gy("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),
      Ky = Gy("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),
      tg = Gy("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),
      ng = wl($t(300, .5, 0), $t(-240, .5, 1)),
      eg = wl($t(-100, .75, .35), $t(80, 1.5, .8)),
      rg = wl($t(260, .75, .35), $t(80, 1.5, .8)),
      ig = $t(),
      og = Sa(Gy("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),
      ug = Sa(Gy("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),
      ag = Sa(Gy("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),
      cg = Sa(Gy("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),
      sg = function (t) {
    return function () {
      return t;
    };
  },
      fg = Math.abs,
      lg = Math.atan2,
      hg = Math.cos,
      pg = Math.max,
      dg = Math.min,
      vg = Math.sin,
      _g = Math.sqrt,
      yg = 1e-12,
      gg = Math.PI,
      mg = gg / 2,
      xg = 2 * gg;Oa.prototype = { areaStart: function () {
      this._line = 0;
    }, areaEnd: function () {
      this._line = NaN;
    }, lineStart: function () {
      this._point = 0;
    }, lineEnd: function () {
      (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;
    }, point: function (t, n) {
      switch (t = +t, n = +n, this._point) {case 0:
          this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);break;case 1:
          this._point = 2;default:
          this._context.lineTo(t, n);}
    } };var bg = function (t) {
    return new Oa(t);
  },
      wg = function () {
    function t(t) {
      var a,
          c,
          s,
          f = t.length,
          l = !1;for (null == i && (u = o(s = ve())), a = 0; a <= f; ++a) !(a < f && r(c = t[a], a, t)) === l && ((l = !l) ? u.lineStart() : u.lineEnd()), l && u.point(+n(c, a, t), +e(c, a, t));if (s) return u = null, s + "" || null;
    }var n = Fa,
        e = Ia,
        r = sg(!0),
        i = null,
        o = bg,
        u = null;return t.x = function (e) {
      return arguments.length ? (n = "function" == typeof e ? e : sg(+e), t) : n;
    }, t.y = function (n) {
      return arguments.length ? (e = "function" == typeof n ? n : sg(+n), t) : e;
    }, t.defined = function (n) {
      return arguments.length ? (r = "function" == typeof n ? n : sg(!!n), t) : r;
    }, t.curve = function (n) {
      return arguments.length ? (o = n, null != i && (u = o(i)), t) : o;
    }, t.context = function (n) {
      return arguments.length ? (null == n ? i = u = null : u = o(i = n), t) : i;
    }, t;
  },
      Mg = function () {
    function t(t) {
      var n,
          f,
          l,
          h,
          p,
          d = t.length,
          v = !1,
          _ = new Array(d),
          y = new Array(d);for (null == a && (s = c(p = ve())), n = 0; n <= d; ++n) {
        if (!(n < d && u(h = t[n], n, t)) === v) if (v = !v) f = n, s.areaStart(), s.lineStart();else {
          for (s.lineEnd(), s.lineStart(), l = n - 1; l >= f; --l) s.point(_[l], y[l]);s.lineEnd(), s.areaEnd();
        }v && (_[n] = +e(h, n, t), y[n] = +i(h, n, t), s.point(r ? +r(h, n, t) : _[n], o ? +o(h, n, t) : y[n]));
      }if (p) return s = null, p + "" || null;
    }function n() {
      return wg().defined(u).curve(c).context(a);
    }var e = Fa,
        r = null,
        i = sg(0),
        o = Ia,
        u = sg(!0),
        a = null,
        c = bg,
        s = null;return t.x = function (n) {
      return arguments.length ? (e = "function" == typeof n ? n : sg(+n), r = null, t) : e;
    }, t.x0 = function (n) {
      return arguments.length ? (e = "function" == typeof n ? n : sg(+n), t) : e;
    }, t.x1 = function (n) {
      return arguments.length ? (r = null == n ? null : "function" == typeof n ? n : sg(+n), t) : r;
    }, t.y = function (n) {
      return arguments.length ? (i = "function" == typeof n ? n : sg(+n), o = null, t) : i;
    }, t.y0 = function (n) {
      return arguments.length ? (i = "function" == typeof n ? n : sg(+n), t) : i;
    }, t.y1 = function (n) {
      return arguments.length ? (o = null == n ? null : "function" == typeof n ? n : sg(+n), t) : o;
    }, t.lineX0 = t.lineY0 = function () {
      return n().x(e).y(i);
    }, t.lineY1 = function () {
      return n().x(e).y(o);
    }, t.lineX1 = function () {
      return n().x(r).y(i);
    }, t.defined = function (n) {
      return arguments.length ? (u = "function" == typeof n ? n : sg(!!n), t) : u;
    }, t.curve = function (n) {
      return arguments.length ? (c = n, null != a && (s = c(a)), t) : c;
    }, t.context = function (n) {
      return arguments.length ? (null == n ? a = s = null : s = c(a = n), t) : a;
    }, t;
  },
      Tg = function (t, n) {
    return n < t ? -1 : n > t ? 1 : n >= t ? 0 : NaN;
  },
      kg = function (t) {
    return t;
  },
      Ng = Ba(bg);Ya.prototype = { areaStart: function () {
      this._curve.areaStart();
    }, areaEnd: function () {
      this._curve.areaEnd();
    }, lineStart: function () {
      this._curve.lineStart();
    }, lineEnd: function () {
      this._curve.lineEnd();
    }, point: function (t, n) {
      this._curve.point(n * Math.sin(t), n * -Math.cos(t));
    } };var Sg = function () {
    return ja(wg().curve(Ng));
  },
      Eg = function () {
    var t = Mg().curve(Ng),
        n = t.curve,
        e = t.lineX0,
        r = t.lineX1,
        i = t.lineY0,
        o = t.lineY1;return t.angle = t.x, delete t.x, t.startAngle = t.x0, delete t.x0, t.endAngle = t.x1, delete t.x1, t.radius = t.y, delete t.y, t.innerRadius = t.y0, delete t.y0, t.outerRadius = t.y1, delete t.y1, t.lineStartAngle = function () {
      return ja(e());
    }, delete t.lineX0, t.lineEndAngle = function () {
      return ja(r());
    }, delete t.lineX1, t.lineInnerRadius = function () {
      return ja(i());
    }, delete t.lineY0, t.lineOuterRadius = function () {
      return ja(o());
    }, delete t.lineY1, t.curve = function (t) {
      return arguments.length ? n(Ba(t)) : n()._curve;
    }, t;
  },
      Ag = function (t, n) {
    return [(n = +n) * Math.cos(t -= Math.PI / 2), n * Math.sin(t)];
  },
      Cg = Array.prototype.slice,
      zg = { draw: function (t, n) {
      var e = Math.sqrt(n / gg);t.moveTo(e, 0), t.arc(0, 0, e, 0, xg);
    } },
      Pg = { draw: function (t, n) {
      var e = Math.sqrt(n / 5) / 2;t.moveTo(-3 * e, -e), t.lineTo(-e, -e), t.lineTo(-e, -3 * e), t.lineTo(e, -3 * e), t.lineTo(e, -e), t.lineTo(3 * e, -e), t.lineTo(3 * e, e), t.lineTo(e, e), t.lineTo(e, 3 * e), t.lineTo(-e, 3 * e), t.lineTo(-e, e), t.lineTo(-3 * e, e), t.closePath();
    } },
      Rg = Math.sqrt(1 / 3),
      Lg = 2 * Rg,
      qg = { draw: function (t, n) {
      var e = Math.sqrt(n / Lg),
          r = e * Rg;t.moveTo(0, -e), t.lineTo(r, 0), t.lineTo(0, e), t.lineTo(-r, 0), t.closePath();
    } },
      Ug = Math.sin(gg / 10) / Math.sin(7 * gg / 10),
      Dg = Math.sin(xg / 10) * Ug,
      Og = -Math.cos(xg / 10) * Ug,
      Fg = { draw: function (t, n) {
      var e = Math.sqrt(.8908130915292852 * n),
          r = Dg * e,
          i = Og * e;t.moveTo(0, -e), t.lineTo(r, i);for (var o = 1; o < 5; ++o) {
        var u = xg * o / 5,
            a = Math.cos(u),
            c = Math.sin(u);t.lineTo(c * e, -a * e), t.lineTo(a * r - c * i, c * r + a * i);
      }t.closePath();
    } },
      Ig = { draw: function (t, n) {
      var e = Math.sqrt(n),
          r = -e / 2;t.rect(r, r, e, e);
    } },
      Yg = Math.sqrt(3),
      Bg = { draw: function (t, n) {
      var e = -Math.sqrt(n / (3 * Yg));t.moveTo(0, 2 * e), t.lineTo(-Yg * e, -e), t.lineTo(Yg * e, -e), t.closePath();
    } },
      jg = -.5,
      Hg = Math.sqrt(3) / 2,
      Xg = 1 / Math.sqrt(12),
      $g = 3 * (Xg / 2 + 1),
      Vg = { draw: function (t, n) {
      var e = Math.sqrt(n / $g),
          r = e / 2,
          i = e * Xg,
          o = r,
          u = e * Xg + e,
          a = -o,
          c = u;t.moveTo(r, i), t.lineTo(o, u), t.lineTo(a, c), t.lineTo(jg * r - Hg * i, Hg * r + jg * i), t.lineTo(jg * o - Hg * u, Hg * o + jg * u), t.lineTo(jg * a - Hg * c, Hg * a + jg * c), t.lineTo(jg * r + Hg * i, jg * i - Hg * r), t.lineTo(jg * o + Hg * u, jg * u - Hg * o), t.lineTo(jg * a + Hg * c, jg * c - Hg * a), t.closePath();
    } },
      Wg = [zg, Pg, qg, Ig, Fg, Bg, Vg],
      Zg = function () {};Ja.prototype = { areaStart: function () {
      this._line = 0;
    }, areaEnd: function () {
      this._line = NaN;
    }, lineStart: function () {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN, this._point = 0;
    }, lineEnd: function () {
      switch (this._point) {case 3:
          Ga(this, this._x1, this._y1);case 2:
          this._context.lineTo(this._x1, this._y1);}(this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;
    }, point: function (t, n) {
      switch (t = +t, n = +n, this._point) {case 0:
          this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);break;case 1:
          this._point = 2;break;case 2:
          this._point = 3, this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);default:
          Ga(this, t, n);}this._x0 = this._x1, this._x1 = t, this._y0 = this._y1, this._y1 = n;
    } };Qa.prototype = { areaStart: Zg, areaEnd: Zg, lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN, this._point = 0;
    }, lineEnd: function () {
      switch (this._point) {case 1:
          this._context.moveTo(this._x2, this._y2), this._context.closePath();break;case 2:
          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3), this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3), this._context.closePath();break;case 3:
          this.point(this._x2, this._y2), this.point(this._x3, this._y3), this.point(this._x4, this._y4);}
    }, point: function (t, n) {
      switch (t = +t, n = +n, this._point) {case 0:
          this._point = 1, this._x2 = t, this._y2 = n;break;case 1:
          this._point = 2, this._x3 = t, this._y3 = n;break;case 2:
          this._point = 3, this._x4 = t, this._y4 = n, this._context.moveTo((this._x0 + 4 * this._x1 + t) / 6, (this._y0 + 4 * this._y1 + n) / 6);break;default:
          Ga(this, t, n);}this._x0 = this._x1, this._x1 = t, this._y0 = this._y1, this._y1 = n;
    } };Ka.prototype = { areaStart: function () {
      this._line = 0;
    }, areaEnd: function () {
      this._line = NaN;
    }, lineStart: function () {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN, this._point = 0;
    }, lineEnd: function () {
      (this._line || 0 !== this._line && 3 === this._point) && this._context.closePath(), this._line = 1 - this._line;
    }, point: function (t, n) {
      switch (t = +t, n = +n, this._point) {case 0:
          this._point = 1;break;case 1:
          this._point = 2;break;case 2:
          this._point = 3;var e = (this._x0 + 4 * this._x1 + t) / 6,
              r = (this._y0 + 4 * this._y1 + n) / 6;this._line ? this._context.lineTo(e, r) : this._context.moveTo(e, r);break;case 3:
          this._point = 4;default:
          Ga(this, t, n);}this._x0 = this._x1, this._x1 = t, this._y0 = this._y1, this._y1 = n;
    } };tc.prototype = { lineStart: function () {
      this._x = [], this._y = [], this._basis.lineStart();
    }, lineEnd: function () {
      var t = this._x,
          n = this._y,
          e = t.length - 1;if (e > 0) for (var r, i = t[0], o = n[0], u = t[e] - i, a = n[e] - o, c = -1; ++c <= e;) r = c / e, this._basis.point(this._beta * t[c] + (1 - this._beta) * (i + r * u), this._beta * n[c] + (1 - this._beta) * (o + r * a));this._x = this._y = null, this._basis.lineEnd();
    }, point: function (t, n) {
      this._x.push(+t), this._y.push(+n);
    } };var Gg = function t(n) {
    function e(t) {
      return 1 === n ? new Ja(t) : new tc(t, n);
    }return e.beta = function (n) {
      return t(+n);
    }, e;
  }(.85);ec.prototype = { areaStart: function () {
      this._line = 0;
    }, areaEnd: function () {
      this._line = NaN;
    }, lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._point = 0;
    }, lineEnd: function () {
      switch (this._point) {case 2:
          this._context.lineTo(this._x2, this._y2);break;case 3:
          nc(this, this._x1, this._y1);}(this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;
    }, point: function (t, n) {
      switch (t = +t, n = +n, this._point) {case 0:
          this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);break;case 1:
          this._point = 2, this._x1 = t, this._y1 = n;break;case 2:
          this._point = 3;default:
          nc(this, t, n);}this._x0 = this._x1, this._x1 = this._x2, this._x2 = t, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n;
    } };var Jg = function t(n) {
    function e(t) {
      return new ec(t, n);
    }return e.tension = function (n) {
      return t(+n);
    }, e;
  }(0);rc.prototype = { areaStart: Zg, areaEnd: Zg, lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN, this._point = 0;
    }, lineEnd: function () {
      switch (this._point) {case 1:
          this._context.moveTo(this._x3, this._y3), this._context.closePath();break;case 2:
          this._context.lineTo(this._x3, this._y3), this._context.closePath();break;case 3:
          this.point(this._x3, this._y3), this.point(this._x4, this._y4), this.point(this._x5, this._y5);}
    }, point: function (t, n) {
      switch (t = +t, n = +n, this._point) {case 0:
          this._point = 1, this._x3 = t, this._y3 = n;break;case 1:
          this._point = 2, this._context.moveTo(this._x4 = t, this._y4 = n);break;case 2:
          this._point = 3, this._x5 = t, this._y5 = n;break;default:
          nc(this, t, n);}this._x0 = this._x1, this._x1 = this._x2, this._x2 = t, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n;
    } };var Qg = function t(n) {
    function e(t) {
      return new rc(t, n);
    }return e.tension = function (n) {
      return t(+n);
    }, e;
  }(0);ic.prototype = { areaStart: function () {
      this._line = 0;
    }, areaEnd: function () {
      this._line = NaN;
    }, lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._point = 0;
    }, lineEnd: function () {
      (this._line || 0 !== this._line && 3 === this._point) && this._context.closePath(), this._line = 1 - this._line;
    }, point: function (t, n) {
      switch (t = +t, n = +n, this._point) {case 0:
          this._point = 1;break;case 1:
          this._point = 2;break;case 2:
          this._point = 3, this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);break;case 3:
          this._point = 4;default:
          nc(this, t, n);}this._x0 = this._x1, this._x1 = this._x2, this._x2 = t, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n;
    } };var Kg = function t(n) {
    function e(t) {
      return new ic(t, n);
    }return e.tension = function (n) {
      return t(+n);
    }, e;
  }(0);uc.prototype = { areaStart: function () {
      this._line = 0;
    }, areaEnd: function () {
      this._line = NaN;
    }, lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    }, lineEnd: function () {
      switch (this._point) {case 2:
          this._context.lineTo(this._x2, this._y2);break;case 3:
          this.point(this._x2, this._y2);}(this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;
    }, point: function (t, n) {
      if (t = +t, n = +n, this._point) {
        var e = this._x2 - t,
            r = this._y2 - n;this._l23_a = Math.sqrt(this._l23_2a = Math.pow(e * e + r * r, this._alpha));
      }switch (this._point) {case 0:
          this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);break;case 1:
          this._point = 2;break;case 2:
          this._point = 3;default:
          oc(this, t, n);}this._l01_a = this._l12_a, this._l12_a = this._l23_a, this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a, this._x0 = this._x1, this._x1 = this._x2, this._x2 = t, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n;
    } };var tm = function t(n) {
    function e(t) {
      return n ? new uc(t, n) : new ec(t, 0);
    }return e.alpha = function (n) {
      return t(+n);
    }, e;
  }(.5);ac.prototype = { areaStart: Zg, areaEnd: Zg, lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN, this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    }, lineEnd: function () {
      switch (this._point) {case 1:
          this._context.moveTo(this._x3, this._y3), this._context.closePath();break;case 2:
          this._context.lineTo(this._x3, this._y3), this._context.closePath();break;case 3:
          this.point(this._x3, this._y3), this.point(this._x4, this._y4), this.point(this._x5, this._y5);}
    }, point: function (t, n) {
      if (t = +t, n = +n, this._point) {
        var e = this._x2 - t,
            r = this._y2 - n;this._l23_a = Math.sqrt(this._l23_2a = Math.pow(e * e + r * r, this._alpha));
      }switch (this._point) {case 0:
          this._point = 1, this._x3 = t, this._y3 = n;break;case 1:
          this._point = 2, this._context.moveTo(this._x4 = t, this._y4 = n);break;case 2:
          this._point = 3, this._x5 = t, this._y5 = n;break;default:
          oc(this, t, n);}this._l01_a = this._l12_a, this._l12_a = this._l23_a, this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a, this._x0 = this._x1, this._x1 = this._x2, this._x2 = t, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n;
    } };var nm = function t(n) {
    function e(t) {
      return n ? new ac(t, n) : new rc(t, 0);
    }return e.alpha = function (n) {
      return t(+n);
    }, e;
  }(.5);cc.prototype = { areaStart: function () {
      this._line = 0;
    }, areaEnd: function () {
      this._line = NaN;
    }, lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    }, lineEnd: function () {
      (this._line || 0 !== this._line && 3 === this._point) && this._context.closePath(), this._line = 1 - this._line;
    }, point: function (t, n) {
      if (t = +t, n = +n, this._point) {
        var e = this._x2 - t,
            r = this._y2 - n;this._l23_a = Math.sqrt(this._l23_2a = Math.pow(e * e + r * r, this._alpha));
      }switch (this._point) {case 0:
          this._point = 1;break;case 1:
          this._point = 2;break;case 2:
          this._point = 3, this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);break;case 3:
          this._point = 4;default:
          oc(this, t, n);}this._l01_a = this._l12_a, this._l12_a = this._l23_a, this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a, this._x0 = this._x1, this._x1 = this._x2, this._x2 = t, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n;
    } };var em = function t(n) {
    function e(t) {
      return n ? new cc(t, n) : new ic(t, 0);
    }return e.alpha = function (n) {
      return t(+n);
    }, e;
  }(.5);sc.prototype = { areaStart: Zg, areaEnd: Zg, lineStart: function () {
      this._point = 0;
    }, lineEnd: function () {
      this._point && this._context.closePath();
    }, point: function (t, n) {
      t = +t, n = +n, this._point ? this._context.lineTo(t, n) : (this._point = 1, this._context.moveTo(t, n));
    } };dc.prototype = { areaStart: function () {
      this._line = 0;
    }, areaEnd: function () {
      this._line = NaN;
    }, lineStart: function () {
      this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN, this._point = 0;
    }, lineEnd: function () {
      switch (this._point) {case 2:
          this._context.lineTo(this._x1, this._y1);break;case 3:
          pc(this, this._t0, hc(this, this._t0));}(this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;
    }, point: function (t, n) {
      var e = NaN;if (t = +t, n = +n, t !== this._x1 || n !== this._y1) {
        switch (this._point) {case 0:
            this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);break;case 1:
            this._point = 2;break;case 2:
            this._point = 3, pc(this, hc(this, e = lc(this, t, n)), e);break;default:
            pc(this, this._t0, e = lc(this, t, n));}this._x0 = this._x1, this._x1 = t, this._y0 = this._y1, this._y1 = n, this._t0 = e;
      }
    } }, (vc.prototype = Object.create(dc.prototype)).point = function (t, n) {
    dc.prototype.point.call(this, n, t);
  }, _c.prototype = { moveTo: function (t, n) {
      this._context.moveTo(n, t);
    }, closePath: function () {
      this._context.closePath();
    }, lineTo: function (t, n) {
      this._context.lineTo(n, t);
    }, bezierCurveTo: function (t, n, e, r, i, o) {
      this._context.bezierCurveTo(n, t, r, e, o, i);
    } }, yc.prototype = { areaStart: function () {
      this._line = 0;
    }, areaEnd: function () {
      this._line = NaN;
    }, lineStart: function () {
      this._x = [], this._y = [];
    }, lineEnd: function () {
      var t = this._x,
          n = this._y,
          e = t.length;if (e) if (this._line ? this._context.lineTo(t[0], n[0]) : this._context.moveTo(t[0], n[0]), 2 === e) this._context.lineTo(t[1], n[1]);else for (var r = gc(t), i = gc(n), o = 0, u = 1; u < e; ++o, ++u) this._context.bezierCurveTo(r[0][o], i[0][o], r[1][o], i[1][o], t[u], n[u]);(this._line || 0 !== this._line && 1 === e) && this._context.closePath(), this._line = 1 - this._line, this._x = this._y = null;
    }, point: function (t, n) {
      this._x.push(+t), this._y.push(+n);
    } };mc.prototype = { areaStart: function () {
      this._line = 0;
    }, areaEnd: function () {
      this._line = NaN;
    }, lineStart: function () {
      this._x = this._y = NaN, this._point = 0;
    }, lineEnd: function () {
      0 < this._t && this._t < 1 && 2 === this._point && this._context.lineTo(this._x, this._y), (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line >= 0 && (this._t = 1 - this._t, this._line = 1 - this._line);
    }, point: function (t, n) {
      switch (t = +t, n = +n, this._point) {case 0:
          this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);break;case 1:
          this._point = 2;default:
          if (this._t <= 0) this._context.lineTo(this._x, n), this._context.lineTo(t, n);else {
            var e = this._x * (1 - this._t) + t * this._t;this._context.lineTo(e, this._y), this._context.lineTo(e, n);
          }}this._x = t, this._y = n;
    } };var rm = function (t, n) {
    if ((i = t.length) > 1) for (var e, r, i, o = 1, u = t[n[0]], a = u.length; o < i; ++o) for (r = u, u = t[n[o]], e = 0; e < a; ++e) u[e][1] += u[e][0] = isNaN(r[e][1]) ? r[e][0] : r[e][1];
  },
      im = function (t) {
    for (var n = t.length, e = new Array(n); --n >= 0;) e[n] = n;return e;
  },
      om = function (t) {
    var n = t.map(bc);return im(t).sort(function (t, e) {
      return n[t] - n[e];
    });
  },
      um = function (t) {
    return function () {
      return t;
    };
  };Tc.prototype = { constructor: Tc, insert: function (t, n) {
      var e, r, i;if (t) {
        if (n.P = t, n.N = t.N, t.N && (t.N.P = n), t.N = n, t.R) {
          for (t = t.R; t.L;) t = t.L;t.L = n;
        } else t.R = n;e = t;
      } else this._ ? (t = Ec(this._), n.P = null, n.N = t, t.P = t.L = n, e = t) : (n.P = n.N = null, this._ = n, e = null);for (n.L = n.R = null, n.U = e, n.C = !0, t = n; e && e.C;) e === (r = e.U).L ? (i = r.R) && i.C ? (e.C = i.C = !1, r.C = !0, t = r) : (t === e.R && (Nc(this, e), e = (t = e).U), e.C = !1, r.C = !0, Sc(this, r)) : (i = r.L) && i.C ? (e.C = i.C = !1, r.C = !0, t = r) : (t === e.L && (Sc(this, e), e = (t = e).U), e.C = !1, r.C = !0, Nc(this, r)), e = t.U;this._.C = !1;
    }, remove: function (t) {
      t.N && (t.N.P = t.P), t.P && (t.P.N = t.N), t.N = t.P = null;var n,
          e,
          r,
          i = t.U,
          o = t.L,
          u = t.R;if (e = o ? u ? Ec(u) : o : u, i ? i.L === t ? i.L = e : i.R = e : this._ = e, o && u ? (r = e.C, e.C = t.C, e.L = o, o.U = e, e !== u ? (i = e.U, e.U = t.U, t = e.R, i.L = t, e.R = u, u.U = e) : (e.U = i, i = e, t = e.R)) : (r = t.C, t = e), t && (t.U = i), !r) if (t && t.C) t.C = !1;else {
        do {
          if (t === this._) break;if (t === i.L) {
            if ((n = i.R).C && (n.C = !1, i.C = !0, Nc(this, i), n = i.R), n.L && n.L.C || n.R && n.R.C) {
              n.R && n.R.C || (n.L.C = !1, n.C = !0, Sc(this, n), n = i.R), n.C = i.C, i.C = n.R.C = !1, Nc(this, i), t = this._;break;
            }
          } else if ((n = i.L).C && (n.C = !1, i.C = !0, Sc(this, i), n = i.L), n.L && n.L.C || n.R && n.R.C) {
            n.L && n.L.C || (n.R.C = !1, n.C = !0, Nc(this, n), n = i.L), n.C = i.C, i.C = n.L.C = !1, Sc(this, i), t = this._;break;
          }n.C = !0, t = i, i = i.U;
        } while (!t.C);t && (t.C = !1);
      }
    } };var am,
      cm,
      sm,
      fm,
      lm,
      hm = [],
      pm = [],
      dm = 1e-6,
      vm = 1e-12;Kc.prototype = { constructor: Kc, polygons: function () {
      var t = this.edges;return this.cells.map(function (n) {
        var e = n.halfedges.map(function (e) {
          return Dc(n, t[e]);
        });return e.data = n.site.data, e;
      });
    }, triangles: function () {
      var t = [],
          n = this.edges;return this.cells.forEach(function (e, r) {
        if (o = (i = e.halfedges).length) for (var i, o, u, a = e.site, c = -1, s = n[i[o - 1]], f = s.left === a ? s.right : s.left; ++c < o;) u = f, f = (s = n[i[c]]).left === a ? s.right : s.left, u && f && r < u.index && r < f.index && Jc(a, u, f) < 0 && t.push([a.data, u.data, f.data]);
      }), t;
    }, links: function () {
      return this.edges.filter(function (t) {
        return t.right;
      }).map(function (t) {
        return { source: t.left.data, target: t.right.data };
      });
    }, find: function (t, n, e) {
      for (var r, i, o = this, u = o._found || 0, a = o.cells.length; !(i = o.cells[u]);) if (++u >= a) return null;var c = t - i.site[0],
          s = n - i.site[1],
          f = c * c + s * s;do {
        i = o.cells[r = u], u = null, i.halfedges.forEach(function (e) {
          var r = o.edges[e],
              a = r.left;if (a !== i.site && a || (a = r.right)) {
            var c = t - a[0],
                s = n - a[1],
                l = c * c + s * s;l < f && (f = l, u = a.index);
          }
        });
      } while (null !== u);return o._found = r, null == e || f <= e * e ? i.site : null;
    } };var _m = function (t) {
    return function () {
      return t;
    };
  };ns.prototype = { constructor: ns, scale: function (t) {
      return 1 === t ? this : new ns(this.k * t, this.x, this.y);
    }, translate: function (t, n) {
      return 0 === t & 0 === n ? this : new ns(this.k, this.x + this.k * t, this.y + this.k * n);
    }, apply: function (t) {
      return [t[0] * this.k + this.x, t[1] * this.k + this.y];
    }, applyX: function (t) {
      return t * this.k + this.x;
    }, applyY: function (t) {
      return t * this.k + this.y;
    }, invert: function (t) {
      return [(t[0] - this.x) / this.k, (t[1] - this.y) / this.k];
    }, invertX: function (t) {
      return (t - this.x) / this.k;
    }, invertY: function (t) {
      return (t - this.y) / this.k;
    }, rescaleX: function (t) {
      return t.copy().domain(t.range().map(this.invertX, this).map(t.invert, t));
    }, rescaleY: function (t) {
      return t.copy().domain(t.range().map(this.invertY, this).map(t.invert, t));
    }, toString: function () {
      return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
    } };var ym = new ns(1, 0, 0);es.prototype = ns.prototype;var gm = function () {
    t.event.preventDefault(), t.event.stopImmediatePropagation();
  };t.version = "4.10.2", t.bisect = hs, t.bisectRight = hs, t.bisectLeft = ps, t.ascending = ss, t.bisector = fs, t.cross = function (t, n, r) {
    var i,
        o,
        u,
        a,
        c = t.length,
        s = n.length,
        f = new Array(c * s);for (null == r && (r = e), i = u = 0; i < c; ++i) for (a = t[i], o = 0; o < s; ++o, ++u) f[u] = r(a, n[o]);return f;
  }, t.descending = function (t, n) {
    return n < t ? -1 : n > t ? 1 : n >= t ? 0 : NaN;
  }, t.deviation = _s, t.extent = ys, t.histogram = function () {
    function t(t) {
      var o,
          u,
          a = t.length,
          c = new Array(a);for (o = 0; o < a; ++o) c[o] = n(t[o], o, t);var s = e(c),
          f = s[0],
          l = s[1],
          h = r(c, f, l);Array.isArray(h) || (h = i(f, l, h), h = Ms(Math.ceil(f / h) * h, Math.floor(l / h) * h, h));for (var p = h.length; h[0] <= f;) h.shift(), --p;for (; h[p - 1] > l;) h.pop(), --p;var d,
          v = new Array(p + 1);for (o = 0; o <= p; ++o) (d = v[o] = []).x0 = o > 0 ? h[o - 1] : f, d.x1 = o < p ? h[o] : l;for (o = 0; o < a; ++o) f <= (u = c[o]) && u <= l && v[hs(h, u, 0, p)].push(t[o]);return v;
    }var n = ws,
        e = ys,
        r = Es;return t.value = function (e) {
      return arguments.length ? (n = "function" == typeof e ? e : bs(e), t) : n;
    }, t.domain = function (n) {
      return arguments.length ? (e = "function" == typeof n ? n : bs([n[0], n[1]]), t) : e;
    }, t.thresholds = function (n) {
      return arguments.length ? (r = "function" == typeof n ? n : bs(Array.isArray(n) ? ms.call(n) : n), t) : r;
    }, t;
  }, t.thresholdFreedmanDiaconis = function (t, n, e) {
    return t = xs.call(t, ds).sort(ss), Math.ceil((e - n) / (2 * (As(t, .75) - As(t, .25)) * Math.pow(t.length, -1 / 3)));
  }, t.thresholdScott = function (t, n, e) {
    return Math.ceil((e - n) / (3.5 * _s(t) * Math.pow(t.length, -1 / 3)));
  }, t.thresholdSturges = Es, t.max = function (t, n) {
    var e,
        r,
        i = t.length,
        o = -1;if (null == n) {
      for (; ++o < i;) if (null != (e = t[o]) && e >= e) for (r = e; ++o < i;) null != (e = t[o]) && e > r && (r = e);
    } else for (; ++o < i;) if (null != (e = n(t[o], o, t)) && e >= e) for (r = e; ++o < i;) null != (e = n(t[o], o, t)) && e > r && (r = e);return r;
  }, t.mean = function (t, n) {
    var e,
        r = t.length,
        i = r,
        o = -1,
        u = 0;if (null == n) for (; ++o < r;) isNaN(e = ds(t[o])) ? --i : u += e;else for (; ++o < r;) isNaN(e = ds(n(t[o], o, t))) ? --i : u += e;if (i) return u / i;
  }, t.median = function (t, n) {
    var e,
        r = t.length,
        i = -1,
        o = [];if (null == n) for (; ++i < r;) isNaN(e = ds(t[i])) || o.push(e);else for (; ++i < r;) isNaN(e = ds(n(t[i], i, t))) || o.push(e);return As(o.sort(ss), .5);
  }, t.merge = Cs, t.min = zs, t.pairs = function (t, n) {
    null == n && (n = e);for (var r = 0, i = t.length - 1, o = t[0], u = new Array(i < 0 ? 0 : i); r < i;) u[r] = n(o, o = t[++r]);return u;
  }, t.permute = function (t, n) {
    for (var e = n.length, r = new Array(e); e--;) r[e] = t[n[e]];return r;
  }, t.quantile = As, t.range = Ms, t.scan = function (t, n) {
    if (e = t.length) {
      var e,
          r,
          i = 0,
          o = 0,
          u = t[o];for (null == n && (n = ss); ++i < e;) (n(r = t[i], u) < 0 || 0 !== n(u, u)) && (u = r, o = i);return 0 === n(u, u) ? o : void 0;
    }
  }, t.shuffle = function (t, n, e) {
    for (var r, i, o = (null == e ? t.length : e) - (n = null == n ? 0 : +n); o;) i = Math.random() * o-- | 0, r = t[o + n], t[o + n] = t[i + n], t[i + n] = r;return t;
  }, t.sum = function (t, n) {
    var e,
        r = t.length,
        i = -1,
        o = 0;if (null == n) for (; ++i < r;) (e = +t[i]) && (o += e);else for (; ++i < r;) (e = +n(t[i], i, t)) && (o += e);return o;
  }, t.ticks = Ss, t.tickIncrement = r, t.tickStep = i, t.transpose = Ps, t.variance = vs, t.zip = function () {
    return Ps(arguments);
  }, t.axisTop = function (t) {
    return l(qs, t);
  }, t.axisRight = function (t) {
    return l(Us, t);
  }, t.axisBottom = function (t) {
    return l(Ds, t);
  }, t.axisLeft = function (t) {
    return l(Os, t);
  }, t.brush = function () {
    return he(Sh);
  }, t.brushX = function () {
    return he(kh);
  }, t.brushY = function () {
    return he(Nh);
  }, t.brushSelection = function (t) {
    var n = t.__brush;return n ? n.dim.output(n.selection) : null;
  }, t.chord = function () {
    function t(t) {
      var o,
          u,
          a,
          c,
          s,
          f,
          l = t.length,
          h = [],
          p = Ms(l),
          d = [],
          v = [],
          _ = v.groups = new Array(l),
          y = new Array(l * l);for (o = 0, s = -1; ++s < l;) {
        for (u = 0, f = -1; ++f < l;) u += t[s][f];h.push(u), d.push(Ms(l)), o += u;
      }for (e && p.sort(function (t, n) {
        return e(h[t], h[n]);
      }), r && d.forEach(function (n, e) {
        n.sort(function (n, i) {
          return r(t[e][n], t[e][i]);
        });
      }), c = (o = Oh(0, Dh - n * l) / o) ? n : Dh / l, u = 0, s = -1; ++s < l;) {
        for (a = u, f = -1; ++f < l;) {
          var g = p[s],
              m = d[g][f],
              x = t[g][m],
              b = u,
              w = u += x * o;y[m * l + g] = { index: g, subindex: m, startAngle: b, endAngle: w, value: x };
        }_[g] = { index: g, startAngle: a, endAngle: u, value: h[g] }, u += c;
      }for (s = -1; ++s < l;) for (f = s - 1; ++f < l;) {
        var M = y[f * l + s],
            T = y[s * l + f];(M.value || T.value) && v.push(M.value < T.value ? { source: T, target: M } : { source: M, target: T });
      }return i ? v.sort(i) : v;
    }var n = 0,
        e = null,
        r = null,
        i = null;return t.padAngle = function (e) {
      return arguments.length ? (n = Oh(0, e), t) : n;
    }, t.sortGroups = function (n) {
      return arguments.length ? (e = n, t) : e;
    }, t.sortSubgroups = function (n) {
      return arguments.length ? (r = n, t) : r;
    }, t.sortChords = function (n) {
      return arguments.length ? (null == n ? i = null : (i = pe(n))._ = n, t) : i && i._;
    }, t;
  }, t.ribbon = function () {
    function t() {
      var t,
          a = Fh.call(arguments),
          c = n.apply(this, a),
          s = e.apply(this, a),
          f = +r.apply(this, (a[0] = c, a)),
          l = i.apply(this, a) - Uh,
          h = o.apply(this, a) - Uh,
          p = f * Rh(l),
          d = f * Lh(l),
          v = +r.apply(this, (a[0] = s, a)),
          _ = i.apply(this, a) - Uh,
          y = o.apply(this, a) - Uh;if (u || (u = t = ve()), u.moveTo(p, d), u.arc(0, 0, f, l, h), l === _ && h === y || (u.quadraticCurveTo(0, 0, v * Rh(_), v * Lh(_)), u.arc(0, 0, v, _, y)), u.quadraticCurveTo(0, 0, p, d), u.closePath(), t) return u = null, t + "" || null;
    }var n = _e,
        e = ye,
        r = ge,
        i = me,
        o = xe,
        u = null;return t.radius = function (n) {
      return arguments.length ? (r = "function" == typeof n ? n : Ih(+n), t) : r;
    }, t.startAngle = function (n) {
      return arguments.length ? (i = "function" == typeof n ? n : Ih(+n), t) : i;
    }, t.endAngle = function (n) {
      return arguments.length ? (o = "function" == typeof n ? n : Ih(+n), t) : o;
    }, t.source = function (e) {
      return arguments.length ? (n = e, t) : n;
    }, t.target = function (n) {
      return arguments.length ? (e = n, t) : e;
    }, t.context = function (n) {
      return arguments.length ? (u = null == n ? null : n, t) : u;
    }, t;
  }, t.nest = function () {
    function t(n, i, u, a) {
      if (i >= o.length) return null != e && n.sort(e), null != r ? r(n) : n;for (var c, s, f, l = -1, h = n.length, p = o[i++], d = we(), v = u(); ++l < h;) (f = d.get(c = p(s = n[l]) + "")) ? f.push(s) : d.set(c, [s]);return d.each(function (n, e) {
        a(v, e, t(n, i, u, a));
      }), v;
    }function n(t, e) {
      if (++e > o.length) return t;var i,
          a = u[e - 1];return null != r && e >= o.length ? i = t.entries() : (i = [], t.each(function (t, r) {
        i.push({ key: r, values: n(t, e) });
      })), null != a ? i.sort(function (t, n) {
        return a(t.key, n.key);
      }) : i;
    }var e,
        r,
        i,
        o = [],
        u = [];return i = { object: function (n) {
        return t(n, 0, Me, Te);
      }, map: function (n) {
        return t(n, 0, ke, Ne);
      }, entries: function (e) {
        return n(t(e, 0, ke, Ne), 0);
      }, key: function (t) {
        return o.push(t), i;
      }, sortKeys: function (t) {
        return u[o.length - 1] = t, i;
      }, sortValues: function (t) {
        return e = t, i;
      }, rollup: function (t) {
        return r = t, i;
      } };
  }, t.set = Ee, t.map = we, t.keys = function (t) {
    var n = [];for (var e in t) n.push(e);return n;
  }, t.values = function (t) {
    var n = [];for (var e in t) n.push(t[e]);return n;
  }, t.entries = function (t) {
    var n = [];for (var e in t) n.push({ key: e, value: t[e] });return n;
  }, t.color = Tt, t.rgb = Et, t.hsl = Pt, t.lab = Ut, t.hcl = jt, t.cubehelix = $t, t.dispatch = h, t.drag = function () {
    function n(t) {
      t.on("mousedown.drag", e).filter(bt).on("touchstart.drag", o).on("touchmove.drag", u).on("touchend.drag touchcancel.drag", a).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }function e() {
      if (!p && d.apply(this, arguments)) {
        var n = c("mouse", v.apply(this, arguments), Ks, this, arguments);n && (cf(t.event.view).on("mousemove.drag", r, !0).on("mouseup.drag", i, !0), lf(t.event.view), vt(), l = !1, s = t.event.clientX, f = t.event.clientY, n("start"));
      }
    }function r() {
      if (ff(), !l) {
        var n = t.event.clientX - s,
            e = t.event.clientY - f;l = n * n + e * e > x;
      }y.mouse("drag");
    }function i() {
      cf(t.event.view).on("mousemove.drag mouseup.drag", null), _t(t.event.view, l), ff(), y.mouse("end");
    }function o() {
      if (d.apply(this, arguments)) {
        var n,
            e,
            r = t.event.changedTouches,
            i = v.apply(this, arguments),
            o = r.length;for (n = 0; n < o; ++n) (e = c(r[n].identifier, i, sf, this, arguments)) && (vt(), e("start"));
      }
    }function u() {
      var n,
          e,
          r = t.event.changedTouches,
          i = r.length;for (n = 0; n < i; ++n) (e = y[r[n].identifier]) && (ff(), e("drag"));
    }function a() {
      var n,
          e,
          r = t.event.changedTouches,
          i = r.length;for (p && clearTimeout(p), p = setTimeout(function () {
        p = null;
      }, 500), n = 0; n < i; ++n) (e = y[r[n].identifier]) && (vt(), e("end"));
    }function c(e, r, i, o, u) {
      var a,
          c,
          s,
          f = i(r, e),
          l = g.copy();if (N(new yt(n, "beforestart", a, e, m, f[0], f[1], 0, 0, l), function () {
        return null != (t.event.subject = a = _.apply(o, u)) && (c = a.x - f[0] || 0, s = a.y - f[1] || 0, !0);
      })) return function t(h) {
        var p,
            d = f;switch (h) {case "start":
            y[e] = t, p = m++;break;case "end":
            delete y[e], --m;case "drag":
            f = i(r, e), p = m;}N(new yt(n, h, a, e, p, f[0] + c, f[1] + s, f[0] - d[0], f[1] - d[1], l), l.apply, l, [h, o, u]);
      };
    }var s,
        f,
        l,
        p,
        d = gt,
        v = mt,
        _ = xt,
        y = {},
        g = h("start", "drag", "end"),
        m = 0,
        x = 0;return n.filter = function (t) {
      return arguments.length ? (d = "function" == typeof t ? t : hf(!!t), n) : d;
    }, n.container = function (t) {
      return arguments.length ? (v = "function" == typeof t ? t : hf(t), n) : v;
    }, n.subject = function (t) {
      return arguments.length ? (_ = "function" == typeof t ? t : hf(t), n) : _;
    }, n.on = function () {
      var t = g.on.apply(g, arguments);return t === g ? n : t;
    }, n.clickDistance = function (t) {
      return arguments.length ? (x = (t = +t) * t, n) : Math.sqrt(x);
    }, n;
  }, t.dragDisable = lf, t.dragEnable = _t, t.dsvFormat = Gh, t.csvParse = Qh, t.csvParseRows = Kh, t.csvFormat = tp, t.csvFormatRows = np, t.tsvParse = rp, t.tsvParseRows = ip, t.tsvFormat = op, t.tsvFormatRows = up, t.easeLinear = function (t) {
    return +t;
  }, t.easeQuad = Kn, t.easeQuadIn = function (t) {
    return t * t;
  }, t.easeQuadOut = function (t) {
    return t * (2 - t);
  }, t.easeQuadInOut = Kn, t.easeCubic = te, t.easeCubicIn = function (t) {
    return t * t * t;
  }, t.easeCubicOut = function (t) {
    return --t * t * t + 1;
  }, t.easeCubicInOut = te, t.easePoly = Gl, t.easePolyIn = Wl, t.easePolyOut = Zl, t.easePolyInOut = Gl, t.easeSin = ne, t.easeSinIn = function (t) {
    return 1 - Math.cos(t * Ql);
  }, t.easeSinOut = function (t) {
    return Math.sin(t * Ql);
  }, t.easeSinInOut = ne, t.easeExp = ee, t.easeExpIn = function (t) {
    return Math.pow(2, 10 * t - 10);
  }, t.easeExpOut = function (t) {
    return 1 - Math.pow(2, -10 * t);
  }, t.easeExpInOut = ee, t.easeCircle = re, t.easeCircleIn = function (t) {
    return 1 - Math.sqrt(1 - t * t);
  }, t.easeCircleOut = function (t) {
    return Math.sqrt(1 - --t * t);
  }, t.easeCircleInOut = re, t.easeBounce = ie, t.easeBounceIn = function (t) {
    return 1 - ie(1 - t);
  }, t.easeBounceOut = ie, t.easeBounceInOut = function (t) {
    return ((t *= 2) <= 1 ? 1 - ie(1 - t) : ie(t - 1) + 1) / 2;
  }, t.easeBack = lh, t.easeBackIn = sh, t.easeBackOut = fh, t.easeBackInOut = lh, t.easeElastic = dh, t.easeElasticIn = ph, t.easeElasticOut = dh, t.easeElasticInOut = vh, t.forceCenter = function (t, n) {
    function e() {
      var e,
          i,
          o = r.length,
          u = 0,
          a = 0;for (e = 0; e < o; ++e) u += (i = r[e]).x, a += i.y;for (u = u / o - t, a = a / o - n, e = 0; e < o; ++e) (i = r[e]).x -= u, i.y -= a;
    }var r;return null == t && (t = 0), null == n && (n = 0), e.initialize = function (t) {
      r = t;
    }, e.x = function (n) {
      return arguments.length ? (t = +n, e) : t;
    }, e.y = function (t) {
      return arguments.length ? (n = +t, e) : n;
    }, e;
  }, t.forceCollide = function (t) {
    function n() {
      for (var t, n, r, c, s, f, l, h = i.length, p = 0; p < a; ++p) for (n = qe(i, Oe, Fe).visitAfter(e), t = 0; t < h; ++t) r = i[t], f = o[r.index], l = f * f, c = r.x + r.vx, s = r.y + r.vy, n.visit(function (t, n, e, i, o) {
        var a = t.data,
            h = t.r,
            p = f + h;if (!a) return n > c + p || i < c - p || e > s + p || o < s - p;if (a.index > r.index) {
          var d = c - a.x - a.vx,
              v = s - a.y - a.vy,
              _ = d * d + v * v;_ < p * p && (0 === d && (d = cp(), _ += d * d), 0 === v && (v = cp(), _ += v * v), _ = (p - (_ = Math.sqrt(_))) / _ * u, r.vx += (d *= _) * (p = (h *= h) / (l + h)), r.vy += (v *= _) * p, a.vx -= d * (p = 1 - p), a.vy -= v * p);
        }
      });
    }function e(t) {
      if (t.data) return t.r = o[t.data.index];for (var n = t.r = 0; n < 4; ++n) t[n] && t[n].r > t.r && (t.r = t[n].r);
    }function r() {
      if (i) {
        var n,
            e,
            r = i.length;for (o = new Array(r), n = 0; n < r; ++n) e = i[n], o[e.index] = +t(e, n, i);
      }
    }var i,
        o,
        u = 1,
        a = 1;return "function" != typeof t && (t = ap(null == t ? 1 : +t)), n.initialize = function (t) {
      i = t, r();
    }, n.iterations = function (t) {
      return arguments.length ? (a = +t, n) : a;
    }, n.strength = function (t) {
      return arguments.length ? (u = +t, n) : u;
    }, n.radius = function (e) {
      return arguments.length ? (t = "function" == typeof e ? e : ap(+e), r(), n) : t;
    }, n;
  }, t.forceLink = function (t) {
    function n(n) {
      for (var e = 0, r = t.length; e < p; ++e) for (var i, a, c, f, l, h, d, v = 0; v < r; ++v) a = (i = t[v]).source, f = (c = i.target).x + c.vx - a.x - a.vx || cp(), l = c.y + c.vy - a.y - a.vy || cp(), f *= h = ((h = Math.sqrt(f * f + l * l)) - u[v]) / h * n * o[v], l *= h, c.vx -= f * (d = s[v]), c.vy -= l * d, a.vx += f * (d = 1 - d), a.vy += l * d;
    }function e() {
      if (a) {
        var n,
            e,
            l = a.length,
            h = t.length,
            p = we(a, f);for (n = 0, c = new Array(l); n < h; ++n) (e = t[n]).index = n, "object" != typeof e.source && (e.source = Ye(p, e.source)), "object" != typeof e.target && (e.target = Ye(p, e.target)), c[e.source.index] = (c[e.source.index] || 0) + 1, c[e.target.index] = (c[e.target.index] || 0) + 1;for (n = 0, s = new Array(h); n < h; ++n) e = t[n], s[n] = c[e.source.index] / (c[e.source.index] + c[e.target.index]);o = new Array(h), r(), u = new Array(h), i();
      }
    }function r() {
      if (a) for (var n = 0, e = t.length; n < e; ++n) o[n] = +l(t[n], n, t);
    }function i() {
      if (a) for (var n = 0, e = t.length; n < e; ++n) u[n] = +h(t[n], n, t);
    }var o,
        u,
        a,
        c,
        s,
        f = Ie,
        l = function (t) {
      return 1 / Math.min(c[t.source.index], c[t.target.index]);
    },
        h = ap(30),
        p = 1;return null == t && (t = []), n.initialize = function (t) {
      a = t, e();
    }, n.links = function (r) {
      return arguments.length ? (t = r, e(), n) : t;
    }, n.id = function (t) {
      return arguments.length ? (f = t, n) : f;
    }, n.iterations = function (t) {
      return arguments.length ? (p = +t, n) : p;
    }, n.strength = function (t) {
      return arguments.length ? (l = "function" == typeof t ? t : ap(+t), r(), n) : l;
    }, n.distance = function (t) {
      return arguments.length ? (h = "function" == typeof t ? t : ap(+t), i(), n) : h;
    }, n;
  }, t.forceManyBody = function () {
    function t(t) {
      var n,
          a = i.length,
          c = qe(i, Be, je).visitAfter(e);for (u = t, n = 0; n < a; ++n) o = i[n], c.visit(r);
    }function n() {
      if (i) {
        var t,
            n,
            e = i.length;for (a = new Array(e), t = 0; t < e; ++t) n = i[t], a[n.index] = +c(n, t, i);
      }
    }function e(t) {
      var n,
          e,
          r,
          i,
          o,
          u = 0;if (t.length) {
        for (r = i = o = 0; o < 4; ++o) (n = t[o]) && (e = n.value) && (u += e, r += e * n.x, i += e * n.y);t.x = r / u, t.y = i / u;
      } else {
        (n = t).x = n.data.x, n.y = n.data.y;do {
          u += a[n.data.index];
        } while (n = n.next);
      }t.value = u;
    }function r(t, n, e, r) {
      if (!t.value) return !0;var i = t.x - o.x,
          c = t.y - o.y,
          h = r - n,
          p = i * i + c * c;if (h * h / l < p) return p < f && (0 === i && (i = cp(), p += i * i), 0 === c && (c = cp(), p += c * c), p < s && (p = Math.sqrt(s * p)), o.vx += i * t.value * u / p, o.vy += c * t.value * u / p), !0;if (!(t.length || p >= f)) {
        (t.data !== o || t.next) && (0 === i && (i = cp(), p += i * i), 0 === c && (c = cp(), p += c * c), p < s && (p = Math.sqrt(s * p)));do {
          t.data !== o && (h = a[t.data.index] * u / p, o.vx += i * h, o.vy += c * h);
        } while (t = t.next);
      }
    }var i,
        o,
        u,
        a,
        c = ap(-30),
        s = 1,
        f = 1 / 0,
        l = .81;return t.initialize = function (t) {
      i = t, n();
    }, t.strength = function (e) {
      return arguments.length ? (c = "function" == typeof e ? e : ap(+e), n(), t) : c;
    }, t.distanceMin = function (n) {
      return arguments.length ? (s = n * n, t) : Math.sqrt(s);
    }, t.distanceMax = function (n) {
      return arguments.length ? (f = n * n, t) : Math.sqrt(f);
    }, t.theta = function (n) {
      return arguments.length ? (l = n * n, t) : Math.sqrt(l);
    }, t;
  }, t.forceSimulation = function (t) {
    function n() {
      e(), d.call("tick", o), u < a && (p.stop(), d.call("end", o));
    }function e() {
      var n,
          e,
          r = t.length;for (u += (s - u) * c, l.each(function (t) {
        t(u);
      }), n = 0; n < r; ++n) null == (e = t[n]).fx ? e.x += e.vx *= f : (e.x = e.fx, e.vx = 0), null == e.fy ? e.y += e.vy *= f : (e.y = e.fy, e.vy = 0);
    }function r() {
      for (var n, e = 0, r = t.length; e < r; ++e) {
        if (n = t[e], n.index = e, isNaN(n.x) || isNaN(n.y)) {
          var i = hp * Math.sqrt(e),
              o = e * pp;n.x = i * Math.cos(o), n.y = i * Math.sin(o);
        }(isNaN(n.vx) || isNaN(n.vy)) && (n.vx = n.vy = 0);
      }
    }function i(n) {
      return n.initialize && n.initialize(t), n;
    }var o,
        u = 1,
        a = .001,
        c = 1 - Math.pow(a, 1 / 300),
        s = 0,
        f = .6,
        l = we(),
        p = dn(n),
        d = h("tick", "end");return null == t && (t = []), r(), o = { tick: e, restart: function () {
        return p.restart(n), o;
      }, stop: function () {
        return p.stop(), o;
      }, nodes: function (n) {
        return arguments.length ? (t = n, r(), l.each(i), o) : t;
      }, alpha: function (t) {
        return arguments.length ? (u = +t, o) : u;
      }, alphaMin: function (t) {
        return arguments.length ? (a = +t, o) : a;
      }, alphaDecay: function (t) {
        return arguments.length ? (c = +t, o) : +c;
      }, alphaTarget: function (t) {
        return arguments.length ? (s = +t, o) : s;
      }, velocityDecay: function (t) {
        return arguments.length ? (f = 1 - t, o) : 1 - f;
      }, force: function (t, n) {
        return arguments.length > 1 ? (null == n ? l.remove(t) : l.set(t, i(n)), o) : l.get(t);
      }, find: function (n, e, r) {
        var i,
            o,
            u,
            a,
            c,
            s = 0,
            f = t.length;for (null == r ? r = 1 / 0 : r *= r, s = 0; s < f; ++s) (u = (i = n - (a = t[s]).x) * i + (o = e - a.y) * o) < r && (c = a, r = u);return c;
      }, on: function (t, n) {
        return arguments.length > 1 ? (d.on(t, n), o) : d.on(t);
      } };
  }, t.forceX = function (t) {
    function n(t) {
      for (var n, e = 0, u = r.length; e < u; ++e) (n = r[e]).vx += (o[e] - n.x) * i[e] * t;
    }function e() {
      if (r) {
        var n,
            e = r.length;for (i = new Array(e), o = new Array(e), n = 0; n < e; ++n) i[n] = isNaN(o[n] = +t(r[n], n, r)) ? 0 : +u(r[n], n, r);
      }
    }var r,
        i,
        o,
        u = ap(.1);return "function" != typeof t && (t = ap(null == t ? 0 : +t)), n.initialize = function (t) {
      r = t, e();
    }, n.strength = function (t) {
      return arguments.length ? (u = "function" == typeof t ? t : ap(+t), e(), n) : u;
    }, n.x = function (r) {
      return arguments.length ? (t = "function" == typeof r ? r : ap(+r), e(), n) : t;
    }, n;
  }, t.forceY = function (t) {
    function n(t) {
      for (var n, e = 0, u = r.length; e < u; ++e) (n = r[e]).vy += (o[e] - n.y) * i[e] * t;
    }function e() {
      if (r) {
        var n,
            e = r.length;for (i = new Array(e), o = new Array(e), n = 0; n < e; ++n) i[n] = isNaN(o[n] = +t(r[n], n, r)) ? 0 : +u(r[n], n, r);
      }
    }var r,
        i,
        o,
        u = ap(.1);return "function" != typeof t && (t = ap(null == t ? 0 : +t)), n.initialize = function (t) {
      r = t, e();
    }, n.strength = function (t) {
      return arguments.length ? (u = "function" == typeof t ? t : ap(+t), e(), n) : u;
    }, n.y = function (r) {
      return arguments.length ? (t = "function" == typeof r ? r : ap(+r), e(), n) : t;
    }, n;
  }, t.formatDefaultLocale = $e, t.formatLocale = Tp, t.formatSpecifier = He, t.precisionFixed = kp, t.precisionPrefix = Np, t.precisionRound = Sp, t.geoArea = function (t) {
    return Cd.reset(), Ed(t, zd), 2 * Cd;
  }, t.geoBounds = function (t) {
    var n, e, r, i, o, u, a;if (Dp = Up = -(Lp = qp = 1 / 0), Bp = [], Ed(t, Rd), e = Bp.length) {
      for (Bp.sort(br), n = 1, o = [r = Bp[0]]; n < e; ++n) wr(r, (i = Bp[n])[0]) || wr(r, i[1]) ? (xr(r[0], i[1]) > xr(r[0], r[1]) && (r[1] = i[1]), xr(i[0], r[1]) > xr(r[0], r[1]) && (r[0] = i[0])) : o.push(r = i);for (u = -1 / 0, n = 0, r = o[e = o.length - 1]; n <= e; r = i, ++n) i = o[n], (a = xr(r[1], i[0])) > u && (u = a, Lp = i[0], Up = r[1]);
    }return Bp = jp = null, Lp === 1 / 0 || qp === 1 / 0 ? [[NaN, NaN], [NaN, NaN]] : [[Lp, qp], [Up, Dp]];
  }, t.geoCentroid = function (t) {
    Hp = Xp = $p = Vp = Wp = Zp = Gp = Jp = Qp = Kp = td = 0, Ed(t, Ld);var n = Qp,
        e = Kp,
        r = td,
        i = n * n + e * e + r * r;return i < 1e-12 && (n = Zp, e = Gp, r = Jp, Xp < ad && (n = $p, e = Vp, r = Wp), (i = n * n + e * e + r * r) < 1e-12) ? [NaN, NaN] : [_d(e, n) * hd, Ge(r / Td(i)) * hd];
  }, t.geoCircle = function () {
    function t() {
      var t = r.apply(this, arguments),
          a = i.apply(this, arguments) * pd,
          c = o.apply(this, arguments) * pd;return n = [], e = Lr(-t[0] * pd, -t[1] * pd, 0).invert, Or(u, a, c, 1), t = { type: "Polygon", coordinates: [n] }, n = e = null, t;
    }var n,
        e,
        r = qd([0, 0]),
        i = qd(90),
        o = qd(6),
        u = { point: function (t, r) {
        n.push(t = e(t, r)), t[0] *= hd, t[1] *= hd;
      } };return t.center = function (n) {
      return arguments.length ? (r = "function" == typeof n ? n : qd([+n[0], +n[1]]), t) : r;
    }, t.radius = function (n) {
      return arguments.length ? (i = "function" == typeof n ? n : qd(+n), t) : i;
    }, t.precision = function (n) {
      return arguments.length ? (o = "function" == typeof n ? n : qd(+n), t) : o;
    }, t;
  }, t.geoClipExtent = function () {
    var t,
        n,
        e,
        r = 0,
        i = 0,
        o = 960,
        u = 500;return e = { stream: function (e) {
        return t && n === e ? t : t = Br(r, i, o, u)(n = e);
      }, extent: function (a) {
        return arguments.length ? (r = +a[0][0], i = +a[0][1], o = +a[1][0], u = +a[1][1], t = n = null, e) : [[r, i], [o, u]];
      } };
  }, t.geoContains = function (t, n) {
    return (t && sv.hasOwnProperty(t.type) ? sv[t.type] : $r)(t, n);
  }, t.geoDistance = cv, t.geoGraticule = ti, t.geoGraticule10 = function () {
    return ti()();
  }, t.geoInterpolate = function (t, n) {
    var e = t[0] * pd,
        r = t[1] * pd,
        i = n[0] * pd,
        o = n[1] * pd,
        u = yd(r),
        a = wd(r),
        c = yd(o),
        s = wd(o),
        f = u * yd(e),
        l = u * wd(e),
        h = c * yd(i),
        p = c * wd(i),
        d = 2 * Ge(Td(Je(o - r) + u * c * Je(i - e))),
        v = wd(d),
        _ = d ? function (t) {
      var n = wd(t *= d) / v,
          e = wd(d - t) / v,
          r = e * f + n * h,
          i = e * l + n * p,
          o = e * a + n * s;return [_d(i, r) * hd, _d(o, Td(r * r + i * i)) * hd];
    } : function () {
      return [e * hd, r * hd];
    };return _.distance = d, _;
  }, t.geoLength = ov, t.geoPath = function (t, n) {
    function e(t) {
      return t && ("function" == typeof o && i.pointRadius(+o.apply(this, arguments)), Ed(t, r(i))), i.result();
    }var r,
        i,
        o = 4.5;return e.area = function (t) {
      return Ed(t, r(dv)), dv.result();
    }, e.measure = function (t) {
      return Ed(t, r(Uv)), Uv.result();
    }, e.bounds = function (t) {
      return Ed(t, r(mv)), mv.result();
    }, e.centroid = function (t) {
      return Ed(t, r(Av)), Av.result();
    }, e.projection = function (n) {
      return arguments.length ? (r = null == n ? (t = null, lv) : (t = n).stream, e) : t;
    }, e.context = function (t) {
      return arguments.length ? (i = null == t ? (n = null, new yi()) : new di(n = t), "function" != typeof o && i.pointRadius(o), e) : n;
    }, e.pointRadius = function (t) {
      return arguments.length ? (o = "function" == typeof t ? t : (i.pointRadius(+t), +t), e) : o;
    }, e.projection(t).context(n);
  }, t.geoAlbers = Xv, t.geoAlbersUsa = function () {
    function t(t) {
      var n = t[0],
          e = t[1];return a = null, i.point(n, e), a || (o.point(n, e), a) || (u.point(n, e), a);
    }function n() {
      return e = r = null, t;
    }var e,
        r,
        i,
        o,
        u,
        a,
        c = Xv(),
        s = Hv().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
        f = Hv().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
        l = { point: function (t, n) {
        a = [t, n];
      } };return t.invert = function (t) {
      var n = c.scale(),
          e = c.translate(),
          r = (t[0] - e[0]) / n,
          i = (t[1] - e[1]) / n;return (i >= .12 && i < .234 && r >= -.425 && r < -.214 ? s : i >= .166 && i < .234 && r >= -.214 && r < -.115 ? f : c).invert(t);
    }, t.stream = function (t) {
      return e && r === t ? e : e = Ri([c.stream(r = t), s.stream(t), f.stream(t)]);
    }, t.precision = function (t) {
      return arguments.length ? (c.precision(t), s.precision(t), f.precision(t), n()) : c.precision();
    }, t.scale = function (n) {
      return arguments.length ? (c.scale(n), s.scale(.35 * n), f.scale(n), t.translate(c.translate())) : c.scale();
    }, t.translate = function (t) {
      if (!arguments.length) return c.translate();var e = c.scale(),
          r = +t[0],
          a = +t[1];return i = c.translate(t).clipExtent([[r - .455 * e, a - .238 * e], [r + .455 * e, a + .238 * e]]).stream(l), o = s.translate([r - .307 * e, a + .201 * e]).clipExtent([[r - .425 * e + ad, a + .12 * e + ad], [r - .214 * e - ad, a + .234 * e - ad]]).stream(l), u = f.translate([r - .205 * e, a + .212 * e]).clipExtent([[r - .214 * e + ad, a + .166 * e + ad], [r - .115 * e - ad, a + .234 * e - ad]]).stream(l), n();
    }, t.fitExtent = function (n, e) {
      return Ti(t, n, e);
    }, t.fitSize = function (n, e) {
      return ki(t, n, e);
    }, t.scale(1070);
  }, t.geoAzimuthalEqualArea = function () {
    return Ei($v).scale(124.75).clipAngle(179.999);
  }, t.geoAzimuthalEqualAreaRaw = $v, t.geoAzimuthalEquidistant = function () {
    return Ei(Vv).scale(79.4188).clipAngle(179.999);
  }, t.geoAzimuthalEquidistantRaw = Vv, t.geoConicConformal = function () {
    return Ci(Fi).scale(109.5).parallels([30, 30]);
  }, t.geoConicConformalRaw = Fi, t.geoConicEqualArea = Hv, t.geoConicEqualAreaRaw = Pi, t.geoConicEquidistant = function () {
    return Ci(Yi).scale(131.154).center([0, 13.9389]);
  }, t.geoConicEquidistantRaw = Yi, t.geoEquirectangular = function () {
    return Ei(Ii).scale(152.63);
  }, t.geoEquirectangularRaw = Ii, t.geoGnomonic = function () {
    return Ei(Bi).scale(144.049).clipAngle(60);
  }, t.geoGnomonicRaw = Bi, t.geoIdentity = function () {
    function t() {
      return i = o = null, u;
    }var n,
        e,
        r,
        i,
        o,
        u,
        a = 1,
        c = 0,
        s = 0,
        f = 1,
        l = 1,
        h = lv,
        p = null,
        d = lv;return u = { stream: function (t) {
        return i && o === t ? i : i = h(d(o = t));
      }, clipExtent: function (i) {
        return arguments.length ? (d = null == i ? (p = n = e = r = null, lv) : Br(p = +i[0][0], n = +i[0][1], e = +i[1][0], r = +i[1][1]), t()) : null == p ? null : [[p, n], [e, r]];
      }, scale: function (n) {
        return arguments.length ? (h = ji((a = +n) * f, a * l, c, s), t()) : a;
      }, translate: function (n) {
        return arguments.length ? (h = ji(a * f, a * l, c = +n[0], s = +n[1]), t()) : [c, s];
      }, reflectX: function (n) {
        return arguments.length ? (h = ji(a * (f = n ? -1 : 1), a * l, c, s), t()) : f < 0;
      }, reflectY: function (n) {
        return arguments.length ? (h = ji(a * f, a * (l = n ? -1 : 1), c, s), t()) : l < 0;
      }, fitExtent: function (t, n) {
        return Ti(u, t, n);
      }, fitSize: function (t, n) {
        return ki(u, t, n);
      } };
  }, t.geoProjection = Ei, t.geoProjectionMutator = Ai, t.geoMercator = function () {
    return Di(Ui).scale(961 / ld);
  }, t.geoMercatorRaw = Ui, t.geoOrthographic = function () {
    return Ei(Hi).scale(249.5).clipAngle(90 + ad);
  }, t.geoOrthographicRaw = Hi, t.geoStereographic = function () {
    return Ei(Xi).scale(250).clipAngle(142);
  }, t.geoStereographicRaw = Xi, t.geoTransverseMercator = function () {
    var t = Di($i),
        n = t.center,
        e = t.rotate;return t.center = function (t) {
      return arguments.length ? n([-t[1], t[0]]) : (t = n(), [t[1], -t[0]]);
    }, t.rotate = function (t) {
      return arguments.length ? e([t[0], t[1], t.length > 2 ? t[2] + 90 : 90]) : (t = e(), [t[0], t[1], t[2] - 90]);
    }, e([0, 0, 90]).scale(159.155);
  }, t.geoTransverseMercatorRaw = $i, t.geoRotation = Wd, t.geoStream = Ed, t.geoTransform = function (t) {
    return { stream: wi(t) };
  }, t.cluster = function () {
    function t(t) {
      var o,
          u = 0;t.eachAfter(function (t) {
        var e = t.children;e ? (t.x = Wi(e), t.y = Gi(e)) : (t.x = o ? u += n(t, o) : 0, t.y = 0, o = t);
      });var a = Qi(t),
          c = Ki(t),
          s = a.x - n(a, c) / 2,
          f = c.x + n(c, a) / 2;return t.eachAfter(i ? function (n) {
        n.x = (n.x - t.x) * e, n.y = (t.y - n.y) * r;
      } : function (n) {
        n.x = (n.x - s) / (f - s) * e, n.y = (1 - (t.y ? n.y / t.y : 1)) * r;
      });
    }var n = Vi,
        e = 1,
        r = 1,
        i = !1;return t.separation = function (e) {
      return arguments.length ? (n = e, t) : n;
    }, t.size = function (n) {
      return arguments.length ? (i = !1, e = +n[0], r = +n[1], t) : i ? null : [e, r];
    }, t.nodeSize = function (n) {
      return arguments.length ? (i = !0, e = +n[0], r = +n[1], t) : i ? [e, r] : null;
    }, t;
  }, t.hierarchy = eo, t.pack = function () {
    function t(t) {
      return t.x = e / 2, t.y = r / 2, n ? t.eachBefore(No(n)).eachAfter(So(i, .5)).eachBefore(Eo(1)) : t.eachBefore(No(ko)).eachAfter(So(To, 1)).eachAfter(So(i, t.r / Math.min(e, r))).eachBefore(Eo(Math.min(e, r) / (2 * t.r))), t;
    }var n = null,
        e = 1,
        r = 1,
        i = To;return t.radius = function (e) {
      return arguments.length ? (n = wo(e), t) : n;
    }, t.size = function (n) {
      return arguments.length ? (e = +n[0], r = +n[1], t) : [e, r];
    }, t.padding = function (n) {
      return arguments.length ? (i = "function" == typeof n ? n : Gv(+n), t) : i;
    }, t;
  }, t.packSiblings = function (t) {
    return bo(t), t;
  }, t.packEnclose = Zv, t.partition = function () {
    function t(t) {
      var u = t.height + 1;return t.x0 = t.y0 = i, t.x1 = e, t.y1 = r / u, t.eachBefore(n(r, u)), o && t.eachBefore(Jv), t;
    }function n(t, n) {
      return function (e) {
        e.children && Qv(e, e.x0, t * (e.depth + 1) / n, e.x1, t * (e.depth + 2) / n);var r = e.x0,
            o = e.y0,
            u = e.x1 - i,
            a = e.y1 - i;u < r && (r = u = (r + u) / 2), a < o && (o = a = (o + a) / 2), e.x0 = r, e.y0 = o, e.x1 = u, e.y1 = a;
      };
    }var e = 1,
        r = 1,
        i = 0,
        o = !1;return t.round = function (n) {
      return arguments.length ? (o = !!n, t) : o;
    }, t.size = function (n) {
      return arguments.length ? (e = +n[0], r = +n[1], t) : [e, r];
    }, t.padding = function (n) {
      return arguments.length ? (i = +n, t) : i;
    }, t;
  }, t.stratify = function () {
    function t(t) {
      var r,
          i,
          o,
          u,
          a,
          c,
          s,
          f = t.length,
          l = new Array(f),
          h = {};for (i = 0; i < f; ++i) r = t[i], a = l[i] = new uo(r), null != (c = n(r, i, t)) && (c += "") && (h[s = Kv + (a.id = c)] = s in h ? n_ : a);for (i = 0; i < f; ++i) if (a = l[i], null != (c = e(t[i], i, t)) && (c += "")) {
        if (!(u = h[Kv + c])) throw new Error("missing: " + c);if (u === n_) throw new Error("ambiguous: " + c);u.children ? u.children.push(a) : u.children = [a], a.parent = u;
      } else {
        if (o) throw new Error("multiple roots");o = a;
      }if (!o) throw new Error("no root");if (o.parent = t_, o.eachBefore(function (t) {
        t.depth = t.parent.depth + 1, --f;
      }).eachBefore(oo), o.parent = null, f > 0) throw new Error("cycle");return o;
    }var n = Ao,
        e = Co;return t.id = function (e) {
      return arguments.length ? (n = Mo(e), t) : n;
    }, t.parentId = function (n) {
      return arguments.length ? (e = Mo(n), t) : e;
    }, t;
  }, t.tree = function () {
    function t(t) {
      var r = Oo(t);if (r.eachAfter(n), r.parent.m = -r.z, r.eachBefore(e), c) t.eachBefore(i);else {
        var s = t,
            f = t,
            l = t;t.eachBefore(function (t) {
          t.x < s.x && (s = t), t.x > f.x && (f = t), t.depth > l.depth && (l = t);
        });var h = s === f ? 1 : o(s, f) / 2,
            p = h - s.x,
            d = u / (f.x + h + p),
            v = a / (l.depth || 1);t.eachBefore(function (t) {
          t.x = (t.x + p) * d, t.y = t.depth * v;
        });
      }return t;
    }function n(t) {
      var n = t.children,
          e = t.parent.children,
          i = t.i ? e[t.i - 1] : null;if (n) {
        qo(t);var u = (n[0].z + n[n.length - 1].z) / 2;i ? (t.z = i.z + o(t._, i._), t.m = t.z - u) : t.z = u;
      } else i && (t.z = i.z + o(t._, i._));t.parent.A = r(t, i, t.parent.A || e[0]);
    }function e(t) {
      t._.x = t.z + t.parent.m, t.m += t.parent.m;
    }function r(t, n, e) {
      if (n) {
        for (var r, i = t, u = t, a = n, c = i.parent.children[0], s = i.m, f = u.m, l = a.m, h = c.m; a = Ro(a), i = Po(i), a && i;) c = Po(c), (u = Ro(u)).a = t, (r = a.z + l - i.z - s + o(a._, i._)) > 0 && (Lo(Uo(a, t, e), t, r), s += r, f += r), l += a.m, s += i.m, h += c.m, f += u.m;a && !Ro(u) && (u.t = a, u.m += l - f), i && !Po(c) && (c.t = i, c.m += s - h, e = t);
      }return e;
    }function i(t) {
      t.x *= u, t.y = t.depth * a;
    }var o = zo,
        u = 1,
        a = 1,
        c = null;return t.separation = function (n) {
      return arguments.length ? (o = n, t) : o;
    }, t.size = function (n) {
      return arguments.length ? (c = !1, u = +n[0], a = +n[1], t) : c ? null : [u, a];
    }, t.nodeSize = function (n) {
      return arguments.length ? (c = !0, u = +n[0], a = +n[1], t) : c ? [u, a] : null;
    }, t;
  }, t.treemap = function () {
    function t(t) {
      return t.x0 = t.y0 = 0, t.x1 = i, t.y1 = o, t.eachBefore(n), u = [0], r && t.eachBefore(Jv), t;
    }function n(t) {
      var n = u[t.depth],
          r = t.x0 + n,
          i = t.y0 + n,
          o = t.x1 - n,
          h = t.y1 - n;o < r && (r = o = (r + o) / 2), h < i && (i = h = (i + h) / 2), t.x0 = r, t.y0 = i, t.x1 = o, t.y1 = h, t.children && (n = u[t.depth + 1] = a(t) / 2, r += l(t) - n, i += c(t) - n, o -= s(t) - n, h -= f(t) - n, o < r && (r = o = (r + o) / 2), h < i && (i = h = (i + h) / 2), e(t, r, i, o, h));
    }var e = i_,
        r = !1,
        i = 1,
        o = 1,
        u = [0],
        a = To,
        c = To,
        s = To,
        f = To,
        l = To;return t.round = function (n) {
      return arguments.length ? (r = !!n, t) : r;
    }, t.size = function (n) {
      return arguments.length ? (i = +n[0], o = +n[1], t) : [i, o];
    }, t.tile = function (n) {
      return arguments.length ? (e = Mo(n), t) : e;
    }, t.padding = function (n) {
      return arguments.length ? t.paddingInner(n).paddingOuter(n) : t.paddingInner();
    }, t.paddingInner = function (n) {
      return arguments.length ? (a = "function" == typeof n ? n : Gv(+n), t) : a;
    }, t.paddingOuter = function (n) {
      return arguments.length ? t.paddingTop(n).paddingRight(n).paddingBottom(n).paddingLeft(n) : t.paddingTop();
    }, t.paddingTop = function (n) {
      return arguments.length ? (c = "function" == typeof n ? n : Gv(+n), t) : c;
    }, t.paddingRight = function (n) {
      return arguments.length ? (s = "function" == typeof n ? n : Gv(+n), t) : s;
    }, t.paddingBottom = function (n) {
      return arguments.length ? (f = "function" == typeof n ? n : Gv(+n), t) : f;
    }, t.paddingLeft = function (n) {
      return arguments.length ? (l = "function" == typeof n ? n : Gv(+n), t) : l;
    }, t;
  }, t.treemapBinary = function (t, n, e, r, i) {
    function o(t, n, e, r, i, u, a) {
      if (t >= n - 1) {
        var s = c[t];return s.x0 = r, s.y0 = i, s.x1 = u, void (s.y1 = a);
      }for (var l = f[t], h = e / 2 + l, p = t + 1, d = n - 1; p < d;) {
        var v = p + d >>> 1;f[v] < h ? p = v + 1 : d = v;
      }h - f[p - 1] < f[p] - h && t + 1 < p && --p;var _ = f[p] - l,
          y = e - _;if (u - r > a - i) {
        var g = (r * y + u * _) / e;o(t, p, _, r, i, g, a), o(p, n, y, g, i, u, a);
      } else {
        var m = (i * y + a * _) / e;o(t, p, _, r, i, u, m), o(p, n, y, r, m, u, a);
      }
    }var u,
        a,
        c = t.children,
        s = c.length,
        f = new Array(s + 1);for (f[0] = a = u = 0; u < s; ++u) f[u + 1] = a += c[u].value;o(0, s, t.value, n, e, r, i);
  }, t.treemapDice = Qv, t.treemapSlice = e_, t.treemapSliceDice = function (t, n, e, r, i) {
    (1 & t.depth ? e_ : Qv)(t, n, e, r, i);
  }, t.treemapSquarify = i_, t.treemapResquarify = o_, t.interpolate = cl, t.interpolateArray = nl, t.interpolateBasis = Zf, t.interpolateBasisClosed = Gf, t.interpolateDate = el, t.interpolateNumber = rl, t.interpolateObject = il, t.interpolateRound = sl, t.interpolateString = al, t.interpolateTransformCss = pl, t.interpolateTransformSvg = dl, t.interpolateZoom = _l, t.interpolateRgb = Qf, t.interpolateRgbBasis = Kf, t.interpolateRgbBasisClosed = tl, t.interpolateHsl = yl, t.interpolateHslLong = gl, t.interpolateLab = function (t, n) {
    var e = Kt((t = Ut(t)).l, (n = Ut(n)).l),
        r = Kt(t.a, n.a),
        i = Kt(t.b, n.b),
        o = Kt(t.opacity, n.opacity);return function (n) {
      return t.l = e(n), t.a = r(n), t.b = i(n), t.opacity = o(n), t + "";
    };
  }, t.interpolateHcl = ml, t.interpolateHclLong = xl, t.interpolateCubehelix = bl, t.interpolateCubehelixLong = wl, t.quantize = function (t, n) {
    for (var e = new Array(n), r = 0; r < n; ++r) e[r] = t(r / (n - 1));return e;
  }, t.path = ve, t.polygonArea = function (t) {
    for (var n, e = -1, r = t.length, i = t[r - 1], o = 0; ++e < r;) n = i, i = t[e], o += n[1] * i[0] - n[0] * i[1];return o / 2;
  }, t.polygonCentroid = function (t) {
    for (var n, e, r = -1, i = t.length, o = 0, u = 0, a = t[i - 1], c = 0; ++r < i;) n = a, a = t[r], c += e = n[0] * a[1] - a[0] * n[1], o += (n[0] + a[0]) * e, u += (n[1] + a[1]) * e;return c *= 3, [o / c, u / c];
  }, t.polygonHull = function (t) {
    if ((e = t.length) < 3) return null;var n,
        e,
        r = new Array(e),
        i = new Array(e);for (n = 0; n < e; ++n) r[n] = [+t[n][0], +t[n][1], n];for (r.sort(Io), n = 0; n < e; ++n) i[n] = [r[n][0], -r[n][1]];var o = Yo(r),
        u = Yo(i),
        a = u[0] === o[0],
        c = u[u.length - 1] === o[o.length - 1],
        s = [];for (n = o.length - 1; n >= 0; --n) s.push(t[r[o[n]][2]]);for (n = +a; n < u.length - c; ++n) s.push(t[r[u[n]][2]]);return s;
  }, t.polygonContains = function (t, n) {
    for (var e, r, i = t.length, o = t[i - 1], u = n[0], a = n[1], c = o[0], s = o[1], f = !1, l = 0; l < i; ++l) e = (o = t[l])[0], (r = o[1]) > a != s > a && u < (c - e) * (a - r) / (s - r) + e && (f = !f), c = e, s = r;return f;
  }, t.polygonLength = function (t) {
    for (var n, e, r = -1, i = t.length, o = t[i - 1], u = o[0], a = o[1], c = 0; ++r < i;) n = u, e = a, n -= u = (o = t[r])[0], e -= a = o[1], c += Math.sqrt(n * n + e * e);return c;
  }, t.quadtree = qe, t.queue = Wo, t.randomUniform = f_, t.randomNormal = l_, t.randomLogNormal = h_, t.randomBates = d_, t.randomIrwinHall = p_, t.randomExponential = v_, t.request = __, t.html = g_, t.json = m_, t.text = x_, t.xml = b_, t.csv = M_, t.tsv = T_, t.scaleBand = Ko, t.scalePoint = function () {
    return tu(Ko().paddingInner(1));
  }, t.scaleIdentity = fu, t.scaleLinear = su, t.scaleLog = yu, t.scaleOrdinal = Qo, t.scaleImplicit = E_, t.scalePow = mu, t.scaleSqrt = function () {
    return mu().exponent(.5);
  }, t.scaleQuantile = xu, t.scaleQuantize = bu, t.scaleThreshold = wu, t.scaleTime = function () {
    return Na(fy, cy, W_, $_, H_, B_, I_, U_, t.timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]);
  }, t.scaleUtc = function () {
    return Na(Ly, Py, gy, _y, dy, hy, I_, U_, t.utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]);
  }, t.schemeCategory10 = Jy, t.schemeCategory20b = Qy, t.schemeCategory20c = Ky, t.schemeCategory20 = tg, t.interpolateCubehelixDefault = ng, t.interpolateRainbow = function (t) {
    (t < 0 || t > 1) && (t -= Math.floor(t));var n = Math.abs(t - .5);return ig.h = 360 * t - 100, ig.s = 1.5 - 1.5 * n, ig.l = .8 - .9 * n, ig + "";
  }, t.interpolateWarm = eg, t.interpolateCool = rg, t.interpolateViridis = og, t.interpolateMagma = ug, t.interpolateInferno = ag, t.interpolatePlasma = cg, t.scaleSequential = Ea, t.creator = Hs, t.local = m, t.matcher = Zs, t.mouse = Ks, t.namespace = js, t.namespaces = Bs, t.select = cf, t.selectAll = function (t) {
    return "string" == typeof t ? new pt([document.querySelectorAll(t)], [document.documentElement]) : new pt([null == t ? [] : t], af);
  }, t.selection = dt, t.selector = tf, t.selectorAll = nf, t.style = B, t.touch = sf, t.touches = function (t, n) {
    null == n && (n = Js().touches);for (var e = 0, r = n ? n.length : 0, i = new Array(r); e < r; ++e) i[e] = Qs(t, n[e]);return i;
  }, t.window = uf, t.customEvent = N, t.arc = function () {
    function t() {
      var t,
          s,
          f = +n.apply(this, arguments),
          l = +e.apply(this, arguments),
          h = o.apply(this, arguments) - mg,
          p = u.apply(this, arguments) - mg,
          d = fg(p - h),
          v = p > h;if (c || (c = t = ve()), l < f && (s = l, l = f, f = s), l > yg) {
        if (d > xg - yg) c.moveTo(l * hg(h), l * vg(h)), c.arc(0, 0, l, h, p, !v), f > yg && (c.moveTo(f * hg(p), f * vg(p)), c.arc(0, 0, f, p, h, v));else {
          var _,
              y,
              g = h,
              m = p,
              x = h,
              b = p,
              w = d,
              M = d,
              T = a.apply(this, arguments) / 2,
              k = T > yg && (i ? +i.apply(this, arguments) : _g(f * f + l * l)),
              N = dg(fg(l - f) / 2, +r.apply(this, arguments)),
              S = N,
              E = N;if (k > yg) {
            var A = Ca(k / f * vg(T)),
                C = Ca(k / l * vg(T));(w -= 2 * A) > yg ? (A *= v ? 1 : -1, x += A, b -= A) : (w = 0, x = b = (h + p) / 2), (M -= 2 * C) > yg ? (C *= v ? 1 : -1, g += C, m -= C) : (M = 0, g = m = (h + p) / 2);
          }var z = l * hg(g),
              P = l * vg(g),
              R = f * hg(b),
              L = f * vg(b);if (N > yg) {
            var q = l * hg(m),
                U = l * vg(m),
                D = f * hg(x),
                O = f * vg(x);if (d < gg) {
              var F = w > yg ? Ua(z, P, D, O, q, U, R, L) : [R, L],
                  I = z - F[0],
                  Y = P - F[1],
                  B = q - F[0],
                  j = U - F[1],
                  H = 1 / vg(Aa((I * B + Y * j) / (_g(I * I + Y * Y) * _g(B * B + j * j))) / 2),
                  X = _g(F[0] * F[0] + F[1] * F[1]);S = dg(N, (f - X) / (H - 1)), E = dg(N, (l - X) / (H + 1));
            }
          }M > yg ? E > yg ? (_ = Da(D, O, z, P, l, E, v), y = Da(q, U, R, L, l, E, v), c.moveTo(_.cx + _.x01, _.cy + _.y01), E < N ? c.arc(_.cx, _.cy, E, lg(_.y01, _.x01), lg(y.y01, y.x01), !v) : (c.arc(_.cx, _.cy, E, lg(_.y01, _.x01), lg(_.y11, _.x11), !v), c.arc(0, 0, l, lg(_.cy + _.y11, _.cx + _.x11), lg(y.cy + y.y11, y.cx + y.x11), !v), c.arc(y.cx, y.cy, E, lg(y.y11, y.x11), lg(y.y01, y.x01), !v))) : (c.moveTo(z, P), c.arc(0, 0, l, g, m, !v)) : c.moveTo(z, P), f > yg && w > yg ? S > yg ? (_ = Da(R, L, q, U, f, -S, v), y = Da(z, P, D, O, f, -S, v), c.lineTo(_.cx + _.x01, _.cy + _.y01), S < N ? c.arc(_.cx, _.cy, S, lg(_.y01, _.x01), lg(y.y01, y.x01), !v) : (c.arc(_.cx, _.cy, S, lg(_.y01, _.x01), lg(_.y11, _.x11), !v), c.arc(0, 0, f, lg(_.cy + _.y11, _.cx + _.x11), lg(y.cy + y.y11, y.cx + y.x11), v), c.arc(y.cx, y.cy, S, lg(y.y11, y.x11), lg(y.y01, y.x01), !v))) : c.arc(0, 0, f, b, x, v) : c.lineTo(R, L);
        }
      } else c.moveTo(0, 0);if (c.closePath(), t) return c = null, t + "" || null;
    }var n = za,
        e = Pa,
        r = sg(0),
        i = null,
        o = Ra,
        u = La,
        a = qa,
        c = null;return t.centroid = function () {
      var t = (+n.apply(this, arguments) + +e.apply(this, arguments)) / 2,
          r = (+o.apply(this, arguments) + +u.apply(this, arguments)) / 2 - gg / 2;return [hg(r) * t, vg(r) * t];
    }, t.innerRadius = function (e) {
      return arguments.length ? (n = "function" == typeof e ? e : sg(+e), t) : n;
    }, t.outerRadius = function (n) {
      return arguments.length ? (e = "function" == typeof n ? n : sg(+n), t) : e;
    }, t.cornerRadius = function (n) {
      return arguments.length ? (r = "function" == typeof n ? n : sg(+n), t) : r;
    }, t.padRadius = function (n) {
      return arguments.length ? (i = null == n ? null : "function" == typeof n ? n : sg(+n), t) : i;
    }, t.startAngle = function (n) {
      return arguments.length ? (o = "function" == typeof n ? n : sg(+n), t) : o;
    }, t.endAngle = function (n) {
      return arguments.length ? (u = "function" == typeof n ? n : sg(+n), t) : u;
    }, t.padAngle = function (n) {
      return arguments.length ? (a = "function" == typeof n ? n : sg(+n), t) : a;
    }, t.context = function (n) {
      return arguments.length ? (c = null == n ? null : n, t) : c;
    }, t;
  }, t.area = Mg, t.line = wg, t.pie = function () {
    function t(t) {
      var a,
          c,
          s,
          f,
          l,
          h = t.length,
          p = 0,
          d = new Array(h),
          v = new Array(h),
          _ = +i.apply(this, arguments),
          y = Math.min(xg, Math.max(-xg, o.apply(this, arguments) - _)),
          g = Math.min(Math.abs(y) / h, u.apply(this, arguments)),
          m = g * (y < 0 ? -1 : 1);for (a = 0; a < h; ++a) (l = v[d[a] = a] = +n(t[a], a, t)) > 0 && (p += l);for (null != e ? d.sort(function (t, n) {
        return e(v[t], v[n]);
      }) : null != r && d.sort(function (n, e) {
        return r(t[n], t[e]);
      }), a = 0, s = p ? (y - h * m) / p : 0; a < h; ++a, _ = f) c = d[a], f = _ + ((l = v[c]) > 0 ? l * s : 0) + m, v[c] = { data: t[c], index: a, value: l, startAngle: _, endAngle: f, padAngle: g };return v;
    }var n = kg,
        e = Tg,
        r = null,
        i = sg(0),
        o = sg(xg),
        u = sg(0);return t.value = function (e) {
      return arguments.length ? (n = "function" == typeof e ? e : sg(+e), t) : n;
    }, t.sortValues = function (n) {
      return arguments.length ? (e = n, r = null, t) : e;
    }, t.sort = function (n) {
      return arguments.length ? (r = n, e = null, t) : r;
    }, t.startAngle = function (n) {
      return arguments.length ? (i = "function" == typeof n ? n : sg(+n), t) : i;
    }, t.endAngle = function (n) {
      return arguments.length ? (o = "function" == typeof n ? n : sg(+n), t) : o;
    }, t.padAngle = function (n) {
      return arguments.length ? (u = "function" == typeof n ? n : sg(+n), t) : u;
    }, t;
  }, t.areaRadial = Eg, t.radialArea = Eg, t.lineRadial = Sg, t.radialLine = Sg, t.pointRadial = Ag, t.linkHorizontal = function () {
    return $a(Va);
  }, t.linkVertical = function () {
    return $a(Wa);
  }, t.linkRadial = function () {
    var t = $a(Za);return t.angle = t.x, delete t.x, t.radius = t.y, delete t.y, t;
  }, t.symbol = function () {
    function t() {
      var t;if (r || (r = t = ve()), n.apply(this, arguments).draw(r, +e.apply(this, arguments)), t) return r = null, t + "" || null;
    }var n = sg(zg),
        e = sg(64),
        r = null;return t.type = function (e) {
      return arguments.length ? (n = "function" == typeof e ? e : sg(e), t) : n;
    }, t.size = function (n) {
      return arguments.length ? (e = "function" == typeof n ? n : sg(+n), t) : e;
    }, t.context = function (n) {
      return arguments.length ? (r = null == n ? null : n, t) : r;
    }, t;
  }, t.symbols = Wg, t.symbolCircle = zg, t.symbolCross = Pg, t.symbolDiamond = qg, t.symbolSquare = Ig, t.symbolStar = Fg, t.symbolTriangle = Bg, t.symbolWye = Vg, t.curveBasisClosed = function (t) {
    return new Qa(t);
  }, t.curveBasisOpen = function (t) {
    return new Ka(t);
  }, t.curveBasis = function (t) {
    return new Ja(t);
  }, t.curveBundle = Gg, t.curveCardinalClosed = Qg, t.curveCardinalOpen = Kg, t.curveCardinal = Jg, t.curveCatmullRomClosed = nm, t.curveCatmullRomOpen = em, t.curveCatmullRom = tm, t.curveLinearClosed = function (t) {
    return new sc(t);
  }, t.curveLinear = bg, t.curveMonotoneX = function (t) {
    return new dc(t);
  }, t.curveMonotoneY = function (t) {
    return new vc(t);
  }, t.curveNatural = function (t) {
    return new yc(t);
  }, t.curveStep = function (t) {
    return new mc(t, .5);
  }, t.curveStepAfter = function (t) {
    return new mc(t, 1);
  }, t.curveStepBefore = function (t) {
    return new mc(t, 0);
  }, t.stack = function () {
    function t(t) {
      var o,
          u,
          a = n.apply(this, arguments),
          c = t.length,
          s = a.length,
          f = new Array(s);for (o = 0; o < s; ++o) {
        for (var l, h = a[o], p = f[o] = new Array(c), d = 0; d < c; ++d) p[d] = l = [0, +i(t[d], h, d, t)], l.data = t[d];p.key = h;
      }for (o = 0, u = e(f); o < s; ++o) f[u[o]].index = o;return r(f, u), f;
    }var n = sg([]),
        e = im,
        r = rm,
        i = xc;return t.keys = function (e) {
      return arguments.length ? (n = "function" == typeof e ? e : sg(Cg.call(e)), t) : n;
    }, t.value = function (n) {
      return arguments.length ? (i = "function" == typeof n ? n : sg(+n), t) : i;
    }, t.order = function (n) {
      return arguments.length ? (e = null == n ? im : "function" == typeof n ? n : sg(Cg.call(n)), t) : e;
    }, t.offset = function (n) {
      return arguments.length ? (r = null == n ? rm : n, t) : r;
    }, t;
  }, t.stackOffsetExpand = function (t, n) {
    if ((r = t.length) > 0) {
      for (var e, r, i, o = 0, u = t[0].length; o < u; ++o) {
        for (i = e = 0; e < r; ++e) i += t[e][o][1] || 0;if (i) for (e = 0; e < r; ++e) t[e][o][1] /= i;
      }rm(t, n);
    }
  }, t.stackOffsetDiverging = function (t, n) {
    if ((a = t.length) > 1) for (var e, r, i, o, u, a, c = 0, s = t[n[0]].length; c < s; ++c) for (o = u = 0, e = 0; e < a; ++e) (i = (r = t[n[e]][c])[1] - r[0]) >= 0 ? (r[0] = o, r[1] = o += i) : i < 0 ? (r[1] = u, r[0] = u += i) : r[0] = o;
  }, t.stackOffsetNone = rm, t.stackOffsetSilhouette = function (t, n) {
    if ((e = t.length) > 0) {
      for (var e, r = 0, i = t[n[0]], o = i.length; r < o; ++r) {
        for (var u = 0, a = 0; u < e; ++u) a += t[u][r][1] || 0;i[r][1] += i[r][0] = -a / 2;
      }rm(t, n);
    }
  }, t.stackOffsetWiggle = function (t, n) {
    if ((i = t.length) > 0 && (r = (e = t[n[0]]).length) > 0) {
      for (var e, r, i, o = 0, u = 1; u < r; ++u) {
        for (var a = 0, c = 0, s = 0; a < i; ++a) {
          for (var f = t[n[a]], l = f[u][1] || 0, h = (l - (f[u - 1][1] || 0)) / 2, p = 0; p < a; ++p) {
            var d = t[n[p]];h += (d[u][1] || 0) - (d[u - 1][1] || 0);
          }c += l, s += h * l;
        }e[u - 1][1] += e[u - 1][0] = o, c && (o -= s / c);
      }e[u - 1][1] += e[u - 1][0] = o, rm(t, n);
    }
  }, t.stackOrderAscending = om, t.stackOrderDescending = function (t) {
    return om(t).reverse();
  }, t.stackOrderInsideOut = function (t) {
    var n,
        e,
        r = t.length,
        i = t.map(bc),
        o = im(t).sort(function (t, n) {
      return i[n] - i[t];
    }),
        u = 0,
        a = 0,
        c = [],
        s = [];for (n = 0; n < r; ++n) e = o[n], u < a ? (u += i[e], c.push(e)) : (a += i[e], s.push(e));return s.reverse().concat(c);
  }, t.stackOrderNone = im, t.stackOrderReverse = function (t) {
    return im(t).reverse();
  }, t.timeInterval = Mu, t.timeMillisecond = U_, t.timeMilliseconds = D_, t.utcMillisecond = U_, t.utcMilliseconds = D_, t.timeSecond = I_, t.timeSeconds = Y_, t.utcSecond = I_, t.utcSeconds = Y_, t.timeMinute = B_, t.timeMinutes = j_, t.timeHour = H_, t.timeHours = X_, t.timeDay = $_, t.timeDays = V_, t.timeWeek = W_, t.timeWeeks = ny, t.timeSunday = W_, t.timeSundays = ny, t.timeMonday = Z_, t.timeMondays = ey, t.timeTuesday = G_, t.timeTuesdays = ry, t.timeWednesday = J_, t.timeWednesdays = iy, t.timeThursday = Q_, t.timeThursdays = oy, t.timeFriday = K_, t.timeFridays = uy, t.timeSaturday = ty, t.timeSaturdays = ay, t.timeMonth = cy, t.timeMonths = sy, t.timeYear = fy, t.timeYears = ly, t.utcMinute = hy, t.utcMinutes = py, t.utcHour = dy, t.utcHours = vy, t.utcDay = _y, t.utcDays = yy, t.utcWeek = gy, t.utcWeeks = ky, t.utcSunday = gy, t.utcSundays = ky, t.utcMonday = my, t.utcMondays = Ny, t.utcTuesday = xy, t.utcTuesdays = Sy, t.utcWednesday = by, t.utcWednesdays = Ey, t.utcThursday = wy, t.utcThursdays = Ay, t.utcFriday = My, t.utcFridays = Cy, t.utcSaturday = Ty, t.utcSaturdays = zy, t.utcMonth = Py, t.utcMonths = Ry, t.utcYear = Ly, t.utcYears = Uy, t.timeFormatDefaultLocale = Ma, t.timeFormatLocale = Au, t.isoFormat = Yy, t.isoParse = By, t.now = ln, t.timer = dn, t.timerFlush = vn, t.timeout = Pl, t.interval = function (t, n, e) {
    var r = new pn(),
        i = n;return null == n ? (r.restart(t, n, e), r) : (n = +n, e = null == e ? ln() : +e, r.restart(function o(u) {
      u += i, r.restart(o, i += n, e), t(u);
    }, n, e), r);
  }, t.transition = Jn, t.active = function (t, n) {
    var e,
        r,
        i = t.__transition;if (i) {
      n = null == n ? null : n + "";for (r in i) if ((e = i[r]).state > Ul && e.name === n) return new Gn([[t]], yh, n, +r);
    }return null;
  }, t.interrupt = jl, t.voronoi = function () {
    function t(t) {
      return new Kc(t.map(function (r, i) {
        var o = [Math.round(n(r, i, t) / dm) * dm, Math.round(e(r, i, t) / dm) * dm];return o.index = i, o.data = r, o;
      }), r);
    }var n = wc,
        e = Mc,
        r = null;return t.polygons = function (n) {
      return t(n).polygons();
    }, t.links = function (n) {
      return t(n).links();
    }, t.triangles = function (n) {
      return t(n).triangles();
    }, t.x = function (e) {
      return arguments.length ? (n = "function" == typeof e ? e : um(+e), t) : n;
    }, t.y = function (n) {
      return arguments.length ? (e = "function" == typeof n ? n : um(+n), t) : e;
    }, t.extent = function (n) {
      return arguments.length ? (r = null == n ? null : [[+n[0][0], +n[0][1]], [+n[1][0], +n[1][1]]], t) : r && [[r[0][0], r[0][1]], [r[1][0], r[1][1]]];
    }, t.size = function (n) {
      return arguments.length ? (r = null == n ? null : [[0, 0], [+n[0], +n[1]]], t) : r && [r[1][0] - r[0][0], r[1][1] - r[0][1]];
    }, t;
  }, t.zoom = function () {
    function n(t) {
      t.property("__zoom", us).on("wheel.zoom", s).on("mousedown.zoom", f).on("dblclick.zoom", l).filter(cs).on("touchstart.zoom", p).on("touchmove.zoom", d).on("touchend.zoom touchcancel.zoom", v).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }function e(t, n) {
      return (n = Math.max(b, Math.min(w, n))) === t.k ? t : new ns(n, t.x, t.y);
    }function r(t, n, e) {
      var r = n[0] - e[0] * t.k,
          i = n[1] - e[1] * t.k;return r === t.x && i === t.y ? t : new ns(t.k, r, i);
    }function i(t, n) {
      var e = t.invertX(n[0][0]) - M,
          r = t.invertX(n[1][0]) - T,
          i = t.invertY(n[0][1]) - k,
          o = t.invertY(n[1][1]) - S;return t.translate(r > e ? (e + r) / 2 : Math.min(0, e) || Math.max(0, r), o > i ? (i + o) / 2 : Math.min(0, i) || Math.max(0, o));
    }function o(t) {
      return [(+t[0][0] + +t[1][0]) / 2, (+t[0][1] + +t[1][1]) / 2];
    }function u(t, n, e) {
      t.on("start.zoom", function () {
        a(this, arguments).start();
      }).on("interrupt.zoom end.zoom", function () {
        a(this, arguments).end();
      }).tween("zoom", function () {
        var t = this,
            r = arguments,
            i = a(t, r),
            u = m.apply(t, r),
            c = e || o(u),
            s = Math.max(u[1][0] - u[0][0], u[1][1] - u[0][1]),
            f = t.__zoom,
            l = "function" == typeof n ? n.apply(t, r) : n,
            h = A(f.invert(c).concat(s / f.k), l.invert(c).concat(s / l.k));return function (t) {
          if (1 === t) t = l;else {
            var n = h(t),
                e = s / n[2];t = new ns(e, c[0] - n[0] * e, c[1] - n[1] * e);
          }i.zoom(null, t);
        };
      });
    }function a(t, n) {
      for (var e, r = 0, i = C.length; r < i; ++r) if ((e = C[r]).that === t) return e;return new c(t, n);
    }function c(t, n) {
      this.that = t, this.args = n, this.index = -1, this.active = 0, this.extent = m.apply(t, n);
    }function s() {
      if (g.apply(this, arguments)) {
        var t = a(this, arguments),
            n = this.__zoom,
            o = Math.max(b, Math.min(w, n.k * Math.pow(2, x.apply(this, arguments)))),
            u = Ks(this);if (t.wheel) t.mouse[0][0] === u[0] && t.mouse[0][1] === u[1] || (t.mouse[1] = n.invert(t.mouse[0] = u)), clearTimeout(t.wheel);else {
          if (n.k === o) return;t.mouse = [u, n.invert(u)], jl(this), t.start();
        }gm(), t.wheel = setTimeout(function () {
          t.wheel = null, t.end();
        }, R), t.zoom("mouse", i(r(e(n, o), t.mouse[0], t.mouse[1]), t.extent));
      }
    }function f() {
      if (!y && g.apply(this, arguments)) {
        var n = a(this, arguments),
            e = cf(t.event.view).on("mousemove.zoom", function () {
          if (gm(), !n.moved) {
            var e = t.event.clientX - u,
                o = t.event.clientY - c;n.moved = e * e + o * o > L;
          }n.zoom("mouse", i(r(n.that.__zoom, n.mouse[0] = Ks(n.that), n.mouse[1]), n.extent));
        }, !0).on("mouseup.zoom", function () {
          e.on("mousemove.zoom mouseup.zoom", null), _t(t.event.view, n.moved), gm(), n.end();
        }, !0),
            o = Ks(this),
            u = t.event.clientX,
            c = t.event.clientY;lf(t.event.view), rs(), n.mouse = [o, this.__zoom.invert(o)], jl(this), n.start();
      }
    }function l() {
      if (g.apply(this, arguments)) {
        var o = this.__zoom,
            a = Ks(this),
            c = o.invert(a),
            s = i(r(e(o, o.k * (t.event.shiftKey ? .5 : 2)), a, c), m.apply(this, arguments));gm(), E > 0 ? cf(this).transition().duration(E).call(u, s, a) : cf(this).call(n.transform, s);
      }
    }function p() {
      if (g.apply(this, arguments)) {
        var n,
            e,
            r,
            i,
            o = a(this, arguments),
            u = t.event.changedTouches,
            c = u.length;for (rs(), e = 0; e < c; ++e) r = u[e], i = [i = sf(this, u, r.identifier), this.__zoom.invert(i), r.identifier], o.touch0 ? o.touch1 || (o.touch1 = i) : (o.touch0 = i, n = !0);if (_ && (_ = clearTimeout(_), !o.touch1)) return o.end(), void ((i = cf(this).on("dblclick.zoom")) && i.apply(this, arguments));n && (_ = setTimeout(function () {
          _ = null;
        }, P), jl(this), o.start());
      }
    }function d() {
      var n,
          o,
          u,
          c,
          s = a(this, arguments),
          f = t.event.changedTouches,
          l = f.length;for (gm(), _ && (_ = clearTimeout(_)), n = 0; n < l; ++n) o = f[n], u = sf(this, f, o.identifier), s.touch0 && s.touch0[2] === o.identifier ? s.touch0[0] = u : s.touch1 && s.touch1[2] === o.identifier && (s.touch1[0] = u);if (o = s.that.__zoom, s.touch1) {
        var h = s.touch0[0],
            p = s.touch0[1],
            d = s.touch1[0],
            v = s.touch1[1],
            y = (y = d[0] - h[0]) * y + (y = d[1] - h[1]) * y,
            g = (g = v[0] - p[0]) * g + (g = v[1] - p[1]) * g;o = e(o, Math.sqrt(y / g)), u = [(h[0] + d[0]) / 2, (h[1] + d[1]) / 2], c = [(p[0] + v[0]) / 2, (p[1] + v[1]) / 2];
      } else {
        if (!s.touch0) return;u = s.touch0[0], c = s.touch0[1];
      }s.zoom("touch", i(r(o, u, c), s.extent));
    }function v() {
      var n,
          e,
          r = a(this, arguments),
          i = t.event.changedTouches,
          o = i.length;for (rs(), y && clearTimeout(y), y = setTimeout(function () {
        y = null;
      }, P), n = 0; n < o; ++n) e = i[n], r.touch0 && r.touch0[2] === e.identifier ? delete r.touch0 : r.touch1 && r.touch1[2] === e.identifier && delete r.touch1;r.touch1 && !r.touch0 && (r.touch0 = r.touch1, delete r.touch1), r.touch0 ? r.touch0[1] = this.__zoom.invert(r.touch0[0]) : r.end();
    }var _,
        y,
        g = is,
        m = os,
        x = as,
        b = 0,
        w = 1 / 0,
        M = -w,
        T = w,
        k = M,
        S = T,
        E = 250,
        A = _l,
        C = [],
        z = h("start", "zoom", "end"),
        P = 500,
        R = 150,
        L = 0;return n.transform = function (t, n) {
      var e = t.selection ? t.selection() : t;e.property("__zoom", us), t !== e ? u(t, n) : e.interrupt().each(function () {
        a(this, arguments).start().zoom(null, "function" == typeof n ? n.apply(this, arguments) : n).end();
      });
    }, n.scaleBy = function (t, e) {
      n.scaleTo(t, function () {
        return this.__zoom.k * ("function" == typeof e ? e.apply(this, arguments) : e);
      });
    }, n.scaleTo = function (t, u) {
      n.transform(t, function () {
        var t = m.apply(this, arguments),
            n = this.__zoom,
            a = o(t),
            c = n.invert(a);return i(r(e(n, "function" == typeof u ? u.apply(this, arguments) : u), a, c), t);
      });
    }, n.translateBy = function (t, e, r) {
      n.transform(t, function () {
        return i(this.__zoom.translate("function" == typeof e ? e.apply(this, arguments) : e, "function" == typeof r ? r.apply(this, arguments) : r), m.apply(this, arguments));
      });
    }, n.translateTo = function (t, e, r) {
      n.transform(t, function () {
        var t = m.apply(this, arguments),
            n = this.__zoom,
            u = o(t);return i(ym.translate(u[0], u[1]).scale(n.k).translate("function" == typeof e ? -e.apply(this, arguments) : -e, "function" == typeof r ? -r.apply(this, arguments) : -r), t);
      });
    }, c.prototype = { start: function () {
        return 1 == ++this.active && (this.index = C.push(this) - 1, this.emit("start")), this;
      }, zoom: function (t, n) {
        return this.mouse && "mouse" !== t && (this.mouse[1] = n.invert(this.mouse[0])), this.touch0 && "touch" !== t && (this.touch0[1] = n.invert(this.touch0[0])), this.touch1 && "touch" !== t && (this.touch1[1] = n.invert(this.touch1[0])), this.that.__zoom = n, this.emit("zoom"), this;
      }, end: function () {
        return 0 == --this.active && (C.splice(this.index, 1), this.index = -1, this.emit("end")), this;
      }, emit: function (t) {
        N(new ts(n, t, this.that.__zoom), z.apply, z, [t, this.that, this.args]);
      } }, n.wheelDelta = function (t) {
      return arguments.length ? (x = "function" == typeof t ? t : _m(+t), n) : x;
    }, n.filter = function (t) {
      return arguments.length ? (g = "function" == typeof t ? t : _m(!!t), n) : g;
    }, n.extent = function (t) {
      return arguments.length ? (m = "function" == typeof t ? t : _m([[+t[0][0], +t[0][1]], [+t[1][0], +t[1][1]]]), n) : m;
    }, n.scaleExtent = function (t) {
      return arguments.length ? (b = +t[0], w = +t[1], n) : [b, w];
    }, n.translateExtent = function (t) {
      return arguments.length ? (M = +t[0][0], T = +t[1][0], k = +t[0][1], S = +t[1][1], n) : [[M, k], [T, S]];
    }, n.duration = function (t) {
      return arguments.length ? (E = +t, n) : E;
    }, n.interpolate = function (t) {
      return arguments.length ? (A = t, n) : A;
    }, n.on = function () {
      var t = z.on.apply(z, arguments);return t === z ? n : t;
    }, n.clickDistance = function (t) {
      return arguments.length ? (L = (t = +t) * t, n) : Math.sqrt(L);
    }, n;
  }, t.zoomTransform = es, t.zoomIdentity = ym, Object.defineProperty(t, "__esModule", { value: !0 });
});

}).apply(this, arguments);

},{}],3:[function(require,module,exports){
_hmr["websocket:null"].initModule("lib/flubber.min.js", module);
(function(){
!function (t, n) {
  "object" == typeof exports && "undefined" != typeof module ? n(exports) : "function" == typeof define && define.amd ? define(["exports"], n) : n(t.flubber = t.flubber || {});
}(this, function (t) {
  "use strict";
  function n(t) {
    return 10 === t || 13 === t || 8232 === t || 8233 === t || 32 === t || 9 === t || 11 === t || 12 === t || 160 === t || t >= 5760 && an.indexOf(t) >= 0;
  }function e(t) {
    switch (32 | t) {case 109:case 122:case 108:case 104:case 118:case 99:case 115:case 113:case 116:case 97:case 114:
        return !0;}return !1;
  }function r(t) {
    return t >= 48 && t <= 57;
  }function i(t) {
    return t >= 48 && t <= 57 || 43 === t || 45 === t || 46 === t;
  }function a(t) {
    this.index = 0, this.path = t, this.max = t.length, this.result = [], this.param = 0, this.err = "", this.segmentStart = 0, this.data = [];
  }function o(t) {
    for (; t.index < t.max && n(t.path.charCodeAt(t.index));) t.index++;
  }function s(t) {
    var n,
        e = t.index,
        i = e,
        a = t.max,
        o = !1,
        s = !1,
        h = !1,
        u = !1;if (i >= a) return void (t.err = "SvgPath: missed param (at pos " + i + ")");if (n = t.path.charCodeAt(i), 43 !== n && 45 !== n || (i++, n = i < a ? t.path.charCodeAt(i) : 0), !r(n) && 46 !== n) return void (t.err = "SvgPath: param should start with 0..9 or `.` (at pos " + i + ")");if (46 !== n) {
      if (o = 48 === n, i++, n = i < a ? t.path.charCodeAt(i) : 0, o && i < a && n && r(n)) return void (t.err = "SvgPath: numbers started with `0` such as `09` are ilegal (at pos " + e + ")");for (; i < a && r(t.path.charCodeAt(i));) i++, s = !0;n = i < a ? t.path.charCodeAt(i) : 0;
    }if (46 === n) {
      for (u = !0, i++; r(t.path.charCodeAt(i));) i++, h = !0;n = i < a ? t.path.charCodeAt(i) : 0;
    }if (101 === n || 69 === n) {
      if (u && !s && !h) return void (t.err = "SvgPath: invalid float exponent (at pos " + i + ")");if (i++, n = i < a ? t.path.charCodeAt(i) : 0, 43 !== n && 45 !== n || i++, !(i < a && r(t.path.charCodeAt(i)))) return void (t.err = "SvgPath: invalid float exponent (at pos " + i + ")");for (; i < a && r(t.path.charCodeAt(i));) i++;
    }t.index = i, t.param = parseFloat(t.path.slice(e, i)) + 0;
  }function h(t) {
    var n, e;n = t.path[t.segmentStart], e = n.toLowerCase();var r = t.data;if ("m" === e && r.length > 2 && (t.result.push([n, r[0], r[1]]), r = r.slice(2), e = "l", n = "m" === n ? "l" : "L"), "r" === e) t.result.push([n].concat(r));else for (; r.length >= rn[e] && (t.result.push([n].concat(r.splice(0, rn[e]))), rn[e]););
  }function u(t) {
    var n,
        r,
        a,
        u,
        c = t.max;if (t.segmentStart = t.index, n = t.path.charCodeAt(t.index), !e(n)) return void (t.err = "SvgPath: bad command " + t.path[t.index] + " (at pos " + t.index + ")");if (a = rn[t.path[t.index].toLowerCase()], t.index++, o(t), t.data = [], !a) return void h(t);for (r = !1;;) {
      for (u = a; u > 0; u--) {
        if (s(t), t.err.length) return;t.data.push(t.param), o(t), r = !1, t.index < c && 44 === t.path.charCodeAt(t.index) && (t.index++, o(t), r = !0);
      }if (!r) {
        if (t.index >= t.max) break;if (!i(t.path.charCodeAt(t.index))) break;
      }
    }h(t);
  }function c(t, n) {
    return [t[0] * n[0] + t[2] * n[1], t[1] * n[0] + t[3] * n[1], t[0] * n[2] + t[2] * n[3], t[1] * n[2] + t[3] * n[3], t[0] * n[4] + t[2] * n[5] + t[4], t[1] * n[4] + t[3] * n[5] + t[5]];
  }function f() {
    if (!(this instanceof f)) return new f();this.queue = [], this.cache = null;
  }function l(t, n, e, r) {
    var i = t * r - n * e < 0 ? -1 : 1,
        a = Math.sqrt(t * t + n * n),
        o = Math.sqrt(t * t + n * n),
        s = t * e + n * r,
        h = s / (a * o);return h > 1 && (h = 1), h < -1 && (h = -1), i * Math.acos(h);
  }function p(t, n, e, r, i, a, o, s, h, u) {
    var c = u * (t - e) / 2 + h * (n - r) / 2,
        f = -h * (t - e) / 2 + u * (n - r) / 2,
        p = o * o,
        g = s * s,
        v = c * c,
        x = f * f,
        y = p * g - p * x - g * v;y < 0 && (y = 0), y /= p * x + g * v, y = Math.sqrt(y) * (i === a ? -1 : 1);var d = y * o / s * f,
        m = y * -s / o * c,
        M = u * d - h * m + (t + e) / 2,
        w = h * d + u * m + (n + r) / 2,
        b = (c - d) / o,
        L = (f - m) / s,
        A = (-c - d) / o,
        q = (-f - m) / s,
        k = l(1, 0, b, L),
        P = l(b, L, A, q);return 0 === a && P > 0 && (P -= ln), 1 === a && P < 0 && (P += ln), [M, w, k, P];
  }function g(t, n) {
    var e = 4 / 3 * Math.tan(n / 4),
        r = Math.cos(t),
        i = Math.sin(t),
        a = Math.cos(t + n),
        o = Math.sin(t + n);return [r, i, r - i * e, i + r * e, a + o * e, o - a * e, a, o];
  }function v(t, n, e) {
    if (!(this instanceof v)) return new v(t, n, e);this.rx = t, this.ry = n, this.ax = e;
  }function x(t) {
    if (!(this instanceof x)) return new x(t);var n = on(t);this.segments = n.segments, this.err = n.err, this.__stack = [];
  }function y(t) {
    var n = t.match(wn);return n ? n.map(Number) : [];
  }function d(t, n, e, r, i, a, o, s) {
    this.a = { x: t, y: n }, this.b = { x: e, y: r }, this.c = { x: i, y: a }, this.d = { x: o, y: s }, null !== o && void 0 !== o && null !== s && void 0 !== s ? (this.getArcLength = _, this.getPoint = L, this.getDerivative = M) : (this.getArcLength = A, this.getPoint = b, this.getDerivative = m), this.init();
  }function m(t, n, e) {
    return { x: 2 * (1 - e) * (t[1] - t[0]) + 2 * e * (t[2] - t[1]), y: 2 * (1 - e) * (n[1] - n[0]) + 2 * e * (n[2] - n[1]) };
  }function M(t, n, e) {
    return b([3 * (t[1] - t[0]), 3 * (t[2] - t[1]), 3 * (t[3] - t[2])], [3 * (n[1] - n[0]), 3 * (n[2] - n[1]), 3 * (n[3] - n[2])], e);
  }function w(t, n, e, r, i) {
    for (var a = 1, o = t / n, s = (t - e(r, i, o)) / n; a > .001;) {
      var h = e(r, i, o + s),
          u = e(r, i, o - s),
          c = Math.abs(t - h) / n,
          f = Math.abs(t - u) / n;c < a ? (a = c, o += s) : f < a ? (a = f, o -= s) : s /= 2;
    }return o;
  }function b(t, n, e) {
    return { x: (1 - e) * (1 - e) * t[0] + 2 * (1 - e) * e * t[1] + e * e * t[2], y: (1 - e) * (1 - e) * n[0] + 2 * (1 - e) * e * n[1] + e * e * n[2] };
  }function L(t, n, e) {
    return { x: (1 - e) * (1 - e) * (1 - e) * t[0] + 3 * (1 - e) * (1 - e) * e * t[1] + 3 * (1 - e) * e * e * t[2] + e * e * e * t[3], y: (1 - e) * (1 - e) * (1 - e) * n[0] + 3 * (1 - e) * (1 - e) * e * n[1] + 3 * (1 - e) * e * e * n[2] + e * e * e * n[3] };
  }function A(t, n, e) {
    void 0 === e && (e = 1);var r = t[0] - 2 * t[1] + t[2],
        i = n[0] - 2 * n[1] + n[2],
        a = 2 * t[1] - 2 * t[0],
        o = 2 * n[1] - 2 * n[0],
        s = 4 * (r * r + i * i),
        h = 4 * (r * a + i * o),
        u = a * a + o * o;if (0 === s) return e * Math.sqrt(Math.pow(t[2] - t[0], 2) + Math.pow(n[2] - n[0], 2));var c = h / (2 * s),
        f = u / s,
        l = e + c,
        p = f - c * c;return Math.sqrt(s) / 2 * (l * Math.sqrt(l * l + p) - c * Math.sqrt(c * c + p) + p * Math.log(Math.abs((l + Math.sqrt(l * l + p)) / (c + Math.sqrt(c * c + p)))));
  }function q(t, n) {
    return qn[t][n];
  }function k(t, n, e) {
    var r,
        i,
        a,
        o = e.length - 1;if (0 === o) return 0;if (0 === t) {
      for (i = 0, a = 0; a <= o; a++) i += q(o, a) * Math.pow(1 - n, o - a) * Math.pow(n, a) * e[a];return i;
    }for (r = new Array(o), a = 0; a < o; a++) r[a] = o * (e[a + 1] - e[a]);return k(t - 1, n, r);
  }function P(t, n, e) {
    var r = k(1, e, t),
        i = k(1, e, n),
        a = r * r + i * i;return Math.sqrt(a);
  }function _(t, n, e) {
    var r, i, a, o;void 0 === e && (e = 1);for (r = e / 2, i = 0, a = 0; a < 20; a++) o = r * Ln[20][a] + r, i += An[20][a] * P(t, n, o);return r * i;
  }function E(t, n, e, r) {
    var i = t * r - n * e < 0 ? -1 : 1,
        a = t * e + n * r;return a > 1 && (a = 1), a < -1 && (a = -1), i * Math.acos(a);
  }function S(t, n, e, r, i, a, o, s, h, u) {
    var c = u * (t - e) / 2 + h * (n - r) / 2,
        f = -h * (t - e) / 2 + u * (n - r) / 2,
        l = o * o,
        p = s * s,
        g = c * c,
        v = f * f,
        x = l * p - l * v - p * g;x < 0 && (x = 0), x /= l * v + p * g, x = Math.sqrt(x) * (i === a ? -1 : 1);var y = x * o / s * f,
        d = x * -s / o * c,
        m = u * y - h * d + (t + e) / 2,
        M = h * y + u * d + (n + r) / 2,
        w = (c - y) / o,
        b = (f - d) / s,
        L = (-c - y) / o,
        A = (-f - d) / s,
        q = E(1, 0, w, b),
        k = E(w, b, L, A);return 0 === a && k > 0 && (k -= kn), 1 === a && k < 0 && (k += kn), [m, M, q, k];
  }function C(t, n) {
    var e = 4 / 3 * Math.tan(n / 4),
        r = Math.cos(t),
        i = Math.sin(t),
        a = Math.cos(t + n),
        o = Math.sin(t + n);return [r, i, r - i * e, i + r * e, a + o * e, o - a * e, a, o];
  }function Z(t, n, e, r, i, a, o, s, h) {
    var u = 0,
        c = [],
        f = [];Pn(t, n, e, r, i, a, o, s, h).forEach(function (t) {
      var n = new bn(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7]),
          e = n.getTotalLength();u += e, c.push(e), f.push(n);
    }), this.length = u, this.partialLengths = c, this.curves = f;
  }function T(t, n, e, r) {
    this.x0 = t, this.x1 = n, this.y0 = e, this.y1 = r;
  }function F(t, n) {
    return Math.sqrt((t[0] - n[0]) * (t[0] - n[0]) + (t[1] - n[1]) * (t[1] - n[1]));
  }function z(t, n, e) {
    return [t[0] + (n[0] - t[0]) * e, t[1] + (n[1] - t[1]) * e];
  }function j(t, n) {
    return F(t, n) < 1e-9;
  }function I(t, n, e) {
    var r = t.map(function (t, e) {
      return V(t, n[e]);
    });return function (t) {
      var n = r.map(function (n) {
        return n(t);
      });return e ? H(n) : n;
    };
  }function V(t, n) {
    return function (e) {
      return t.map(function (t, r) {
        return t + e * (n[r] - t);
      });
    };
  }function X(t) {
    return "number" == typeof t && isFinite(t);
  }function Y(t) {
    return G(t) ? nn(t) : [(t[0][0] + t[t.length - 1][0]) / 2, (t[0][1] + t[t.length - 1][1]) / 2];
  }function G(t) {
    for (var n = 0; n < t.length - 2; n++) {
      var e = t[n],
          r = t[n + 1],
          i = t[n + 2];if (e[0] * (r[1] - i[1]) + r[0] * (i[1] - e[1]) + i[0] * (e[1] - r[1])) return !0;
    }return !1;
  }function O(t) {
    return new yn(t).abs();
  }function D(t) {
    return t.toString().split("M").map(function (t, n) {
      return t = t.trim(), n && t ? "M" + t : t;
    }).filter(function (t) {
      return t;
    });
  }function H(t) {
    return "M" + t.join("L") + "Z";
  }function N(t) {
    return D(O(t));
  }function Q(t, n) {
    var e = O(t);return U(e) || R(e, n);
  }function U(t) {
    var n = t.segments || [],
        e = [];if (!n.length || "M" !== n[0][0]) return !1;for (var r = 0; r < n.length; r++) {
      var i = n[r],
          a = i[0],
          o = i[1],
          s = i[2];if ("M" === a && r || "Z" === a) break;if ("M" === a || "L" === a) e.push([o, s]);else if ("H" === a) e.push([o, e[e.length - 1][1]]);else {
        if ("V" !== a) return !1;e.push([e[e.length - 1][0], o]);
      }
    }return !!e.length && { ring: e };
  }function R(t, n) {
    var e,
        r,
        i = D(t)[0],
        a = [],
        o = 3;if (!i) throw new TypeError(Cn);r = B(i), e = r.getTotalLength(), n && X(n) && n > 0 && (o = Math.max(o, Math.ceil(e / n)));for (var s = 0; s < o; s++) {
      var h = r.getPointAtLength(e * s / o);a.push([h.x, h.y]);
    }return { ring: a, skipBisect: !0 };
  }function B(t) {
    if ("undefined" != typeof module && module.exports) return Sn(t);var n = (window.document.createElementNS("http://www.w3.org/2000/svg", "svg"), window.document.createElementNS("http://www.w3.org/2000/svg", "path"));return n.setAttributeNS(null, "d", t), n;
  }function W(t, n) {
    for (var e = t.length + n, r = en(t) / n, i = 0, a = 0, o = r / 2; t.length < e;) {
      var s = t[i],
          h = t[(i + 1) % t.length],
          u = F(s, h);o <= a + u ? (t.splice(i + 1, 0, u ? z(s, h, (o - a) / u) : s.slice(0)), o += r) : (a += u, i++);
    }
  }function $(t, n) {
    void 0 === n && (n = 1 / 0);for (var e = 0; e < t.length; e++) for (var r = t[e], i = e === t.length - 1 ? t[0] : t[e + 1]; F(r, i) > n;) i = z(r, i, .5), t.splice(e + 1, 0, i);
  }function J(t, n) {
    var e, r, i;if ("string" == typeof t) {
      var a = Q(t, n);t = a.ring, i = a.skipBisect;
    } else if (!Array.isArray(t)) throw new TypeError(Cn);if (e = t.slice(0), !K(e)) throw new TypeError(Cn);return e.length > 1 && j(e[0], e[e.length - 1]) && e.pop(), r = tn(e), r > 0 && e.reverse(), !i && n && X(n) && n > 0 && $(e, n), e;
  }function K(t) {
    return t.every(function (t) {
      return Array.isArray(t) && t.length >= 2 && X(t[0]) && X(t[1]);
    });
  }function tt(t, n, e) {
    var r;return r = t.length - n.length, W(t, r < 0 ? -1 * r : 0), W(n, r > 0 ? r : 0), Tn(t, n), I(t, n, e);
  }function nt(t, n, e) {
    e = e || 2;var r = n && n.length,
        i = r ? n[0] * e : t.length,
        a = et(t, 0, i, e, !0),
        o = [];if (!a) return o;var s, h, u, c, f, l, p;if (r && (a = ut(t, n, a, e)), t.length > 80 * e) {
      s = u = t[0], h = c = t[1];for (var g = e; g < i; g += e) f = t[g], l = t[g + 1], f < s && (s = f), l < h && (h = l), f > u && (u = f), l > c && (c = l);p = Math.max(u - s, c - h);
    }return it(a, o, e, s, h, p), o;
  }function et(t, n, e, r, i) {
    var a, o;if (i === Et(t, n, e, r) > 0) for (a = n; a < e; a += r) o = kt(a, t[a], t[a + 1], o);else for (a = e - r; a >= n; a -= r) o = kt(a, t[a], t[a + 1], o);return o && Mt(o, o.next) && (Pt(o), o = o.next), o;
  }function rt(t, n) {
    if (!t) return t;n || (n = t);var e,
        r = t;do {
      if (e = !1, r.steiner || !Mt(r, r.next) && 0 !== mt(r.prev, r, r.next)) r = r.next;else {
        if (Pt(r), (r = n = r.prev) === r.next) return null;e = !0;
      }
    } while (e || r !== n);return n;
  }function it(t, n, e, r, i, a, o) {
    if (t) {
      !o && a && pt(t, r, i, a);for (var s, h, u = t; t.prev !== t.next;) if (s = t.prev, h = t.next, a ? ot(t, r, i, a) : at(t)) n.push(s.i / e), n.push(t.i / e), n.push(h.i / e), Pt(t), t = h.next, u = h.next;else if ((t = h) === u) {
        o ? 1 === o ? (t = st(t, n, e), it(t, n, e, r, i, a, 2)) : 2 === o && ht(t, n, e, r, i, a) : it(rt(t), n, e, r, i, a, 1);break;
      }
    }
  }function at(t) {
    var n = t.prev,
        e = t,
        r = t.next;if (mt(n, e, r) >= 0) return !1;for (var i = t.next.next; i !== t.prev;) {
      if (yt(n.x, n.y, e.x, e.y, r.x, r.y, i.x, i.y) && mt(i.prev, i, i.next) >= 0) return !1;i = i.next;
    }return !0;
  }function ot(t, n, e, r) {
    var i = t.prev,
        a = t,
        o = t.next;if (mt(i, a, o) >= 0) return !1;for (var s = i.x < a.x ? i.x < o.x ? i.x : o.x : a.x < o.x ? a.x : o.x, h = i.y < a.y ? i.y < o.y ? i.y : o.y : a.y < o.y ? a.y : o.y, u = i.x > a.x ? i.x > o.x ? i.x : o.x : a.x > o.x ? a.x : o.x, c = i.y > a.y ? i.y > o.y ? i.y : o.y : a.y > o.y ? a.y : o.y, f = vt(s, h, n, e, r), l = vt(u, c, n, e, r), p = t.nextZ; p && p.z <= l;) {
      if (p !== t.prev && p !== t.next && yt(i.x, i.y, a.x, a.y, o.x, o.y, p.x, p.y) && mt(p.prev, p, p.next) >= 0) return !1;p = p.nextZ;
    }for (p = t.prevZ; p && p.z >= f;) {
      if (p !== t.prev && p !== t.next && yt(i.x, i.y, a.x, a.y, o.x, o.y, p.x, p.y) && mt(p.prev, p, p.next) >= 0) return !1;p = p.prevZ;
    }return !0;
  }function st(t, n, e) {
    var r = t;do {
      var i = r.prev,
          a = r.next.next;!Mt(i, a) && wt(i, r, r.next, a) && Lt(i, a) && Lt(a, i) && (n.push(i.i / e), n.push(r.i / e), n.push(a.i / e), Pt(r), Pt(r.next), r = t = a), r = r.next;
    } while (r !== t);return r;
  }function ht(t, n, e, r, i, a) {
    var o = t;do {
      for (var s = o.next.next; s !== o.prev;) {
        if (o.i !== s.i && dt(o, s)) {
          var h = qt(o, s);return o = rt(o, o.next), h = rt(h, h.next), it(o, n, e, r, i, a), void it(h, n, e, r, i, a);
        }s = s.next;
      }o = o.next;
    } while (o !== t);
  }function ut(t, n, e, r) {
    var i,
        a,
        o,
        s,
        h,
        u = [];for (i = 0, a = n.length; i < a; i++) o = n[i] * r, s = i < a - 1 ? n[i + 1] * r : t.length, h = et(t, o, s, r, !1), h === h.next && (h.steiner = !0), u.push(xt(h));for (u.sort(ct), i = 0; i < u.length; i++) ft(u[i], e), e = rt(e, e.next);return e;
  }function ct(t, n) {
    return t.x - n.x;
  }function ft(t, n) {
    if (n = lt(t, n)) {
      var e = qt(n, t);rt(e, e.next);
    }
  }function lt(t, n) {
    var e,
        r = n,
        i = t.x,
        a = t.y,
        o = -1 / 0;do {
      if (a <= r.y && a >= r.next.y) {
        var s = r.x + (a - r.y) * (r.next.x - r.x) / (r.next.y - r.y);if (s <= i && s > o) {
          if (o = s, s === i) {
            if (a === r.y) return r;if (a === r.next.y) return r.next;
          }e = r.x < r.next.x ? r : r.next;
        }
      }r = r.next;
    } while (r !== n);if (!e) return null;if (i === o) return e.prev;var h,
        u = e,
        c = e.x,
        f = e.y,
        l = 1 / 0;for (r = e.next; r !== u;) i >= r.x && r.x >= c && yt(a < f ? i : o, a, c, f, a < f ? o : i, a, r.x, r.y) && ((h = Math.abs(a - r.y) / (i - r.x)) < l || h === l && r.x > e.x) && Lt(r, t) && (e = r, l = h), r = r.next;return e;
  }function pt(t, n, e, r) {
    var i = t;do {
      null === i.z && (i.z = vt(i.x, i.y, n, e, r)), i.prevZ = i.prev, i.nextZ = i.next, i = i.next;
    } while (i !== t);i.prevZ.nextZ = null, i.prevZ = null, gt(i);
  }function gt(t) {
    var n,
        e,
        r,
        i,
        a,
        o,
        s,
        h,
        u = 1;do {
      for (e = t, t = null, a = null, o = 0; e;) {
        for (o++, r = e, s = 0, n = 0; n < u && (s++, r = r.nextZ); n++);for (h = u; s > 0 || h > 0 && r;) 0 === s ? (i = r, r = r.nextZ, h--) : 0 !== h && r ? e.z <= r.z ? (i = e, e = e.nextZ, s--) : (i = r, r = r.nextZ, h--) : (i = e, e = e.nextZ, s--), a ? a.nextZ = i : t = i, i.prevZ = a, a = i;e = r;
      }a.nextZ = null, u *= 2;
    } while (o > 1);return t;
  }function vt(t, n, e, r, i) {
    return t = 32767 * (t - e) / i, n = 32767 * (n - r) / i, t = 16711935 & (t | t << 8), t = 252645135 & (t | t << 4), t = 858993459 & (t | t << 2), t = 1431655765 & (t | t << 1), n = 16711935 & (n | n << 8), n = 252645135 & (n | n << 4), n = 858993459 & (n | n << 2), n = 1431655765 & (n | n << 1), t | n << 1;
  }function xt(t) {
    var n = t,
        e = t;do {
      n.x < e.x && (e = n), n = n.next;
    } while (n !== t);return e;
  }function yt(t, n, e, r, i, a, o, s) {
    return (i - o) * (n - s) - (t - o) * (a - s) >= 0 && (t - o) * (r - s) - (e - o) * (n - s) >= 0 && (e - o) * (a - s) - (i - o) * (r - s) >= 0;
  }function dt(t, n) {
    return t.next.i !== n.i && t.prev.i !== n.i && !bt(t, n) && Lt(t, n) && Lt(n, t) && At(t, n);
  }function mt(t, n, e) {
    return (n.y - t.y) * (e.x - n.x) - (n.x - t.x) * (e.y - n.y);
  }function Mt(t, n) {
    return t.x === n.x && t.y === n.y;
  }function wt(t, n, e, r) {
    return !!(Mt(t, n) && Mt(e, r) || Mt(t, r) && Mt(e, n)) || mt(t, n, e) > 0 != mt(t, n, r) > 0 && mt(e, r, t) > 0 != mt(e, r, n) > 0;
  }function bt(t, n) {
    var e = t;do {
      if (e.i !== t.i && e.next.i !== t.i && e.i !== n.i && e.next.i !== n.i && wt(e, e.next, t, n)) return !0;e = e.next;
    } while (e !== t);return !1;
  }function Lt(t, n) {
    return mt(t.prev, t, t.next) < 0 ? mt(t, n, t.next) >= 0 && mt(t, t.prev, n) >= 0 : mt(t, n, t.prev) < 0 || mt(t, t.next, n) < 0;
  }function At(t, n) {
    var e = t,
        r = !1,
        i = (t.x + n.x) / 2,
        a = (t.y + n.y) / 2;do {
      e.y > a != e.next.y > a && i < (e.next.x - e.x) * (a - e.y) / (e.next.y - e.y) + e.x && (r = !r), e = e.next;
    } while (e !== t);return r;
  }function qt(t, n) {
    var e = new _t(t.i, t.x, t.y),
        r = new _t(n.i, n.x, n.y),
        i = t.next,
        a = n.prev;return t.next = n, n.prev = t, e.next = i, i.prev = e, r.next = e, e.prev = r, a.next = r, r.prev = a, r;
  }function kt(t, n, e, r) {
    var i = new _t(t, n, e);return r ? (i.next = r.next, i.prev = r, r.next.prev = i, r.next = i) : (i.prev = i, i.next = i), i;
  }function Pt(t) {
    t.next.prev = t.prev, t.prev.next = t.next, t.prevZ && (t.prevZ.nextZ = t.nextZ), t.nextZ && (t.nextZ.prevZ = t.prevZ);
  }function _t(t, n, e) {
    this.i = t, this.x = n, this.y = e, this.prev = null, this.next = null, this.z = null, this.prevZ = null, this.nextZ = null, this.steiner = !1;
  }function Et(t, n, e, r) {
    for (var i = 0, a = n, o = e - r; a < e; a += r) i += (t[o] - t[a]) * (t[a + 1] + t[o + 1]), o = a;return i;
  }function St(t, n) {
    var e = n.id,
        r = n.bbox,
        i = null == n.properties ? {} : n.properties,
        a = Ct(t, n);return null == e && null == r ? { type: "Feature", properties: i, geometry: a } : null == r ? { type: "Feature", id: e, properties: i, geometry: a } : { type: "Feature", id: e, bbox: r, properties: i, geometry: a };
  }function Ct(t, n) {
    function e(t, n) {
      n.length && n.pop();for (var e = u[t < 0 ? ~t : t], r = 0, i = e.length; r < i; ++r) n.push(h(e[r], r));t < 0 && Vn(n, i);
    }function r(t) {
      return h(t);
    }function i(t) {
      for (var n = [], r = 0, i = t.length; r < i; ++r) e(t[r], n);return n.length < 2 && n.push(n[0]), n;
    }function a(t) {
      for (var n = i(t); n.length < 4;) n.push(n[0]);return n;
    }function o(t) {
      return t.map(a);
    }function s(t) {
      var n,
          e = t.type;switch (e) {case "GeometryCollection":
          return { type: e, geometries: t.geometries.map(s) };case "Point":
          n = r(t.coordinates);break;case "MultiPoint":
          n = t.coordinates.map(r);break;case "LineString":
          n = i(t.arcs);break;case "MultiLineString":
          n = t.arcs.map(i);break;case "Polygon":
          n = o(t.arcs);break;case "MultiPolygon":
          n = t.arcs.map(o);break;default:
          return null;}return { type: e, coordinates: n };
    }var h = In(t.transform),
        u = t.arcs;return s(n);
  }function Zt(t) {
    for (var n, e = -1, r = t.length, i = t[r - 1], a = 0; ++e < r;) n = i, i = t[e], a += n[0] * i[1] - n[1] * i[0];return Math.abs(a);
  }function Tt(t, n) {
    function e(t) {
      switch (t.type) {case "GeometryCollection":
          t.geometries.forEach(e);break;case "Polygon":
          r(t.arcs);break;case "MultiPolygon":
          t.arcs.forEach(r);}
    }function r(t) {
      t.forEach(function (n) {
        n.forEach(function (n) {
          (a[n = n < 0 ? ~n : n] || (a[n] = [])).push(t);
        });
      }), o.push(t);
    }function i(n) {
      return Zt(Ct(t, { type: "Polygon", arcs: [n] }).coordinates[0]);
    }var a = {},
        o = [],
        s = [];return n.forEach(e), o.forEach(function (t) {
      if (!t._) {
        var n = [],
            e = [t];for (t._ = 1, s.push(n); t = e.pop();) n.push(t), t.forEach(function (t) {
          t.forEach(function (t) {
            a[t < 0 ? ~t : t].forEach(function (t) {
              t._ || (t._ = 1, e.push(t));
            });
          });
        });
      }
    }), o.forEach(function (t) {
      delete t._;
    }), { type: "MultiPolygon", arcs: s.map(function (n) {
        var e,
            r = [];if (n.forEach(function (t) {
          t.forEach(function (t) {
            t.forEach(function (t) {
              a[t < 0 ? ~t : t].length < 2 && r.push(t);
            });
          });
        }), r = Yn(t, r), (e = r.length) > 1) for (var o, s, h = 1, u = i(r[0]); h < e; ++h) (o = i(r[h])) > u && (s = r[0], r[0] = r[h], r[h] = s, u = o);return r;
      }) };
  }function Ft(t) {
    return function (n, e) {
      return Dn(t(n), e);
    };
  }function zt(t, n) {
    var e = {},
        r = { type: "Topology", objects: { triangles: { type: "GeometryCollection", geometries: [] } }, arcs: [] };return t.forEach(function (t) {
      var i = [];t.forEach(function (t, a) {
        var o = t[0] < t[1] ? t.join(",") : t[1] + "," + t[0],
            s = t.map(function (t) {
          return n[t];
        });o in e ? i.push(~e[o]) : (i.push(e[o] = r.arcs.length), r.arcs.push(s));
      }), r.objects.triangles.geometries.push({ type: "Polygon", area: Math.abs(tn(t.map(function (t) {
          return n[t[0]];
        }))), arcs: [i] });
    }), r.objects.triangles.geometries.sort(function (t, n) {
      return t.area - n.area;
    }), r;
  }function jt(t, n) {
    for (var e = t.objects.triangles.geometries, r = Hn(function (t) {
      return t.area;
    }).left; e.length > n;) !function () {
      var n = e[0],
          i = On(e)[0][0],
          a = e[i],
          o = Tt(t, [n, a]);o.area = n.area + a.area, o.type = "Polygon", o.arcs = o.arcs[0], e.splice(i, 1), e.shift(), e.splice(r(e, o.area), 0, o);
    }();if (n > e.length) throw new RangeError("Can't collapse topology into " + n + " pieces.");return Xn(t, t.objects.triangles).features.map(function (t) {
      return t.geometry.coordinates[0].pop(), t.geometry.coordinates[0];
    });
  }function It(t) {
    for (var n = zn(t.reduce(function (t, n) {
      return t.concat([n[0]], [n[1]]);
    }, [])), e = [], r = 0, i = n.length; r < i; r += 3) e.push([[n[r], n[r + 1]], [n[r + 1], n[r + 2]], [n[r + 2], n[r]]]);return e;
  }function Vt(t, n, e) {
    function r(t, n, o) {
      void 0 === n && (n = []), void 0 === o && (o = 0);for (var s = 0; s < t.length; s++) {
        var h = t.splice(s, 1),
            u = e[h[0]][n.length];o + u < i && (t.length ? r(t.slice(), n.concat(h), o + u) : (i = o + u, a = n.concat(h))), t.length && t.splice(s, 0, h[0]);
      }
    }var i = 1 / 0,
        a = t.map(function (t, n) {
      return n;
    });return r(a), a;
  }function Xt(t, n) {
    var e = F(Y(t), Y(n));return e * e;
  }function Yt(t, n, e) {
    void 0 === e && (e = {});var r = e.maxSegmentLength;void 0 === r && (r = 10);var i = e.string;void 0 === i && (i = !0);var a = e.single;void 0 === a && (a = !1);var o = J(t, r);o.length < n.length + 2 && W(o, n.length + 2 - o.length);var s,
        h = Qn(o, n.length),
        u = n.map(function (t) {
      return J(t, r);
    }),
        c = "string" == typeof t && t;return a && !n.every(function (t) {
      return "string" == typeof t;
    }) || (s = n.slice(0)), Dt(h, u, { match: !0, string: i, single: a, t0: c, t1: s });
  }function Gt(t, n, e) {
    void 0 === e && (e = {});var r = e.maxSegmentLength;void 0 === r && (r = 10);var i = e.string;void 0 === i && (i = !0);var a = e.single;void 0 === a && (a = !1);var o = Yt(n, t, { maxSegmentLength: r, string: i, single: a });return a ? function (t) {
      return o(1 - t);
    } : o.map(function (t) {
      return function (n) {
        return t(1 - n);
      };
    });
  }function Ot(t, n, e) {
    void 0 === e && (e = {});var r = e.maxSegmentLength;void 0 === r && (r = 10);var i = e.string;void 0 === i && (i = !0);var a = e.single;if (void 0 === a && (a = !1), !Array.isArray(t) || !Array.isArray(n) || t.length !== n.length || !t.length) throw new TypeError(Zn);var o,
        s,
        h = function (t) {
      return J(t, r);
    },
        u = t.map(h),
        c = n.map(h);return a ? (t.every(function (t) {
      return "string" == typeof t;
    }) && (o = t.slice(0)), n.every(function (t) {
      return "string" == typeof t;
    }) && (s = n.slice(0))) : (o = t.slice(0), s = n.slice(0)), Dt(u, c, { string: i, single: a, t0: o, t1: s, match: !1 });
  }function Dt(t, n, e) {
    void 0 === e && (e = {});var r = e.string,
        i = e.single,
        a = e.t0,
        o = e.t1,
        s = e.match,
        h = s ? Un(t, n) : t.map(function (t, n) {
      return n;
    }),
        u = h.map(function (e, i) {
      return tt(t[e], n[i], r);
    });if (s && Array.isArray(a) && (a = h.map(function (t) {
      return a[t];
    })), i && r && (Array.isArray(a) && (a = a.join(" ")), Array.isArray(o) && (o = o.join(" "))), i) {
      var c = r ? function (t) {
        return u.map(function (n) {
          return n(t);
        }).join(" ");
      } : function (t) {
        return u.map(function (n) {
          return n(t);
        });
      };return r && (a || o) ? function (t) {
        return t < 1e-4 && a || 1 - t < 1e-4 && o || c(t);
      } : c;
    }return r ? (a = Array.isArray(a) ? a.map(function (t) {
      return "string" == typeof t && t;
    }) : [], o = Array.isArray(o) ? o.map(function (t) {
      return "string" == typeof t && t;
    }) : [], u.map(function (t, n) {
      return a[n] || o[n] ? function (e) {
        return e < 1e-4 && a[n] || 1 - e < 1e-4 && o[n] || t(e);
      } : t;
    })) : u;
  }function Ht(t, n, e, r, i) {
    return Rt(Bt(t, n, e), r, Jt(t, n, e), 2 * Math.PI * e, i);
  }function Nt(t, n, e, r, i) {
    var a = Ht(n, e, r, t, i);return function (t) {
      return a(1 - t);
    };
  }function Qt(t, n, e, r, i, a) {
    return Rt(Wt(t, n, e, r), i, Kt(t, n, e, r), 2 * e + 2 * r, a);
  }function Ut(t, n, e, r, i, a) {
    var o = Qt(n, e, r, i, t, a);return function (t) {
      return o(1 - t);
    };
  }function Rt(t, n, e, r, i) {
    void 0 === i && (i = {});var a = i.maxSegmentLength;void 0 === a && (a = 10);var o = i.string;void 0 === o && (o = !0);var s,
        h,
        u = J(n, a);return X(r) && u.length < r / a && W(u, Math.ceil(r / a - u.length)), s = t(u), h = I(s, u, o), o ? function (t) {
      return t < 1e-4 ? e : h(t);
    } : h;
  }function Bt(t, n, e) {
    return function (r) {
      var i = Y(r),
          a = en(r.concat([r[0]])),
          o = Math.atan2(r[0][1] - i[1], r[0][0] - i[0]),
          s = 0;return r.map(function (i, h) {
        var u;return h && (s += F(i, r[h - 1])), u = o + 2 * Math.PI * (a ? s / a : h / r.length), [Math.cos(u) * e + t, Math.sin(u) * e + n];
      });
    };
  }function Wt(t, n, e, r) {
    return function (i) {
      var a = Y(i),
          o = en(i.concat([i[0]])),
          s = Math.atan2(i[0][1] - a[1], i[0][0] - a[0]),
          h = 0;s < 0 && (s = 2 * Math.PI + s);var u = s / (2 * Math.PI);return i.map(function (a, s) {
        s && (h += F(a, i[s - 1]));var c = $t((u + (o ? h / o : s / i.length)) % 1);return [t + c[0] * e, n + c[1] * r];
      });
    };
  }function $t(t) {
    return t <= 1 / 8 ? [1, .5 + 4 * t] : t <= 3 / 8 ? [1.5 - 4 * t, 1] : t <= 5 / 8 ? [0, 2.5 - 4 * t] : t <= 7 / 8 ? [4 * t - 2.5, 0] : [1, 4 * t - 3.5];
  }function Jt(t, n, e) {
    var r = t - e + "," + n,
        i = t + e + "," + n,
        a = "A" + e + "," + e + ",0,1,1,";return "M" + r + a + i + a + r + "Z";
  }function Kt(t, n, e, r) {
    var i = t + e,
        a = n + r;return "M" + t + "," + n + "L" + i + "," + n + "L" + i + "," + a + "L" + t + "," + a + "Z";
  }var tn = function (t) {
    for (var n, e = -1, r = t.length, i = t[r - 1], a = 0; ++e < r;) n = i, i = t[e], a += n[1] * i[0] - n[0] * i[1];return a / 2;
  },
      nn = function (t) {
    for (var n, e, r = -1, i = t.length, a = 0, o = 0, s = t[i - 1], h = 0; ++r < i;) n = s, s = t[r], h += e = n[0] * s[1] - s[0] * n[1], a += (n[0] + s[0]) * e, o += (n[1] + s[1]) * e;return h *= 3, [a / h, o / h];
  },
      en = function (t) {
    for (var n, e, r = -1, i = t.length, a = t[i - 1], o = a[0], s = a[1], h = 0; ++r < i;) n = o, e = s, a = t[r], o = a[0], s = a[1], n -= o, e -= s, h += Math.sqrt(n * n + e * e);return h;
  },
      rn = { a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0 },
      an = [5760, 6158, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279],
      on = function (t) {
    var n = new a(t),
        e = n.max;for (o(n); n.index < e && !n.err.length;) u(n);return n.err.length ? n.result = [] : n.result.length && ("mM".indexOf(n.result[0][0]) < 0 ? (n.err = "SvgPath: string should start with `M` or `m`", n.result = []) : n.result[0][0] = "M"), { err: n.err, segments: n.result };
  };f.prototype.matrix = function (t) {
    return 1 === t[0] && 0 === t[1] && 0 === t[2] && 1 === t[3] && 0 === t[4] && 0 === t[5] ? this : (this.cache = null, this.queue.push(t), this);
  }, f.prototype.translate = function (t, n) {
    return 0 === t && 0 === n || (this.cache = null, this.queue.push([1, 0, 0, 1, t, n])), this;
  }, f.prototype.scale = function (t, n) {
    return 1 === t && 1 === n || (this.cache = null, this.queue.push([t, 0, 0, n, 0, 0])), this;
  }, f.prototype.rotate = function (t, n, e) {
    var r, i, a;return 0 !== t && (this.translate(n, e), r = t * Math.PI / 180, i = Math.cos(r), a = Math.sin(r), this.queue.push([i, a, -a, i, 0, 0]), this.cache = null, this.translate(-n, -e)), this;
  }, f.prototype.skewX = function (t) {
    return 0 !== t && (this.cache = null, this.queue.push([1, 0, Math.tan(t * Math.PI / 180), 1, 0, 0])), this;
  }, f.prototype.skewY = function (t) {
    return 0 !== t && (this.cache = null, this.queue.push([1, Math.tan(t * Math.PI / 180), 0, 1, 0, 0])), this;
  }, f.prototype.toArray = function () {
    var t = this;if (this.cache) return this.cache;if (!this.queue.length) return this.cache = [1, 0, 0, 1, 0, 0], this.cache;if (this.cache = this.queue[0], 1 === this.queue.length) return this.cache;for (var n = 1; n < this.queue.length; n++) t.cache = c(t.cache, t.queue[n]);return this.cache;
  }, f.prototype.calc = function (t, n, e) {
    var r;return this.queue.length ? (this.cache || (this.cache = this.toArray()), r = this.cache, [t * r[0] + n * r[2] + (e ? 0 : r[4]), t * r[1] + n * r[3] + (e ? 0 : r[5])]) : [t, n];
  };var sn = f,
      hn = { matrix: !0, scale: !0, rotate: !0, translate: !0, skewX: !0, skewY: !0 },
      un = /\s*(matrix|translate|scale|rotate|skewX|skewY)\s*\(\s*(.+?)\s*\)[\s,]*/,
      cn = /[\s,]+/,
      fn = function (t) {
    var n,
        e,
        r = new sn();return t.split(un).forEach(function (t) {
      if (t.length) {
        if (void 0 !== hn[t]) return void (n = t);switch (e = t.split(cn).map(function (t) {
          return +t || 0;
        }), n) {case "matrix":
            return void (6 === e.length && r.matrix(e));case "scale":
            return void (1 === e.length ? r.scale(e[0], e[0]) : 2 === e.length && r.scale(e[0], e[1]));case "rotate":
            return void (1 === e.length ? r.rotate(e[0], 0, 0) : 3 === e.length && r.rotate(e[0], e[1], e[2]));case "translate":
            return void (1 === e.length ? r.translate(e[0], 0) : 2 === e.length && r.translate(e[0], e[1]));case "skewX":
            return void (1 === e.length && r.skewX(e[0]));case "skewY":
            return void (1 === e.length && r.skewY(e[0]));}
      }
    }), r;
  },
      ln = 2 * Math.PI,
      pn = function (t, n, e, r, i, a, o, s, h) {
    var u = Math.sin(h * ln / 360),
        c = Math.cos(h * ln / 360),
        f = c * (t - e) / 2 + u * (n - r) / 2,
        l = -u * (t - e) / 2 + c * (n - r) / 2;if (0 === f && 0 === l) return [];if (0 === o || 0 === s) return [];o = Math.abs(o), s = Math.abs(s);var v = f * f / (o * o) + l * l / (s * s);v > 1 && (o *= Math.sqrt(v), s *= Math.sqrt(v));var x = p(t, n, e, r, i, a, o, s, u, c),
        y = [],
        d = x[2],
        m = x[3],
        M = Math.max(Math.ceil(Math.abs(m) / (ln / 4)), 1);m /= M;for (var w = 0; w < M; w++) y.push(g(d, m)), d += m;return y.map(function (t) {
      for (var n = 0; n < t.length; n += 2) {
        var e = t[n + 0],
            r = t[n + 1];e *= o, r *= s;var i = c * e - u * r,
            a = u * e + c * r;t[n + 0] = i + x[0], t[n + 1] = a + x[1];
      }return t;
    });
  },
      gn = Math.PI / 180;v.prototype.transform = function (t) {
    var n = Math.cos(this.ax * gn),
        e = Math.sin(this.ax * gn),
        r = [this.rx * (t[0] * n + t[2] * e), this.rx * (t[1] * n + t[3] * e), this.ry * (-t[0] * e + t[2] * n), this.ry * (-t[1] * e + t[3] * n)],
        i = r[0] * r[0] + r[2] * r[2],
        a = r[1] * r[1] + r[3] * r[3],
        o = ((r[0] - r[3]) * (r[0] - r[3]) + (r[2] + r[1]) * (r[2] + r[1])) * ((r[0] + r[3]) * (r[0] + r[3]) + (r[2] - r[1]) * (r[2] - r[1])),
        s = (i + a) / 2;if (o < 1e-10 * s) return this.rx = this.ry = Math.sqrt(s), this.ax = 0, this;var h = r[0] * r[1] + r[2] * r[3];o = Math.sqrt(o);var u = s + o / 2,
        c = s - o / 2;return this.ax = Math.abs(h) < 1e-10 && Math.abs(u - a) < 1e-10 ? 90 : 180 * Math.atan(Math.abs(h) > Math.abs(u - a) ? (u - i) / h : h / (u - a)) / Math.PI, this.ax >= 0 ? (this.rx = Math.sqrt(u), this.ry = Math.sqrt(c)) : (this.ax += 90, this.rx = Math.sqrt(c), this.ry = Math.sqrt(u)), this;
  }, v.prototype.isDegenerate = function () {
    return this.rx < 1e-10 * this.ry || this.ry < 1e-10 * this.rx;
  };var vn = v;x.prototype.__matrix = function (t) {
    var n,
        e = this;t.queue.length && this.iterate(function (r, i, a, o) {
      var s, h, u, c;switch (r[0]) {case "v":
          s = t.calc(0, r[1], !0), h = 0 === s[0] ? ["v", s[1]] : ["l", s[0], s[1]];break;case "V":
          s = t.calc(a, r[1], !1), h = s[0] === t.calc(a, o, !1)[0] ? ["V", s[1]] : ["L", s[0], s[1]];break;case "h":
          s = t.calc(r[1], 0, !0), h = 0 === s[1] ? ["h", s[0]] : ["l", s[0], s[1]];break;case "H":
          s = t.calc(r[1], o, !1), h = s[1] === t.calc(a, o, !1)[1] ? ["H", s[0]] : ["L", s[0], s[1]];break;case "a":case "A":
          var f = t.toArray(),
              l = vn(r[1], r[2], r[3]).transform(f);if (f[0] * f[3] - f[1] * f[2] < 0 && (r[5] = r[5] ? "0" : "1"), s = t.calc(r[6], r[7], "a" === r[0]), "A" === r[0] && r[6] === a && r[7] === o || "a" === r[0] && 0 === r[6] && 0 === r[7]) {
            h = ["a" === r[0] ? "l" : "L", s[0], s[1]];break;
          }h = l.isDegenerate() ? ["a" === r[0] ? "l" : "L", s[0], s[1]] : [r[0], l.rx, l.ry, l.ax, r[4], r[5], s[0], s[1]];break;case "m":
          c = i > 0, s = t.calc(r[1], r[2], c), h = ["m", s[0], s[1]];break;default:
          for (u = r[0], h = [u], c = u.toLowerCase() === u, n = 1; n < r.length; n += 2) s = t.calc(r[n], r[n + 1], c), h.push(s[0], s[1]);}e.segments[i] = h;
    }, !0);
  }, x.prototype.__evaluateStack = function () {
    var t,
        n,
        e = this;if (this.__stack.length) {
      if (1 === this.__stack.length) return this.__matrix(this.__stack[0]), void (this.__stack = []);for (t = sn(), n = this.__stack.length; --n >= 0;) t.matrix(e.__stack[n].toArray());this.__matrix(t), this.__stack = [];
    }
  }, x.prototype.toString = function () {
    var t,
        n,
        e = this,
        r = [];this.__evaluateStack();for (var i = 0; i < this.segments.length; i++) n = e.segments[i][0], t = i > 0 && "m" !== n && "M" !== n && n === e.segments[i - 1][0], r = r.concat(t ? e.segments[i].slice(1) : e.segments[i]);return r.join(" ").replace(/ ?([achlmqrstvz]) ?/gi, "$1").replace(/ \-/g, "-").replace(/zm/g, "z m");
  }, x.prototype.translate = function (t, n) {
    return this.__stack.push(sn().translate(t, n || 0)), this;
  }, x.prototype.scale = function (t, n) {
    return this.__stack.push(sn().scale(t, n || 0 === n ? n : t)), this;
  }, x.prototype.rotate = function (t, n, e) {
    return this.__stack.push(sn().rotate(t, n || 0, e || 0)), this;
  }, x.prototype.skewX = function (t) {
    return this.__stack.push(sn().skewX(t)), this;
  }, x.prototype.skewY = function (t) {
    return this.__stack.push(sn().skewY(t)), this;
  }, x.prototype.matrix = function (t) {
    return this.__stack.push(sn().matrix(t)), this;
  }, x.prototype.transform = function (t) {
    return t.trim() ? (this.__stack.push(fn(t)), this) : this;
  }, x.prototype.round = function (t) {
    var n,
        e = 0,
        r = 0,
        i = 0,
        a = 0;return t = t || 0, this.__evaluateStack(), this.segments.forEach(function (o) {
      var s = o[0].toLowerCase() === o[0];switch (o[0]) {case "H":case "h":
          return s && (o[1] += i), i = o[1] - o[1].toFixed(t), void (o[1] = +o[1].toFixed(t));case "V":case "v":
          return s && (o[1] += a), a = o[1] - o[1].toFixed(t), void (o[1] = +o[1].toFixed(t));case "Z":case "z":
          return i = e, void (a = r);case "M":case "m":
          return s && (o[1] += i, o[2] += a), i = o[1] - o[1].toFixed(t), a = o[2] - o[2].toFixed(t), e = i, r = a, o[1] = +o[1].toFixed(t), void (o[2] = +o[2].toFixed(t));case "A":case "a":
          return s && (o[6] += i, o[7] += a), i = o[6] - o[6].toFixed(t), a = o[7] - o[7].toFixed(t), o[1] = +o[1].toFixed(t), o[2] = +o[2].toFixed(t), o[3] = +o[3].toFixed(t + 2), o[6] = +o[6].toFixed(t), void (o[7] = +o[7].toFixed(t));default:
          return n = o.length, s && (o[n - 2] += i, o[n - 1] += a), i = o[n - 2] - o[n - 2].toFixed(t), a = o[n - 1] - o[n - 1].toFixed(t), void o.forEach(function (n, e) {
            e && (o[e] = +o[e].toFixed(t));
          });}
    }), this;
  }, x.prototype.iterate = function (t, n) {
    var e,
        r,
        i,
        a = this.segments,
        o = {},
        s = !1,
        h = 0,
        u = 0,
        c = 0,
        f = 0;if (n || this.__evaluateStack(), a.forEach(function (n, e) {
      var r = t(n, e, h, u);Array.isArray(r) && (o[e] = r, s = !0);var i = n[0] === n[0].toLowerCase();switch (n[0]) {case "m":case "M":
          return h = n[1] + (i ? h : 0), u = n[2] + (i ? u : 0), c = h, void (f = u);case "h":case "H":
          return void (h = n[1] + (i ? h : 0));case "v":case "V":
          return void (u = n[1] + (i ? u : 0));case "z":case "Z":
          return h = c, void (u = f);default:
          h = n[n.length - 2] + (i ? h : 0), u = n[n.length - 1] + (i ? u : 0);}
    }), !s) return this;for (i = [], e = 0; e < a.length; e++) if (void 0 !== o[e]) for (r = 0; r < o[e].length; r++) i.push(o[e][r]);else i.push(a[e]);return this.segments = i, this;
  }, x.prototype.abs = function () {
    return this.iterate(function (t, n, e, r) {
      var i,
          a = t[0],
          o = a.toUpperCase();if (a !== o) switch (t[0] = o, a) {case "v":
          return void (t[1] += r);case "a":
          return t[6] += e, void (t[7] += r);default:
          for (i = 1; i < t.length; i++) t[i] += i % 2 ? e : r;}
    }, !0), this;
  }, x.prototype.rel = function () {
    return this.iterate(function (t, n, e, r) {
      var i,
          a = t[0],
          o = a.toLowerCase();if (a !== o && (0 !== n || "M" !== a)) switch (t[0] = o, a) {case "V":
          return void (t[1] -= r);case "A":
          return t[6] -= e, void (t[7] -= r);default:
          for (i = 1; i < t.length; i++) t[i] -= i % 2 ? e : r;}
    }, !0), this;
  }, x.prototype.unarc = function () {
    return this.iterate(function (t, n, e, r) {
      var i,
          a,
          o,
          s = [],
          h = t[0];return "A" !== h && "a" !== h ? null : ("a" === h ? (a = e + t[6], o = r + t[7]) : (a = t[6], o = t[7]), i = pn(e, r, a, o, t[4], t[5], t[1], t[2], t[3]), 0 === i.length ? [["a" === t[0] ? "l" : "L", t[6], t[7]]] : (i.forEach(function (t) {
        s.push(["C", t[2], t[3], t[4], t[5], t[6], t[7]]);
      }), s));
    }), this;
  }, x.prototype.unshort = function () {
    var t,
        n,
        e,
        r,
        i,
        a = this.segments;return this.iterate(function (o, s, h, u) {
      var c,
          f = o[0],
          l = f.toUpperCase();s && ("T" === l ? (c = "t" === f, e = a[s - 1], "Q" === e[0] ? (t = e[1] - h, n = e[2] - u) : "q" === e[0] ? (t = e[1] - e[3], n = e[2] - e[4]) : (t = 0, n = 0), r = -t, i = -n, c || (r += h, i += u), a[s] = [c ? "q" : "Q", r, i, o[1], o[2]]) : "S" === l && (c = "s" === f, e = a[s - 1], "C" === e[0] ? (t = e[3] - h, n = e[4] - u) : "c" === e[0] ? (t = e[3] - e[5], n = e[4] - e[6]) : (t = 0, n = 0), r = -t, i = -n, c || (r += h, i += u), a[s] = [c ? "c" : "C", r, i, o[1], o[2], o[3], o[4]]));
    }), this;
  };var xn = x,
      yn = xn,
      dn = { a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0 },
      mn = /([astvzqmhlc])([^astvzqmhlc]*)/gi,
      Mn = function (t) {
    var n = [];return t.replace(mn, function (t, e, r) {
      var i = e.toLowerCase();for (r = y(r), "m" === i && r.length > 2 && (n.push([e].concat(r.splice(0, 2))), i = "l", e = "m" === e ? "l" : "L"); r.length >= 0;) {
        if (r.length === dn[i]) return r.unshift(e), n.push(r);if (r.length < dn[i]) throw new Error("malformed path data");n.push([e].concat(r.splice(0, dn[i])));
      }
    }), n;
  },
      wn = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/gi,
      bn = function (t, n, e, r, i, a, o, s) {
    return new d(t, n, e, r, i, a, o, s);
  };d.prototype = { constructor: d, init: function () {
      this.length = this.getArcLength([this.a.x, this.b.x, this.c.x, this.d.x], [this.a.y, this.b.y, this.c.y, this.d.y]);
    }, getTotalLength: function () {
      return this.length;
    }, getPointAtLength: function (t) {
      var n = w(t, this.length, this.getArcLength, [this.a.x, this.b.x, this.c.x, this.d.x], [this.a.y, this.b.y, this.c.y, this.d.y]);return this.getPoint([this.a.x, this.b.x, this.c.x, this.d.x], [this.a.y, this.b.y, this.c.y, this.d.y], n);
    }, getTangentAtLength: function (t) {
      var n = w(t, this.length, this.getArcLength, [this.a.x, this.b.x, this.c.x, this.d.x], [this.a.y, this.b.y, this.c.y, this.d.y]),
          e = this.getDerivative([this.a.x, this.b.x, this.c.x, this.d.x], [this.a.y, this.b.y, this.c.y, this.d.y], n),
          r = Math.sqrt(e.x * e.x + e.y * e.y);return r > 0 ? { x: e.x / r, y: e.y / r } : { x: 0, y: 0 };
    }, getPropertiesAtLength: function (t) {
      var n,
          e = w(t, this.length, this.getArcLength, [this.a.x, this.b.x, this.c.x, this.d.x], [this.a.y, this.b.y, this.c.y, this.d.y]),
          r = this.getDerivative([this.a.x, this.b.x, this.c.x, this.d.x], [this.a.y, this.b.y, this.c.y, this.d.y], e),
          i = Math.sqrt(r.x * r.x + r.y * r.y);n = i > 0 ? { x: r.x / i, y: r.y / i } : { x: 0, y: 0 };var a = this.getPoint([this.a.x, this.b.x, this.c.x, this.d.x], [this.a.y, this.b.y, this.c.y, this.d.y], e);return { x: a.x, y: a.y, tangentX: n.x, tangentY: n.y };
    } };var Ln = [[], [], [-.5773502691896257, .5773502691896257], [0, -.7745966692414834, .7745966692414834], [-.33998104358485626, .33998104358485626, -.8611363115940526, .8611363115940526], [0, -.5384693101056831, .5384693101056831, -.906179845938664, .906179845938664], [.6612093864662645, -.6612093864662645, -.2386191860831969, .2386191860831969, -.932469514203152, .932469514203152], [0, .4058451513773972, -.4058451513773972, -.7415311855993945, .7415311855993945, -.9491079123427585, .9491079123427585], [-.1834346424956498, .1834346424956498, -.525532409916329, .525532409916329, -.7966664774136267, .7966664774136267, -.9602898564975363, .9602898564975363], [0, -.8360311073266358, .8360311073266358, -.9681602395076261, .9681602395076261, -.3242534234038089, .3242534234038089, -.6133714327005904, .6133714327005904], [-.14887433898163122, .14887433898163122, -.4333953941292472, .4333953941292472, -.6794095682990244, .6794095682990244, -.8650633666889845, .8650633666889845, -.9739065285171717, .9739065285171717], [0, -.26954315595234496, .26954315595234496, -.5190961292068118, .5190961292068118, -.7301520055740494, .7301520055740494, -.8870625997680953, .8870625997680953, -.978228658146057, .978228658146057], [-.1252334085114689, .1252334085114689, -.3678314989981802, .3678314989981802, -.5873179542866175, .5873179542866175, -.7699026741943047, .7699026741943047, -.9041172563704749, .9041172563704749, -.9815606342467192, .9815606342467192], [0, -.2304583159551348, .2304583159551348, -.44849275103644687, .44849275103644687, -.6423493394403402, .6423493394403402, -.8015780907333099, .8015780907333099, -.9175983992229779, .9175983992229779, -.9841830547185881, .9841830547185881], [-.10805494870734367, .10805494870734367, -.31911236892788974, .31911236892788974, -.5152486363581541, .5152486363581541, -.6872929048116855, .6872929048116855, -.827201315069765, .827201315069765, -.9284348836635735, .9284348836635735, -.9862838086968123, .9862838086968123], [0, -.20119409399743451, .20119409399743451, -.3941513470775634, .3941513470775634, -.5709721726085388, .5709721726085388, -.7244177313601701, .7244177313601701, -.8482065834104272, .8482065834104272, -.937273392400706, .937273392400706, -.9879925180204854, .9879925180204854], [-.09501250983763744, .09501250983763744, -.2816035507792589, .2816035507792589, -.45801677765722737, .45801677765722737, -.6178762444026438, .6178762444026438, -.755404408355003, .755404408355003, -.8656312023878318, .8656312023878318, -.9445750230732326, .9445750230732326, -.9894009349916499, .9894009349916499], [0, -.17848418149584785, .17848418149584785, -.3512317634538763, .3512317634538763, -.5126905370864769, .5126905370864769, -.6576711592166907, .6576711592166907, -.7815140038968014, .7815140038968014, -.8802391537269859, .8802391537269859, -.9506755217687678, .9506755217687678, -.9905754753144174, .9905754753144174], [-.0847750130417353, .0847750130417353, -.2518862256915055, .2518862256915055, -.41175116146284263, .41175116146284263, -.5597708310739475, .5597708310739475, -.6916870430603532, .6916870430603532, -.8037049589725231, .8037049589725231, -.8926024664975557, .8926024664975557, -.9558239495713977, .9558239495713977, -.9915651684209309, .9915651684209309], [0, -.16035864564022537, .16035864564022537, -.31656409996362983, .31656409996362983, -.46457074137596094, .46457074137596094, -.600545304661681, .600545304661681, -.7209661773352294, .7209661773352294, -.8227146565371428, .8227146565371428, -.9031559036148179, .9031559036148179, -.96020815213483, .96020815213483, -.9924068438435844, .9924068438435844], [-.07652652113349734, .07652652113349734, -.22778585114164507, .22778585114164507, -.37370608871541955, .37370608871541955, -.5108670019508271, .5108670019508271, -.636053680726515, .636053680726515, -.7463319064601508, .7463319064601508, -.8391169718222188, .8391169718222188, -.912234428251326, .912234428251326, -.9639719272779138, .9639719272779138, -.9931285991850949, .9931285991850949], [0, -.1455618541608951, .1455618541608951, -.2880213168024011, .2880213168024011, -.4243421202074388, .4243421202074388, -.5516188358872198, .5516188358872198, -.6671388041974123, .6671388041974123, -.7684399634756779, .7684399634756779, -.8533633645833173, .8533633645833173, -.9200993341504008, .9200993341504008, -.9672268385663063, .9672268385663063, -.9937521706203895, .9937521706203895], [-.06973927331972223, .06973927331972223, -.20786042668822127, .20786042668822127, -.34193582089208424, .34193582089208424, -.469355837986757, .469355837986757, -.5876404035069116, .5876404035069116, -.6944872631866827, .6944872631866827, -.7878168059792081, .7878168059792081, -.8658125777203002, .8658125777203002, -.926956772187174, .926956772187174, -.9700604978354287, .9700604978354287, -.9942945854823992, .9942945854823992], [0, -.1332568242984661, .1332568242984661, -.26413568097034495, .26413568097034495, -.3903010380302908, .3903010380302908, -.5095014778460075, .5095014778460075, -.6196098757636461, .6196098757636461, -.7186613631319502, .7186613631319502, -.8048884016188399, .8048884016188399, -.8767523582704416, .8767523582704416, -.9329710868260161, .9329710868260161, -.9725424712181152, .9725424712181152, -.9947693349975522, .9947693349975522], [-.06405689286260563, .06405689286260563, -.1911188674736163, .1911188674736163, -.3150426796961634, .3150426796961634, -.4337935076260451, .4337935076260451, -.5454214713888396, .5454214713888396, -.6480936519369755, .6480936519369755, -.7401241915785544, .7401241915785544, -.820001985973903, .820001985973903, -.8864155270044011, .8864155270044011, -.9382745520027328, .9382745520027328, -.9747285559713095, .9747285559713095, -.9951872199970213, .9951872199970213]],
      An = [[], [], [1, 1], [.8888888888888888, .5555555555555556, .5555555555555556], [.6521451548625461, .6521451548625461, .34785484513745385, .34785484513745385], [.5688888888888889, .47862867049936647, .47862867049936647, .23692688505618908, .23692688505618908], [.3607615730481386, .3607615730481386, .46791393457269104, .46791393457269104, .17132449237917036, .17132449237917036], [.4179591836734694, .3818300505051189, .3818300505051189, .27970539148927664, .27970539148927664, .1294849661688697, .1294849661688697], [.362683783378362, .362683783378362, .31370664587788727, .31370664587788727, .22238103445337448, .22238103445337448, .10122853629037626, .10122853629037626], [.3302393550012598, .1806481606948574, .1806481606948574, .08127438836157441, .08127438836157441, .31234707704000286, .31234707704000286, .26061069640293544, .26061069640293544], [.29552422471475287, .29552422471475287, .26926671930999635, .26926671930999635, .21908636251598204, .21908636251598204, .1494513491505806, .1494513491505806, .06667134430868814, .06667134430868814], [.2729250867779006, .26280454451024665, .26280454451024665, .23319376459199048, .23319376459199048, .18629021092773426, .18629021092773426, .1255803694649046, .1255803694649046, .05566856711617366, .05566856711617366], [.24914704581340277, .24914704581340277, .2334925365383548, .2334925365383548, .20316742672306592, .20316742672306592, .16007832854334622, .16007832854334622, .10693932599531843, .10693932599531843, .04717533638651183, .04717533638651183], [.2325515532308739, .22628318026289723, .22628318026289723, .2078160475368885, .2078160475368885, .17814598076194574, .17814598076194574, .13887351021978725, .13887351021978725, .09212149983772845, .09212149983772845, .04048400476531588, .04048400476531588], [.2152638534631578, .2152638534631578, .2051984637212956, .2051984637212956, .18553839747793782, .18553839747793782, .15720316715819355, .15720316715819355, .12151857068790319, .12151857068790319, .08015808715976021, .08015808715976021, .03511946033175186, .03511946033175186], [.2025782419255613, .19843148532711158, .19843148532711158, .1861610000155622, .1861610000155622, .16626920581699392, .16626920581699392, .13957067792615432, .13957067792615432, .10715922046717194, .10715922046717194, .07036604748810812, .07036604748810812, .03075324199611727, .03075324199611727], [.1894506104550685, .1894506104550685, .18260341504492358, .18260341504492358, .16915651939500254, .16915651939500254, .14959598881657674, .14959598881657674, .12462897125553388, .12462897125553388, .09515851168249279, .09515851168249279, .062253523938647894, .062253523938647894, .027152459411754096, .027152459411754096], [.17944647035620653, .17656270536699264, .17656270536699264, .16800410215645004, .16800410215645004, .15404576107681028, .15404576107681028, .13513636846852548, .13513636846852548, .11188384719340397, .11188384719340397, .08503614831717918, .08503614831717918, .0554595293739872, .0554595293739872, .02414830286854793, .02414830286854793], [.1691423829631436, .1691423829631436, .16427648374583273, .16427648374583273, .15468467512626524, .15468467512626524, .14064291467065065, .14064291467065065, .12255520671147846, .12255520671147846, .10094204410628717, .10094204410628717, .07642573025488905, .07642573025488905, .0497145488949698, .0497145488949698, .02161601352648331, .02161601352648331], [.1610544498487837, .15896884339395434, .15896884339395434, .15276604206585967, .15276604206585967, .1426067021736066, .1426067021736066, .12875396253933621, .12875396253933621, .11156664554733399, .11156664554733399, .09149002162245, .09149002162245, .06904454273764123, .06904454273764123, .0448142267656996, .0448142267656996, .019461788229726478, .019461788229726478], [.15275338713072584, .15275338713072584, .14917298647260374, .14917298647260374, .14209610931838204, .14209610931838204, .13168863844917664, .13168863844917664, .11819453196151841, .11819453196151841, .10193011981724044, .10193011981724044, .08327674157670475, .08327674157670475, .06267204833410907, .06267204833410907, .04060142980038694, .04060142980038694, .017614007139152118, .017614007139152118], [.14608113364969041, .14452440398997005, .14452440398997005, .13988739479107315, .13988739479107315, .13226893863333747, .13226893863333747, .12183141605372853, .12183141605372853, .10879729916714838, .10879729916714838, .09344442345603386, .09344442345603386, .0761001136283793, .0761001136283793, .057134425426857205, .057134425426857205, .036953789770852494, .036953789770852494, .016017228257774335, .016017228257774335], [.13925187285563198, .13925187285563198, .13654149834601517, .13654149834601517, .13117350478706238, .13117350478706238, .12325237681051242, .12325237681051242, .11293229608053922, .11293229608053922, .10041414444288096, .10041414444288096, .08594160621706773, .08594160621706773, .06979646842452049, .06979646842452049, .052293335152683286, .052293335152683286, .03377490158481415, .03377490158481415, .0146279952982722, .0146279952982722], [.13365457218610619, .1324620394046966, .1324620394046966, .12890572218808216, .12890572218808216, .12304908430672953, .12304908430672953, .11499664022241136, .11499664022241136, .10489209146454141, .10489209146454141, .09291576606003515, .09291576606003515, .07928141177671895, .07928141177671895, .06423242140852585, .06423242140852585, .04803767173108467, .04803767173108467, .030988005856979445, .030988005856979445, .013411859487141771, .013411859487141771], [.12793819534675216, .12793819534675216, .1258374563468283, .1258374563468283, .12167047292780339, .12167047292780339, .1155056680537256, .1155056680537256, .10744427011596563, .10744427011596563, .09761865210411388, .09761865210411388, .08619016153195327, .08619016153195327, .0733464814110803, .0733464814110803, .05929858491543678, .05929858491543678, .04427743881741981, .04427743881741981, .028531388628933663, .028531388628933663, .0123412297999872, .0123412297999872]],
      qn = [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]],
      kn = 2 * Math.PI,
      Pn = function (t, n, e, r, i, a, o, s, h) {
    var u = Math.sin(i * kn / 360),
        c = Math.cos(i * kn / 360),
        f = c * (t - s) / 2 + u * (n - h) / 2,
        l = -u * (t - s) / 2 + c * (n - h) / 2;if (0 === f && 0 === l) return [];if (0 === e || 0 === r) return [];e = Math.abs(e), r = Math.abs(r);var p = f * f / (e * e) + l * l / (r * r);p > 1 && (e *= Math.sqrt(p), r *= Math.sqrt(p));var g = S(t, n, s, h, a, o, e, r, u, c),
        v = [],
        x = g[2],
        y = g[3],
        d = Math.max(Math.ceil(Math.abs(y) / (kn / 4)), 1);y /= d;for (var m = 0; m < d; m++) v.push(C(x, y)), x += y;return v.map(function (t) {
      for (var n = 0; n < t.length; n += 2) {
        var i = t[n + 0],
            a = t[n + 1];i *= e, a *= r;var o = c * i - u * a,
            s = u * i + c * a;t[n + 0] = o + g[0], t[n + 1] = s + g[1];
      }return t;
    });
  },
      _n = function (t, n, e, r, i, a, o, s, h) {
    return new Z(t, n, e, r, i, a, o, s, h);
  };Z.prototype = { constructor: Z, init: function () {}, getTotalLength: function () {
      return this.length;
    }, getPointAtLength: function (t) {
      var n = this;t < 0 ? t = 0 : t > this.length && (t = this.length);for (var e = this.partialLengths.length - 1; this.partialLengths[e] >= t && this.partialLengths[e] > 0;) e--;e < this.partialLengths.length - 1 && e++;for (var r = 0, i = 0; i < e; i++) r += n.partialLengths[i];return this.curves[e].getPointAtLength(t - r);
    }, getTangentAtLength: function (t) {
      var n = this;t < 0 ? t = 0 : t > this.length && (t = this.length);for (var e = this.partialLengths.length - 1; this.partialLengths[e] >= t && this.partialLengths[e] > 0;) e--;e < this.partialLengths.length - 1 && e++;for (var r = 0, i = 0; i < e; i++) r += n.partialLengths[i];return this.curves[e].getTangentAtLength(t - r);
    }, getPropertiesAtLength: function (t) {
      var n = this.getTangentAtLength(t),
          e = this.getPointAtLength(t);return { x: e.x, y: e.y, tangentX: n.x, tangentY: n.y };
    } };var En = function (t, n, e, r) {
    return new T(t, n, e, r);
  };T.prototype.getTotalLength = function () {
    return Math.sqrt(Math.pow(this.x0 - this.x1, 2) + Math.pow(this.y0 - this.y1, 2));
  }, T.prototype.getPointAtLength = function (t) {
    var n = t / Math.sqrt(Math.pow(this.x0 - this.x1, 2) + Math.pow(this.y0 - this.y1, 2)),
        e = (this.x1 - this.x0) * n,
        r = (this.y1 - this.y0) * n;return { x: this.x0 + e, y: this.y0 + r };
  }, T.prototype.getTangentAtLength = function () {
    var t = Math.sqrt((this.x1 - this.x0) * (this.x1 - this.x0) + (this.y1 - this.y0) * (this.y1 - this.y0));return { x: (this.x1 - this.x0) / t, y: (this.y1 - this.y0) / t };
  }, T.prototype.getPropertiesAtLength = function (t) {
    var n = this.getPointAtLength(t),
        e = this.getTangentAtLength();return { x: n.x, y: n.y, tangentX: e.x, tangentY: e.y };
  };var Sn = function (t) {
    function n(t) {
      if (!t) return null;for (var a, o = Mn(t), s = [0, 0], h = [0, 0], u = 0; u < o.length; u++) "M" === o[u][0] ? (s = [o[u][1], o[u][2]], i.push(null)) : "m" === o[u][0] ? (s = [o[u][1] + s[0], o[u][2] + s[1]], i.push(null)) : "L" === o[u][0] ? (e += Math.sqrt(Math.pow(s[0] - o[u][1], 2) + Math.pow(s[1] - o[u][2], 2)), i.push(new En(s[0], o[u][1], s[1], o[u][2])), s = [o[u][1], o[u][2]]) : "l" === o[u][0] ? (e += Math.sqrt(Math.pow(o[u][1], 2) + Math.pow(o[u][2], 2)), i.push(new En(s[0], o[u][1] + s[0], s[1], o[u][2] + s[1])), s = [o[u][1] + s[0], o[u][2] + s[1]]) : "H" === o[u][0] ? (e += Math.abs(s[0] - o[u][1]), i.push(new En(s[0], o[u][1], s[1], s[1])), s[0] = o[u][1]) : "h" === o[u][0] ? (e += Math.abs(o[u][1]), i.push(new En(s[0], s[0] + o[u][1], s[1], s[1])), s[0] = o[u][1] + s[0]) : "V" === o[u][0] ? (e += Math.abs(s[1] - o[u][1]), i.push(new En(s[0], s[0], s[1], o[u][1])), s[1] = o[u][1]) : "v" === o[u][0] ? (e += Math.abs(o[u][1]), i.push(new En(s[0], s[0], s[1], s[1] + o[u][1])), s[1] = o[u][1] + s[1]) : "z" === o[u][0] || "Z" === o[u][0] ? (e += Math.sqrt(Math.pow(o[0][1] - s[0], 2) + Math.pow(o[0][2] - s[1], 2)), i.push(new En(s[0], o[0][1], s[1], o[0][2])), s = [o[0][1], o[0][2]]) : "C" === o[u][0] ? (a = new bn(s[0], s[1], o[u][1], o[u][2], o[u][3], o[u][4], o[u][5], o[u][6]), e += a.getTotalLength(), s = [o[u][5], o[u][6]], i.push(a)) : "c" === o[u][0] ? (a = new bn(s[0], s[1], s[0] + o[u][1], s[1] + o[u][2], s[0] + o[u][3], s[1] + o[u][4], s[0] + o[u][5], s[1] + o[u][6]), e += a.getTotalLength(), s = [o[u][5] + s[0], o[u][6] + s[1]], i.push(a)) : "S" === o[u][0] ? (a = u > 0 && ["C", "c", "S", "s"].indexOf(o[u - 1][0]) > -1 ? new bn(s[0], s[1], 2 * s[0] - o[u - 1][o[u - 1].length - 4], 2 * s[1] - o[u - 1][o[u - 1].length - 3], o[u][1], o[u][2], o[u][3], o[u][4]) : new bn(s[0], s[1], s[0], s[1], o[u][1], o[u][2], o[u][3], o[u][4]), e += a.getTotalLength(), s = [o[u][3], o[u][4]], i.push(a)) : "s" === o[u][0] ? (a = u > 0 && ["C", "c", "S", "s"].indexOf(o[u - 1][0]) > -1 ? new bn(s[0], s[1], s[0] + a.d.x - a.c.x, s[1] + a.d.y - a.c.y, s[0] + o[u][1], s[1] + o[u][2], s[0] + o[u][3], s[1] + o[u][4]) : new bn(s[0], s[1], s[0], s[1], s[0] + o[u][1], s[1] + o[u][2], s[0] + o[u][3], s[1] + o[u][4]), e += a.getTotalLength(), s = [o[u][3] + s[0], o[u][4] + s[1]], i.push(a)) : "Q" === o[u][0] ? (a = new bn(s[0], s[1], o[u][1], o[u][2], o[u][3], o[u][4]), e += a.getTotalLength(), i.push(a), s = [o[u][3], o[u][4]], h = [o[u][1], o[u][2]]) : "q" === o[u][0] ? (a = new bn(s[0], s[1], s[0] + o[u][1], s[1] + o[u][2], s[0] + o[u][3], s[1] + o[u][4]), e += a.getTotalLength(), h = [s[0] + o[u][1], s[1] + o[u][2]], s = [o[u][3] + s[0], o[u][4] + s[1]], i.push(a)) : "T" === o[u][0] ? (a = u > 0 && ["Q", "q", "T", "t"].indexOf(o[u - 1][0]) > -1 ? new bn(s[0], s[1], 2 * s[0] - h[0], 2 * s[1] - h[1], o[u][1], o[u][2]) : new En(s[0], o[u][1], s[1], o[u][2]), i.push(a), e += a.getTotalLength(), h = [2 * s[0] - h[0], 2 * s[1] - h[1]], s = [o[u][1], o[u][2]]) : "t" === o[u][0] ? (a = u > 0 && ["Q", "q", "T", "t"].indexOf(o[u - 1][0]) > -1 ? new bn(s[0], s[1], 2 * s[0] - h[0], 2 * s[1] - h[1], s[0] + o[u][1], s[1] + o[u][2]) : new En(s[0], s[0] + o[u][1], s[1], s[1] + o[u][2]), e += a.getTotalLength(), h = [2 * s[0] - h[0], 2 * s[1] - h[1]], s = [o[u][1] + s[0], o[u][2] + s[0]], i.push(a)) : "A" === o[u][0] ? (a = new _n(s[0], s[1], o[u][1], o[u][2], o[u][3], o[u][4], o[u][5], o[u][6], o[u][7]), e += a.getTotalLength(), s = [o[u][6], o[u][7]], i.push(a)) : "a" === o[u][0] && (a = new _n(s[0], s[1], o[u][1], o[u][2], o[u][3], o[u][4], o[u][5], s[0] + o[u][6], s[1] + o[u][7]), e += a.getTotalLength(), s = [s[0] + o[u][6], s[1] + o[u][7]], i.push(a)), r.push(e);return n;
    }var e = 0,
        r = [],
        i = [];n.getTotalLength = function () {
      return e;
    }, n.getPointAtLength = function (t) {
      var n = a(t);return i[n.i].getPointAtLength(n.fraction);
    }, n.getTangentAtLength = function (t) {
      var n = a(t);return i[n.i].getTangentAtLength(n.fraction);
    }, n.getPropertiesAtLength = function (t) {
      var n = a(t);return i[n.i].getPropertiesAtLength(n.fraction);
    };var a = function (t) {
      t < 0 ? t = 0 : t > e && (t = e);for (var n = r.length - 1; r[n] >= t && r[n] > 0;) n--;return n++, { fraction: t - r[n - 1], i: n };
    };return n(t);
  },
      Cn = 'All shapes must be supplied as arrays of [x, y] points or an SVG path string (https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d).\nExample valid ways of supplying a shape would be:\n[[0, 0], [10, 0], [10, 10]]\n"M0,0 L10,0 L10,10Z"\n',
      Zn = "flubber.all() expects two arrays of equal length as arguments. Each element in both arrays should be an array of [x, y] points or an SVG path string (https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d).",
      Tn = function (t, n) {
    for (var e, r, i, a = t.length, o = 1 / 0, s = 0; s < a; s++) !function (i) {
      r = 0, n.forEach(function (n, e) {
        var o = F(t[(i + e) % a], n);r += o * o;
      }), r < o && (o = r, e = i);
    }(s);e && (i = t.splice(0, e), t.splice.apply(t, [t.length, 0].concat(i)));
  },
      Fn = function (t, n, e) {
    void 0 === e && (e = {});var r = e.maxSegmentLength;void 0 === r && (r = 10);var i = e.string;void 0 === i && (i = !0);var a = J(t, r),
        o = J(n, r),
        s = tt(a, o, i);return !i || "string" != typeof t && "string" != typeof n ? s : function (e) {
      return e < 1e-4 && "string" == typeof t ? t : 1 - e < 1e-4 && "string" == typeof n ? n : s(e);
    };
  },
      zn = nt;nt.deviation = function (t, n, e, r) {
    var i = n && n.length,
        a = i ? n[0] * e : t.length,
        o = Math.abs(Et(t, 0, a, e));if (i) for (var s = 0, h = n.length; s < h; s++) {
      var u = n[s] * e,
          c = s < h - 1 ? n[s + 1] * e : t.length;o -= Math.abs(Et(t, u, c, e));
    }var f = 0;for (s = 0; s < r.length; s += 3) {
      var l = r[s] * e,
          p = r[s + 1] * e,
          g = r[s + 2] * e;f += Math.abs((t[l] - t[g]) * (t[p + 1] - t[l + 1]) - (t[l] - t[p]) * (t[g + 1] - t[l + 1]));
    }return 0 === o && 0 === f ? 0 : Math.abs((f - o) / o);
  }, nt.flatten = function (t) {
    for (var n = t[0][0].length, e = { vertices: [], holes: [], dimensions: n }, r = 0, i = 0; i < t.length; i++) {
      for (var a = 0; a < t[i].length; a++) for (var o = 0; o < n; o++) e.vertices.push(t[i][a][o]);i > 0 && (r += t[i - 1].length, e.holes.push(r));
    }return e;
  };var jn = function (t) {
    return t;
  },
      In = function (t) {
    if (null == t) return jn;var n,
        e,
        r = t.scale[0],
        i = t.scale[1],
        a = t.translate[0],
        o = t.translate[1];return function (t, s) {
      s || (n = e = 0);var h = 2,
          u = t.length,
          c = new Array(u);for (c[0] = (n += t[0]) * r + a, c[1] = (e += t[1]) * i + o; h < u;) c[h] = t[h], ++h;return c;
    };
  },
      Vn = function (t, n) {
    for (var e, r = t.length, i = r - n; i < --r;) e = t[i], t[i++] = t[r], t[r] = e;
  },
      Xn = function (t, n) {
    return "GeometryCollection" === n.type ? { type: "FeatureCollection", features: n.geometries.map(function (n) {
        return St(t, n);
      }) } : St(t, n);
  },
      Yn = function (t, n) {
    function e(n) {
      var e,
          r = t.arcs[n < 0 ? ~n : n],
          i = r[0];return t.transform ? (e = [0, 0], r.forEach(function (t) {
        e[0] += t[0], e[1] += t[1];
      })) : e = r[r.length - 1], n < 0 ? [e, i] : [i, e];
    }function r(t, n) {
      for (var e in t) {
        var r = t[e];delete n[r.start], delete r.start, delete r.end, r.forEach(function (t) {
          i[t < 0 ? ~t : t] = 1;
        }), s.push(r);
      }
    }var i = {},
        a = {},
        o = {},
        s = [],
        h = -1;return n.forEach(function (e, r) {
      var i,
          a = t.arcs[e < 0 ? ~e : e];a.length < 3 && !a[1][0] && !a[1][1] && (i = n[++h], n[h] = e, n[r] = i);
    }), n.forEach(function (t) {
      var n,
          r,
          i = e(t),
          s = i[0],
          h = i[1];if (n = o[s]) {
        if (delete o[n.end], n.push(t), n.end = h, r = a[h]) {
          delete a[r.start];var u = r === n ? n : n.concat(r);a[u.start = n.start] = o[u.end = r.end] = u;
        } else a[n.start] = o[n.end] = n;
      } else if (n = a[h]) {
        if (delete a[n.start], n.unshift(t), n.start = s, r = o[s]) {
          delete o[r.end];var c = r === n ? n : r.concat(n);a[c.start = r.start] = o[c.end = n.end] = c;
        } else a[n.start] = o[n.end] = n;
      } else n = [t], a[n.start = s] = o[n.end = h] = n;
    }), r(o, a), r(a, o), n.forEach(function (t) {
      i[t < 0 ? ~t : t] || s.push([t]);
    }), s;
  },
      Gn = function (t, n) {
    for (var e = 0, r = t.length; e < r;) {
      var i = e + r >>> 1;t[i] < n ? e = i + 1 : r = i;
    }return e;
  },
      On = function (t) {
    function n(t, n) {
      t.forEach(function (t) {
        t < 0 && (t = ~t);var e = i[t];e ? e.push(n) : i[t] = [n];
      });
    }function e(t, e) {
      t.forEach(function (t) {
        n(t, e);
      });
    }function r(t, n) {
      "GeometryCollection" === t.type ? t.geometries.forEach(function (t) {
        r(t, n);
      }) : t.type in o && o[t.type](t.arcs, n);
    }var i = {},
        a = t.map(function () {
      return [];
    }),
        o = { LineString: n, MultiLineString: e, Polygon: e, MultiPolygon: function (t, n) {
        t.forEach(function (t) {
          e(t, n);
        });
      } };t.forEach(r);for (var s in i) for (var h = i[s], u = h.length, c = 0; c < u; ++c) for (var f = c + 1; f < u; ++f) {
      var l,
          p = h[c],
          g = h[f];(l = a[p])[s = Gn(l, g)] !== g && l.splice(s, 0, g), (l = a[g])[s = Gn(l, p)] !== p && l.splice(s, 0, p);
    }return a;
  },
      Dn = function (t, n) {
    return t < n ? -1 : t > n ? 1 : t >= n ? 0 : NaN;
  },
      Hn = function (t) {
    return 1 === t.length && (t = Ft(t)), { left: function (n, e, r, i) {
        for (null == r && (r = 0), null == i && (i = n.length); r < i;) {
          var a = r + i >>> 1;t(n[a], e) < 0 ? r = a + 1 : i = a;
        }return r;
      }, right: function (n, e, r, i) {
        for (null == r && (r = 0), null == i && (i = n.length); r < i;) {
          var a = r + i >>> 1;t(n[a], e) > 0 ? i = a : r = a + 1;
        }return r;
      } };
  },
      Nn = Hn(Dn),
      Qn = (Nn.right, Math.sqrt(50), Math.sqrt(10), Math.sqrt(2), function (t, n) {
    return jt(zt(It(t), t), n);
  }),
      Un = function (t, n) {
    var e = t.map(function (t) {
      return n.map(function (n) {
        return Xt(t, n);
      });
    });Vt(t, n, e);return t.length > 8 ? t.map(function (t, n) {
      return n;
    }) : Vt(t, n, e);
  };t.interpolate = Fn, t.separate = Yt, t.combine = Gt, t.interpolateAll = Ot, t.splitPathString = N, t.toPathString = H, t.fromCircle = Ht, t.toCircle = Nt, t.fromRect = Qt, t.toRect = Ut, Object.defineProperty(t, "__esModule", { value: !0 });
});

}).apply(this, arguments);

},{}],4:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/after/index.js", module);
(function(){
module.exports = after

function after(count, callback, err_cb) {
    var bail = false
    err_cb = err_cb || noop
    proxy.count = count

    return (count === 0) ? callback() : proxy

    function proxy(err, result) {
        if (proxy.count <= 0) {
            throw new Error('after called too many times')
        }
        --proxy.count

        // after first error, rest are passed to err_cb
        if (err) {
            bail = true
            callback(err)
            // future error callbacks will go to error handler
            callback = err_cb
        } else if (proxy.count === 0 && !bail) {
            callback(null, result)
        }
    }
}

function noop() {}

}).apply(this, arguments);

},{}],5:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/arraybuffer.slice/index.js", module);
(function(){
/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

module.exports = function(arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

  if (start < 0) { start += bytes; }
  if (end < 0) { end += bytes; }
  if (end > bytes) { end = bytes; }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);
  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }
  return result.buffer;
};

}).apply(this, arguments);

},{}],6:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/backo2/index.js", module);
(function(){

/**
 * Expose `Backoff`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function(){
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand =  Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function(){
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function(min){
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function(max){
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function(jitter){
  this.jitter = jitter;
};


}).apply(this, arguments);

},{}],7:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/base64-arraybuffer/lib/base64-arraybuffer.js", module);
(function(){
/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function(){
  "use strict";

  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  // Use a lookup table to find the index.
  var lookup = new Uint8Array(256);
  for (var i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
  }

  exports.encode = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
    i, len = bytes.length, base64 = "";

    for (i = 0; i < len; i+=3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
      base64 += chars[bytes[i + 2] & 63];
    }

    if ((len % 3) === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode =  function(base64) {
    var bufferLength = base64.length * 0.75,
    len = base64.length, i, p = 0,
    encoded1, encoded2, encoded3, encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i+=4) {
      encoded1 = lookup[base64.charCodeAt(i)];
      encoded2 = lookup[base64.charCodeAt(i+1)];
      encoded3 = lookup[base64.charCodeAt(i+2)];
      encoded4 = lookup[base64.charCodeAt(i+3)];

      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }

    return arraybuffer;
  };
})();

}).apply(this, arguments);

},{}],8:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/blob/index.js", module);
(function(){
(function (global){
/**
 * Create a blob builder even when vendor prefixes exist
 */

var BlobBuilder = global.BlobBuilder
  || global.WebKitBlobBuilder
  || global.MSBlobBuilder
  || global.MozBlobBuilder;

/**
 * Check if Blob constructor is supported
 */

var blobSupported = (function() {
  try {
    var a = new Blob(['hi']);
    return a.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if Blob constructor supports ArrayBufferViews
 * Fails in Safari 6, so we need to map to ArrayBuffers there.
 */

var blobSupportsArrayBufferView = blobSupported && (function() {
  try {
    var b = new Blob([new Uint8Array([1,2])]);
    return b.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if BlobBuilder is supported
 */

var blobBuilderSupported = BlobBuilder
  && BlobBuilder.prototype.append
  && BlobBuilder.prototype.getBlob;

/**
 * Helper function that maps ArrayBufferViews to ArrayBuffers
 * Used by BlobBuilder constructor and old browsers that didn't
 * support it in the Blob constructor.
 */

function mapArrayBufferViews(ary) {
  for (var i = 0; i < ary.length; i++) {
    var chunk = ary[i];
    if (chunk.buffer instanceof ArrayBuffer) {
      var buf = chunk.buffer;

      // if this is a subarray, make a copy so we only
      // include the subarray region from the underlying buffer
      if (chunk.byteLength !== buf.byteLength) {
        var copy = new Uint8Array(chunk.byteLength);
        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
        buf = copy.buffer;
      }

      ary[i] = buf;
    }
  }
}

function BlobBuilderConstructor(ary, options) {
  options = options || {};

  var bb = new BlobBuilder();
  mapArrayBufferViews(ary);

  for (var i = 0; i < ary.length; i++) {
    bb.append(ary[i]);
  }

  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
};

function BlobConstructor(ary, options) {
  mapArrayBufferViews(ary);
  return new Blob(ary, options || {});
};

module.exports = (function() {
  if (blobSupported) {
    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
  } else if (blobBuilderSupported) {
    return BlobBuilderConstructor;
  } else {
    return undefined;
  }
})();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

}).apply(this, arguments);

},{}],9:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/browser-resolve/empty.js", module);
(function(){

}).apply(this, arguments);

},{}],10:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/browserify-hmr/inc/index.js", module);
(function(){
(function (global){
'use strict';

var has = require('../lib/has');
var StrSet = require('../lib/str-set');
var forEach = require('lodash/forEach');
var some = require('lodash/some');
var map = require('lodash/map');
var filter = require('lodash/filter');
var zipObject = require('lodash/zipObject');
var forOwn = require('lodash/forOwn');
var mapValues = require('lodash/mapValues');
var assign = require('lodash/assign');

function emitError(err) {
  setTimeout(function() {
    throw err;
  }, 0);
}

function makeModuleIndexesToNames(moduleMeta) {
  var moduleIndexesToNames = {};
  forOwn(moduleMeta, function(value, name) {
    moduleIndexesToNames[value.index] = name;
  });
  return moduleIndexesToNames;
}

var console = global.console ? global.console : {
  error: function(){}, log: function() {}
};

function main(
  moduleDefs, cachedModules, moduleMeta, updateUrl,
  updateMode, supportModes, ignoreUnaccepted, updateCacheBust, bundleKey,
  socketio,
  bundle__filename, bundle__dirname
) {
  var moduleIndexesToNames = makeModuleIndexesToNames(moduleMeta);

  var socket;
  var name, i, len;

  if (!global._hmr[bundleKey].setStatus) {
    var runtimeModuleInfo = {};
    var createInfoEntry = function(name) {
      runtimeModuleInfo[name] = {
        index: moduleMeta[name].index,
        hash: moduleMeta[name].hash,
        parents: new StrSet(moduleMeta[name].parents),
        module: null,
        disposeData: null,
        accepters: new StrSet(),
        accepting: new StrSet(),
        decliners: new StrSet(),
        declining: new StrSet(),
        selfAcceptCbs: [], // may contain null. nonzero length means module is self-accepting
        disposeHandlers: []
      };
    };
    for (name in moduleMeta) {
      if (has(moduleMeta, name)) {
        createInfoEntry(name);
      }
    }

    // loaders take a callback(err, data). They may give null for data if they
    // know there hasn't been an update.
    var fileReloaders = {
      fs: function(cb) {
        var fs;
        try {
          fs = require('f'+'s');
        } catch(e) {
          cb(e);
          return;
        }
        fs.readFile(localHmr.updateUrl || bundle__filename, 'utf8', cb);
      },
      ajax: function(cb) {
        var xhr;
        try {
          xhr = new XMLHttpRequest();
        } catch(e) {
          cb(e);
          return;
        }
        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4) {
            if (xhr.status === 200) {
              cb(null, xhr.responseText);
            } else {
              cb(new Error("Request had response "+xhr.status));
            }
          }
        };
        var url = localHmr.updateUrl + (updateCacheBust?'?_v='+(+new Date()):'');
        xhr.open('GET', url, true);
        xhr.send();
      }
    };

    var lastScriptData = null;

    // cb(err, expectUpdate)
    var reloadAndRunScript = function(cb) {
      if (!has(fileReloaders, localHmr.updateMode)) {
        cb(new Error("updateMode "+localHmr.updateMode+" not implemented"));
        return;
      }
      var reloader = fileReloaders[localHmr.updateMode];
      reloader(function(err, data) {
        if (err || !data || lastScriptData === data) {
          cb(err, false);
          return;
        }
        lastScriptData = data;
        localHmr.newLoad = null;
        try {
          //jshint evil:true
          if (bundle__filename || bundle__dirname) {
            new Function('require', '__filename', '__dirname', data)(require, bundle__filename, bundle__dirname);
          } else {
            new Function('require', data)(require);
          }
          // running the file sets _hmr.newLoad
        } catch (err2) {
          localHmr.newLoad = null;
          cb(err2);
          return;
        }
        if (!localHmr.newLoad) {
          cb(new Error("Reloaded script did not set hot module reload data"));
          return;
        }
        cb(null, true);
      });
    };

    var getOutdatedModules = function() {
      var outdated = [];
      var name;
      // add changed and deleted modules
      for (name in runtimeModuleInfo) {
        if (has(runtimeModuleInfo, name)) {
          if (
            !has(localHmr.newLoad.moduleMeta, name) ||
            runtimeModuleInfo[name].hash !== localHmr.newLoad.moduleMeta[name].hash
          ) {
            outdated.push(name);
          }
        }
      }
      // add brand new modules
      for (name in localHmr.newLoad.moduleMeta) {
        if (has(localHmr.newLoad.moduleMeta, name)) {
          if (!has(runtimeModuleInfo, name)) {
            outdated.push(name);
          }
        }
      }
      // add modules that are non-accepting/declining parents of outdated modules.
      // important: if outdated has new elements added during the loop,
      // then we iterate over them too.
      for (var i=0; i<outdated.length; i++) {
        name = outdated[i];
        //jshint -W083
        if (has(runtimeModuleInfo, name)) {
          runtimeModuleInfo[name].parents.forEach(function(parentName) {
            if (
              runtimeModuleInfo[name].selfAcceptCbs.length === 0 &&
              !runtimeModuleInfo[name].accepters.has(parentName) &&
              !runtimeModuleInfo[name].decliners.has(parentName) &&
              outdated.indexOf(parentName) === -1
            ) {
              outdated.push(parentName);
            }
          });
        }
      }
      return outdated;
    };

    var moduleHotCheck = function(autoApply, cb) {
      if (typeof autoApply === 'function') {
        cb = autoApply;
        autoApply = false;
      }
      if (!cb) {
        throw new Error("module.hot.check callback parameter required");
      }
      if (localHmr.status !== 'idle') {
        cb(new Error("module.hot.check can only be called while status is idle"));
        return;
      }
      if (updateMode === 'websocket') {
        cb(new Error("module.hot.check can't be used when update mode is websocket"));
        return;
      }

      localHmr.setStatus('check');
      reloadAndRunScript(function(err, expectUpdate) {
        if (err || !expectUpdate) {
          localHmr.setStatus('idle');
          cb(err, null);
          return;
        }
        var outdatedModules = getOutdatedModules();
        if (outdatedModules.length === 0) {
          localHmr.setStatus('idle');
          cb(null, null);
        } else {
          localHmr.setStatus('ready');
          if (autoApply) {
            moduleHotApply(autoApply, cb);
          } else {
            cb(null, outdatedModules);
          }
        }
      });
    };

    var moduleHotApply = function(options, cb) {
      if (typeof options === 'function') {
        cb = options;
        options = null;
      }
      if (!cb) {
        throw new Error("module.hot.apply callback parameter required");
      }
      var ignoreUnaccepted = !!(options && options.ignoreUnaccepted);
      if (localHmr.status !== 'ready') {
        cb(new Error("module.hot.apply can only be called while status is ready"));
        return;
      }

      var outdatedModules = getOutdatedModules();
      var isValueNotInOutdatedModules = function(value) {
        return outdatedModules.indexOf(value) === -1;
      };
      var i, len;
      var acceptedUpdates = filter(outdatedModules, function(name) {
        if (has(runtimeModuleInfo, name)) {
          if (
            runtimeModuleInfo[name].decliners.some(isValueNotInOutdatedModules) ||
            (
              runtimeModuleInfo[name].accepters.size() === 0 &&
              runtimeModuleInfo[name].selfAcceptCbs.length === 0 &&
              runtimeModuleInfo[name].parents.some(isValueNotInOutdatedModules)
            )
          ) {
            return false;
          }
        }
        return true;
      });
      if (!ignoreUnaccepted && outdatedModules.length !== acceptedUpdates.length) {
        localHmr.setStatus('idle');
        cb(new Error("Some updates were declined"));
        return;
      }
      var an;
      for (i=0, len=acceptedUpdates.length; i<len; i++) {
        an = acceptedUpdates[i];
        if (has(runtimeModuleInfo, an)) {
          runtimeModuleInfo[an].disposeData = {};
          for (var j=0; j<runtimeModuleInfo[an].disposeHandlers.length; j++) {
            try {
              runtimeModuleInfo[an].disposeHandlers[j].call(null, runtimeModuleInfo[an].disposeData);
            } catch(e) {
              localHmr.setStatus('idle');
              cb(e || new Error("Unknown dispose callback error"));
              return;
            }
          }
        }
      }
      var selfAccepters = [];
      for (i=0, len=acceptedUpdates.length; i<len; i++) {
        an = acceptedUpdates[i];
        //jshint -W083
        if (!has(runtimeModuleInfo, an)) {
          // new modules
          runtimeModuleInfo[an] = {
            index: an,
            hash: localHmr.newLoad.moduleMeta[an].hash,
            parents: new StrSet(localHmr.newLoad.moduleMeta[an].parents),
            module: null,
            disposeData: null,
            accepters: new StrSet(),
            accepting: new StrSet(),
            decliners: new StrSet(),
            declining: new StrSet(),
            selfAcceptCbs: [],
            disposeHandlers: []
          };
        } else if (!has(localHmr.newLoad.moduleMeta, an)) {
          // removed modules
          delete cachedModules[runtimeModuleInfo[an].index];
          delete runtimeModuleInfo[an];
          continue;
        } else {
          // updated modules
          runtimeModuleInfo[an].hash = localHmr.newLoad.moduleMeta[an].hash;
          runtimeModuleInfo[an].parents = new StrSet(localHmr.newLoad.moduleMeta[an].parents);
          runtimeModuleInfo[an].module = null;
          runtimeModuleInfo[an].accepting.forEach(function(accepted) {
            runtimeModuleInfo[accepted].accepters.del(an);
          });
          runtimeModuleInfo[an].accepting = new StrSet();
          runtimeModuleInfo[an].declining.forEach(function(accepted) {
            runtimeModuleInfo[accepted].decliners.del(an);
          });
          runtimeModuleInfo[an].declining = new StrSet();
          forEach(runtimeModuleInfo[an].selfAcceptCbs, function(cb) {
            selfAccepters.push({name: an, cb: cb});
          });
          runtimeModuleInfo[an].selfAcceptCbs = [];
          runtimeModuleInfo[an].disposeHandlers = [];
        }

        moduleDefs[runtimeModuleInfo[an].index] = [
          // module function
          localHmr.newLoad.moduleDefs[localHmr.newLoad.moduleMeta[an].index][0],
          // module deps
          mapValues(localHmr.newLoad.moduleDefs[localHmr.newLoad.moduleMeta[an].index][1], function(depIndex, depRef) {
            var depName = localHmr.newLoad.moduleIndexesToNames[depIndex];
            if (has(localHmr.runtimeModuleInfo, depName)) {
              return localHmr.runtimeModuleInfo[depName].index;
            } else {
              return depName;
            }
          })
        ];
        cachedModules[runtimeModuleInfo[an].index] = null;
      }

      // Update the accept handlers list and call the right ones
      var errCanWait = null;
      var updatedNames = new StrSet(acceptedUpdates);
      var oldUpdateHandlers = localHmr.updateHandlers;
      var relevantUpdateHandlers = [];
      var newUpdateHandlers = [];
      for (i=0, len=oldUpdateHandlers.length; i<len; i++) {
        if (!updatedNames.has(oldUpdateHandlers[i].accepter)) {
          newUpdateHandlers.push(oldUpdateHandlers[i]);
        }
        if (updatedNames.hasIntersection(oldUpdateHandlers[i].deps)) {
          relevantUpdateHandlers.push(oldUpdateHandlers[i]);
        }
      }
      localHmr.updateHandlers = newUpdateHandlers;
      for (i=0, len=relevantUpdateHandlers.length; i<len; i++) {
        try {
          relevantUpdateHandlers[i].cb.call(null, acceptedUpdates);
        } catch(e) {
          if (errCanWait) emitError(errCanWait);
          errCanWait = e;
        }
      }

      // Call the self-accepting modules
      forEach(selfAccepters, function(obj) {
        try {
          require(runtimeModuleInfo[obj.name].index);
        } catch(e) {
          if (obj.cb) {
            obj.cb.call(null, e);
          } else {
            if (errCanWait) emitError(errCanWait);
            errCanWait = e;
          }
        }
      });

      localHmr.setStatus('idle');
      cb(errCanWait, acceptedUpdates);
    };

    var moduleHotSetUpdateMode = function(mode, options) {
      options = options || {};

      if (supportModes.indexOf(mode) === -1) {
        throw new Error("Mode "+mode+" not in supportModes. Please check the Browserify-HMR plugin options.");
      }
      if (mode === 'ajax' && !options.url) {
        throw new Error("url required for ajax update mode");
      }
      if (localHmr.status !== 'idle') {
        throw new Error("module.hot.setUpdateMode can only be called while status is idle");
      }

      localHmr.newLoad = null;
      localHmr.updateMode = updateMode = mode;
      localHmr.updateUrl = updateUrl = options.url;
      updateCacheBust = options.cacheBust;
      ignoreUnaccepted = has(options, 'ignoreUnaccepted') ? options.ignoreUnaccepted : true;

      if (socket) {
        socket.disconnect();
        socket = null;
      }
      if (mode === 'websocket') {
        socket = setupSocket();
      }
    };

    var setupSocket = function() {
      var url = updateUrl || 'http://localhost:3123';
      var socket = socketio(url, {'force new connection': true});
      console.log('[HMR] Attempting websocket connection to', url);

      var isAcceptingMessages = false;
      socket.on('connect', function() {
        isAcceptingMessages = false;
        var syncMsg = mapValues(runtimeModuleInfo, function(value, name) {
          return {
            hash: value.hash
          };
        });
        socket.emit('sync', syncMsg);
      });
      var isUpdating = false;
      var queuedUpdateMessages = [];
      socket.on('sync confirm', function() {
        console.log('[HMR] Websocket connection successful.');
        isAcceptingMessages = true;
        queuedUpdateMessages = [];
      });
      socket.on('disconnect', function() {
        console.log('[HMR] Websocket connection lost.');
      });
      var acceptNewModules = function(msg) {
        // Make sure we don't accept new modules before we've synced ourselves.
        if (!isAcceptingMessages) return;
        if (isUpdating) {
          queuedUpdateMessages.push(msg);
          return;
        }
        // Take the message and create a localHmr.newLoad value as if the
        // bundle had been re-executed, then call moduleHotApply.
        isUpdating = true;

        // random id so we can make the normally unnamed args have random names
        var rid = String(Math.random()).replace(/[^0-9]/g, '');

        var newModuleDefs = localHmr.newLoad ? localHmr.newLoad.moduleDefs : assign({}, moduleDefs);
        var newModuleMeta = localHmr.newLoad ?
          localHmr.newLoad.moduleMeta : mapValues(runtimeModuleInfo, function(value, key) {
            return {
              index: value.index,
              hash: value.hash,
              parents: value.parents.toArray()
            };
          });
        forOwn(msg.newModuleData, function(value, key) {
          newModuleMeta[key] = {
            index: value.index,
            hash: value.hash,
            parents: value.parents
          };
        });
        forEach(msg.removedModules, function(removedName) {
          delete newModuleDefs[runtimeModuleInfo[removedName].index];
          delete newModuleMeta[removedName];
        });
        var newModuleIndexesToNames = makeModuleIndexesToNames(newModuleMeta);
        forOwn(msg.newModuleData, function(value, key) {
          // this part needs to run after newModuleMeta and
          // newModuleIndexesToNames are populated.
          var newModuleFunction = (function() {
            var fn;
            //jshint evil:true
            if (bundle__filename || bundle__dirname) {
              fn = new Function('require', 'module', 'exports', '_u1'+rid, '_u2'+rid, '__u3'+rid, '__u4'+rid, '__filename', '__dirname', value.source);
              return function(require, module, exports, _u1, _u2, _u3, _u4) {
                global._hmr[bundleKey].initModule(key, module);
                fn.call(this, require, module, exports, _u1, _u2, _u3, _u4, bundle__filename, bundle__dirname);
              };
            } else {
              fn = new Function('require', 'module', 'exports',  '_u1'+rid, '_u2'+rid, '__u3'+rid, '__u4'+rid, value.source);
              return function(require, module, exports, _u1, _u2, _u3, _u4) {
                global._hmr[bundleKey].initModule(key, module);
                fn.call(this, require, module, exports, _u1, _u2, _u3, _u4);
              };
            }
          })();

          newModuleDefs[newModuleMeta[key].index] = [
            // module function
            newModuleFunction,
            // module deps
            mapValues(value.deps, function(depIndex, depRef) {
              var depName = newModuleIndexesToNames[depIndex];
              if (has(newModuleMeta, depName)) {
                return newModuleMeta[depName].index;
              } else {
                return depName;
              }
            })
          ];
        });
        localHmr.newLoad = {
          moduleDefs: newModuleDefs,
          moduleMeta: newModuleMeta,
          moduleIndexesToNames: newModuleIndexesToNames
        };
        localHmr.setStatus('ready');
        var outdatedModules = getOutdatedModules();
        moduleHotApply({ignoreUnaccepted: ignoreUnaccepted}, function(err, updatedNames) {
          if (err) {
            console.error('[HMR] Error applying update', err);
          }
          if (updatedNames) {
            console.log('[HMR] Updated modules', updatedNames);
            if (outdatedModules.length !== updatedNames.length) {
              var notUpdatedNames = filter(outdatedModules, function(name) {
                return updatedNames.indexOf(name) === -1;
              });
              console.log('[HMR] Some modules were not updated', notUpdatedNames);
            }
          }
          isUpdating = false;
          var queuedMsg;
          while ((queuedMsg = queuedUpdateMessages.shift())) {
            acceptNewModules(queuedMsg);
          }
        });
      };
      socket.on('new modules', acceptNewModules);
      return socket;
    };

    var localHmr = {
      updateUrl: updateUrl,
      updateMode: updateMode,
      runtimeModuleInfo: runtimeModuleInfo,

      status: "idle",
      setStatus: function(status) {
        this.status = status;
        var statusHandlers = this.statusHandlers.slice();
        for (var i=0, len=statusHandlers.length; i<len; i++) {
          statusHandlers[i].call(null, status);
        }
      },
      statusHandlers: [],
      updateHandlers: [],

      // during a reload this is set to an object with moduleDefs,
      // moduleMeta, and moduleIndexesToNames properties
      newLoad: null,

      initModule: function(name, module) {
        runtimeModuleInfo[name].module = module;
        module.hot = {
          accept: function(deps, cb) {
            if (!cb && (!deps || typeof deps === 'function')) { // self
              cb = deps;
              deps = null;
              runtimeModuleInfo[name].selfAcceptCbs.push(cb);
            } else {
              if (typeof deps === 'string') {
                deps = [deps];
              }
              var depNames = new StrSet();
              for (var i=0, depsLen=deps.length; i<depsLen; i++) {
                var depIndex = moduleDefs[runtimeModuleInfo[name].index][1][deps[i]];
                if (depIndex === undefined || !has(moduleIndexesToNames, depIndex)) {
                  throw new Error("File does not use dependency: "+deps[i]);
                }
                depNames.add(moduleIndexesToNames[depIndex]);
              }
              deps = null;
              depNames.forEach(function(depName) {
                runtimeModuleInfo[depName].accepters.add(name);
                runtimeModuleInfo[name].accepting.add(depName);
              });
              if (cb) {
                localHmr.updateHandlers.push({
                  accepter: name,
                  deps: depNames,
                  cb: cb
                });
              }
            }
          },
          decline: function(deps) {
            if (!deps) { // self
              runtimeModuleInfo[name].decliners.add(name);
              runtimeModuleInfo[name].declining.add(name);
            } else {
              if (typeof deps === 'string') {
                deps = [deps];
              }
              for (var i=0, depsLen=deps.length; i<depsLen; i++) {
                var depIndex = moduleDefs[runtimeModuleInfo[name].index][1][deps[i]];
                if (depIndex === undefined || !has(moduleIndexesToNames, depIndex)) {
                  throw new Error("File does not use dependency: "+deps[i]);
                }
                var depName = moduleIndexesToNames[depIndex];
                runtimeModuleInfo[depName].decliners.add(name);
                runtimeModuleInfo[name].declining.add(depName);
              }
            }
          },
          data: runtimeModuleInfo[name].disposeData,
          dispose: function(cb) {
            return this.addDisposeHandler(cb);
          },
          addDisposeHandler: function(cb) {
            runtimeModuleInfo[name].disposeHandlers.push(cb);
          },
          removeDisposeHandler: function(cb) {
            var ix = runtimeModuleInfo[name].disposeHandlers.indexOf(cb);
            if (ix !== -1) {
              runtimeModuleInfo[name].disposeHandlers.splice(ix, 1);
            }
          },

          // Management
          check: moduleHotCheck,
          apply: moduleHotApply,
          status: function(cb) {
            if (cb) {
              return this.addStatusHandler(cb);
            }
            return localHmr.status;
          },
          addStatusHandler: function(cb) {
            localHmr.statusHandlers.push(cb);
          },
          removeStatusHandler: function(cb) {
            var ix = localHmr.statusHandlers.indexOf(cb);
            if (ix !== -1) {
              localHmr.statusHandlers.splice(ix, 1);
            }
          },
          setUpdateMode: moduleHotSetUpdateMode
        };
      }
    };
    global._hmr[bundleKey] = localHmr;

    if (updateMode === 'websocket') {
      socket = setupSocket();
    }
    return true;
  } else { // We're in a reload!
    global._hmr[bundleKey].newLoad = {
      moduleDefs: moduleDefs,
      moduleMeta: moduleMeta,
      moduleIndexesToNames: moduleIndexesToNames
    };
    return false;
  }
}

module.exports = main;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

}).apply(this, arguments);

},{"../lib/has":11,"../lib/str-set":12,"lodash/assign":154,"lodash/filter":157,"lodash/forEach":158,"lodash/forOwn":159,"lodash/map":174,"lodash/mapValues":175,"lodash/some":178,"lodash/zipObject":182}],11:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/browserify-hmr/lib/has.js", module);
(function(){
'use strict';

function has(object, propName) {
  return Object.prototype.hasOwnProperty.call(object, propName);
}
module.exports = has;

}).apply(this, arguments);

},{}],12:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/browserify-hmr/lib/str-set.js", module);
(function(){
'use strict';

var has = require('./has');

function StrSet(other) {
  this._map = {};
  this._size = 0;
  if (other) {
    for (var i=0,len=other.length; i<len; i++) {
      this.add(other[i]);
    }
  }
}
StrSet.prototype.add = function(value) {
  if (!this.has(value)) {
    this._map[value] = true;
    this._size++;
  }
};
StrSet.prototype.has = function(value) {
  return has(this._map, value);
};
StrSet.prototype.del = function(value) {
  if (this.has(value)) {
    delete this._map[value];
    this._size--;
  }
};
StrSet.prototype.size = function() {
  return this._size;
};
StrSet.prototype.forEach = function(cb) {
  for (var value in this._map) {
    if (has(this._map, value)) {
      cb(value);
    }
  }
};
StrSet.prototype.some = function(cb) {
  for (var value in this._map) {
    if (has(this._map, value)) {
      if (cb(value)) {
        return true;
      }
    }
  }
  return false;
};
StrSet.prototype.every = function(cb) {
  return !this.some(function(x) {
    return !cb(x);
  });
};
StrSet.prototype.hasIntersection = function(otherStrSet) {
  var value;
  if (this._size < otherStrSet._size) {
    return this.some(function(value) {
      return otherStrSet.has(value);
    });
  } else {
    var self = this;
    return otherStrSet.some(function(value) {
      return self.has(value);
    });
  }
};
StrSet.prototype.toArray = function() {
  var arr = [];
  this.forEach(function(value) {
    arr.push(value);
  });
  return arr;
};

module.exports = StrSet;

}).apply(this, arguments);

},{"./has":11}],13:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/component-bind/index.js", module);
(function(){
/**
 * Slice reference.
 */

var slice = [].slice;

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function(obj, fn){
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function(){
    return fn.apply(obj, args.concat(slice.call(arguments)));
  }
};

}).apply(this, arguments);

},{}],14:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/component-emitter/index.js", module);
(function(){

/**
 * Expose `Emitter`.
 */

module.exports = Emitter;

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks[event] = this._callbacks[event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  var self = this;
  this._callbacks = this._callbacks || {};

  function on() {
    self.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks[event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks[event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks[event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks[event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

}).apply(this, arguments);

},{}],15:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/component-inherit/index.js", module);
(function(){

module.exports = function(a, b){
  var fn = function(){};
  fn.prototype = b.prototype;
  a.prototype = new fn;
  a.prototype.constructor = a;
};
}).apply(this, arguments);

},{}],16:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/engine.io-client/index.js", module);
(function(){

module.exports = require('./lib/index');

}).apply(this, arguments);

},{"./lib/index":17}],17:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/engine.io-client/lib/index.js", module);
(function(){

module.exports = require('./socket');

/**
 * Exports parser
 *
 * @api public
 *
 */
module.exports.parser = require('engine.io-parser');

}).apply(this, arguments);

},{"./socket":18,"engine.io-parser":30}],18:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/engine.io-client/lib/socket.js", module);
(function(){
(function (global){
/**
 * Module dependencies.
 */

var transports = require('./transports/index');
var Emitter = require('component-emitter');
var debug = require('debug')('engine.io-client:socket');
var index = require('indexof');
var parser = require('engine.io-parser');
var parseuri = require('parseuri');
var parsejson = require('parsejson');
var parseqs = require('parseqs');

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket (uri, opts) {
  if (!(this instanceof Socket)) return new Socket(uri, opts);

  opts = opts || {};

  if (uri && 'object' === typeof uri) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.hostname = uri.host;
    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  } else if (opts.host) {
    opts.hostname = parseuri(opts.host).host;
  }

  this.secure = null != opts.secure ? opts.secure
    : (global.location && 'https:' === location.protocol);

  if (opts.hostname && !opts.port) {
    // if no port is specified manually, use the protocol default
    opts.port = this.secure ? '443' : '80';
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname ||
    (global.location ? location.hostname : 'localhost');
  this.port = opts.port || (global.location && location.port
      ? location.port
      : (this.secure ? 443 : 80));
  this.query = opts.query || {};
  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.readyState = '';
  this.writeBuffer = [];
  this.prevBufferLen = 0;
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
    this.perMessageDeflate.threshold = 1024;
  }

  // SSL options for Node.js client
  this.pfx = opts.pfx || null;
  this.key = opts.key || null;
  this.passphrase = opts.passphrase || null;
  this.cert = opts.cert || null;
  this.ca = opts.ca || null;
  this.ciphers = opts.ciphers || null;
  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;
  this.forceNode = !!opts.forceNode;

  // other options for Node.js client
  var freeGlobal = typeof global === 'object' && global;
  if (freeGlobal.global === freeGlobal) {
    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
      this.extraHeaders = opts.extraHeaders;
    }

    if (opts.localAddress) {
      this.localAddress = opts.localAddress;
    }
  }

  // set on handshake
  this.id = null;
  this.upgrades = null;
  this.pingInterval = null;
  this.pingTimeout = null;

  // set on heartbeat
  this.pingIntervalTimer = null;
  this.pingTimeoutTimer = null;

  this.open();
}

Socket.priorWebsocketSuccess = false;

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = require('./transport');
Socket.transports = require('./transports/index');
Socket.parser = require('engine.io-parser');

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query);

  // append engine.io protocol identifier
  query.EIO = parser.protocol;

  // transport name
  query.transport = name;

  // session id if we already have one
  if (this.id) query.sid = this.id;

  var transport = new transports[name]({
    agent: this.agent,
    hostname: this.hostname,
    port: this.port,
    secure: this.secure,
    path: this.path,
    query: query,
    forceJSONP: this.forceJSONP,
    jsonp: this.jsonp,
    forceBase64: this.forceBase64,
    enablesXDR: this.enablesXDR,
    timestampRequests: this.timestampRequests,
    timestampParam: this.timestampParam,
    policyPort: this.policyPort,
    socket: this,
    pfx: this.pfx,
    key: this.key,
    passphrase: this.passphrase,
    cert: this.cert,
    ca: this.ca,
    ciphers: this.ciphers,
    rejectUnauthorized: this.rejectUnauthorized,
    perMessageDeflate: this.perMessageDeflate,
    extraHeaders: this.extraHeaders,
    forceNode: this.forceNode,
    localAddress: this.localAddress
  });

  return transport;
};

function clone (obj) {
  var o = {};
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }
  return o;
}

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */
Socket.prototype.open = function () {
  var transport;
  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
    transport = 'websocket';
  } else if (0 === this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function () {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }
  this.readyState = 'opening';

  // Retry with the next transport if the transport is disabled (jsonp: false)
  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

Socket.prototype.setTransport = function (transport) {
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  }

  // set up transport
  this.transport = transport;

  // set up transport listeners
  transport
  .on('drain', function () {
    self.onDrain();
  })
  .on('packet', function (packet) {
    self.onPacket(packet);
  })
  .on('error', function (e) {
    self.onError(e);
  })
  .on('close', function () {
    self.onClose('transport close');
  });
};

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, { probe: 1 });
  var failed = false;
  var self = this;

  Socket.priorWebsocketSuccess = false;

  function onTransportOpen () {
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }
    if (failed) return;

    debug('probe transport "%s" opened', name);
    transport.send([{ type: 'ping', data: 'probe' }]);
    transport.once('packet', function (msg) {
      if (failed) return;
      if ('pong' === msg.type && 'probe' === msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        if (!transport) return;
        Socket.priorWebsocketSuccess = 'websocket' === transport.name;

        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' === self.readyState) return;
          debug('changing transport and sending upgrade packet');

          cleanup();

          self.setTransport(transport);
          transport.send([{ type: 'upgrade' }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport () {
    if (failed) return;

    // Any callback called by transport should be ignored since now
    failed = true;

    cleanup();

    transport.close();
    transport = null;
  }

  // Handle any error that happens while probing
  function onerror (err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;

    freezeTransport();

    debug('probe transport "%s" failed because of error: %s', name, err);

    self.emit('upgradeError', error);
  }

  function onTransportClose () {
    onerror('transport closed');
  }

  // When the socket is closed while we're probing
  function onclose () {
    onerror('socket closed');
  }

  // When the socket is upgraded while we're probing
  function onupgrade (to) {
    if (transport && to.name !== transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  }

  // Remove all listeners on the transport and on self
  function cleanup () {
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);

  this.once('close', onclose);
  this.once('upgrading', onupgrade);

  transport.open();
};

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
  this.emit('open');
  this.flush();

  // we check for `readyState` in case an `open`
  // listener already closed the socket
  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');
    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};

/**
 * Handles a packet.
 *
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('opening' === this.readyState || 'open' === this.readyState ||
      'closing' === this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

    this.emit('packet', packet);

    // Socket is live - any packet counts
    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(parsejson(packet.data));
        break;

      case 'pong':
        this.setPing();
        this.emit('pong');
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.onError(err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen();
  // In case open handler closes socket
  if ('closed' === this.readyState) return;
  this.setPing();

  // Prolong liveness of socket on heartbeat
  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};

/**
 * Resets ping timeout.
 *
 * @api private
 */

Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' === self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || (self.pingInterval + self.pingTimeout));
};

/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */

Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};

/**
* Sends a ping packet.
*
* @api private
*/

Socket.prototype.ping = function () {
  var self = this;
  this.sendPacket('ping', function () {
    self.emit('ping');
  });
};

/**
 * Called on `drain` event
 *
 * @api private
 */

Socket.prototype.onDrain = function () {
  this.writeBuffer.splice(0, this.prevBufferLen);

  // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on `drain`
  this.prevBufferLen = 0;

  if (0 === this.writeBuffer.length) {
    this.emit('drain');
  } else {
    this.flush();
  }
};

/**
 * Flush write buffers.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' !== this.readyState && this.transport.writable &&
    !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer);
    // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on `drain`
    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */

Socket.prototype.write =
Socket.prototype.send = function (msg, options, fn) {
  this.sendPacket('message', msg, options, fn);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, options, fn) {
  if ('function' === typeof data) {
    fn = data;
    data = undefined;
  }

  if ('function' === typeof options) {
    fn = options;
    options = null;
  }

  if ('closing' === this.readyState || 'closed' === this.readyState) {
    return;
  }

  options = options || {};
  options.compress = false !== options.compress;

  var packet = {
    type: type,
    data: data,
    options: options
  };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  if (fn) this.once('flush', fn);
  this.flush();
};

/**
 * Closes the connection.
 *
 * @api private
 */

Socket.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.readyState = 'closing';

    var self = this;

    if (this.writeBuffer.length) {
      this.once('drain', function () {
        if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      });
    } else if (this.upgrading) {
      waitForUpgrade();
    } else {
      close();
    }
  }

  function close () {
    self.onClose('forced close');
    debug('socket closing - telling transport to close');
    self.transport.close();
  }

  function cleanupAndClose () {
    self.removeListener('upgrade', cleanupAndClose);
    self.removeListener('upgradeError', cleanupAndClose);
    close();
  }

  function waitForUpgrade () {
    // wait for upgrade to finish since we can't send packets while pausing a transport
    self.once('upgrade', cleanupAndClose);
    self.once('upgradeError', cleanupAndClose);
  }

  return this;
};

/**
 * Called upon transport error
 *
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Socket.prototype.onClose = function (reason, desc) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this;

    // clear timers
    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer);

    // stop event from firing again for transport
    this.transport.removeAllListeners('close');

    // ensure transport won't stay open
    this.transport.close();

    // ignore further transport communication
    this.transport.removeAllListeners();

    // set ready state
    this.readyState = 'closed';

    // clear session id
    this.id = null;

    // emit close event
    this.emit('close', reason, desc);

    // clean buffers after, so users can still
    // grab the buffers on `close` event
    self.writeBuffer = [];
    self.prevBufferLen = 0;
  }
};

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];
  for (var i = 0, j = upgrades.length; i < j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }
  return filteredUpgrades;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

}).apply(this, arguments);

},{"./transport":19,"./transports/index":20,"component-emitter":26,"debug":27,"engine.io-parser":30,"indexof":35,"parsejson":183,"parseqs":184,"parseuri":185}],19:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/engine.io-client/lib/transport.js", module);
(function(){
/**
 * Module dependencies.
 */

var parser = require('engine.io-parser');
var Emitter = require('component-emitter');

/**
 * Module exports.
 */

module.exports = Transport;

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport (opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;
  this.forceNode = opts.forceNode;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;
  this.localAddress = opts.localAddress;
}

/**
 * Mix in `Emitter`.
 */

Emitter(Transport.prototype);

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};

/**
 * Opens the transport.
 *
 * @api public
 */

Transport.prototype.open = function () {
  if ('closed' === this.readyState || '' === this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

Transport.prototype.send = function (packets) {
  if ('open' === this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};

/**
 * Called upon open
 *
 * @api private
 */

Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function (data) {
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};

/**
 * Called with a decoded packet.
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};

}).apply(this, arguments);

},{"component-emitter":26,"engine.io-parser":30}],20:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/engine.io-client/lib/transports/index.js", module);
(function(){
(function (global){
/**
 * Module dependencies
 */

var XMLHttpRequest = require('xmlhttprequest-ssl');
var XHR = require('./polling-xhr');
var JSONP = require('./polling-jsonp');
var websocket = require('./websocket');

/**
 * Export transports.
 */

exports.polling = polling;
exports.websocket = websocket;

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling (opts) {
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (global.location) {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname !== location.hostname || port !== opts.port;
    xs = opts.secure !== isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

}).apply(this, arguments);

},{"./polling-jsonp":21,"./polling-xhr":22,"./websocket":24,"xmlhttprequest-ssl":25}],21:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/engine.io-client/lib/transports/polling-jsonp.js", module);
(function(){
(function (global){

/**
 * Module requirements.
 */

var Polling = require('./polling');
var inherit = require('component-inherit');

/**
 * Module exports.
 */

module.exports = JSONPPolling;

/**
 * Cached regular expressions.
 */

var rNewline = /\n/g;
var rEscapedNewline = /\\n/g;

/**
 * Global JSONP callbacks.
 */

var callbacks;

/**
 * Noop.
 */

function empty () { }

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

function JSONPPolling (opts) {
  Polling.call(this, opts);

  this.query = this.query || {};

  // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution
  if (!callbacks) {
    // we need to consider multiple engines in the same page
    if (!global.___eio) global.___eio = [];
    callbacks = global.___eio;
  }

  // callback identifier
  this.index = callbacks.length;

  // add callback to jsonp global
  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  });

  // append to query string
  this.query.j = this.index;

  // prevent spurious errors from being emitted when the window is unloaded
  if (global.document && global.addEventListener) {
    global.addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    }, false);
  }
}

/**
 * Inherits from Polling.
 */

inherit(JSONPPolling, Polling);

/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;

/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
    this.iframe = null;
  }

  Polling.prototype.doClose.call(this);
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();
  script.onerror = function (e) {
    self.onError('jsonp poll error', e);
  };

  var insertAt = document.getElementsByTagName('script')[0];
  if (insertAt) {
    insertAt.parentNode.insertBefore(script, insertAt);
  } else {
    (document.head || document.body).appendChild(script);
  }
  this.script = script;

  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;

    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);

    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete () {
    initIframe();
    fn();
  }

  function initIframe () {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;

    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe();

  // escape \n to prevent it from being converted into \r\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
  data = data.replace(rEscapedNewline, '\\\n');
  this.area.value = data.replace(rNewline, '\\n');

  try {
    this.form.submit();
  } catch (e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function () {
      if (self.iframe.readyState === 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

}).apply(this, arguments);

},{"./polling":23,"component-inherit":15}],22:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/engine.io-client/lib/transports/polling-xhr.js", module);
(function(){
(function (global){
/**
 * Module requirements.
 */

var XMLHttpRequest = require('xmlhttprequest-ssl');
var Polling = require('./polling');
var Emitter = require('component-emitter');
var inherit = require('component-inherit');
var debug = require('debug')('engine.io-client:polling-xhr');

/**
 * Module exports.
 */

module.exports = XHR;
module.exports.Request = Request;

/**
 * Empty function
 */

function empty () {}

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

function XHR (opts) {
  Polling.call(this, opts);
  this.requestTimeout = opts.requestTimeout;

  if (global.location) {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = opts.hostname !== global.location.hostname ||
      port !== opts.port;
    this.xs = opts.secure !== isSSL;
  } else {
    this.extraHeaders = opts.extraHeaders;
  }
}

/**
 * Inherits from Polling.
 */

inherit(XHR, Polling);

/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function (opts) {
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR;

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  opts.requestTimeout = this.requestTimeout;

  // other options for Node.js client
  opts.extraHeaders = this.extraHeaders;

  return new Request(opts);
};

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

XHR.prototype.doWrite = function (data, fn) {
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
  var self = this;
  req.on('success', fn);
  req.on('error', function (err) {
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

XHR.prototype.doPoll = function () {
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function (data) {
    self.onData(data);
  });
  req.on('error', function (err) {
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

function Request (opts) {
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined !== opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;
  this.requestTimeout = opts.requestTimeout;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;

  this.create();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function () {
  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  var xhr = this.xhr = new XMLHttpRequest(opts);
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);
    try {
      if (this.extraHeaders) {
        xhr.setDisableHeaderCheck(true);
        for (var i in this.extraHeaders) {
          if (this.extraHeaders.hasOwnProperty(i)) {
            xhr.setRequestHeader(i, this.extraHeaders[i]);
          }
        }
      }
    } catch (e) {}
    if (this.supportsBinary) {
      // This has to be done after open because Firefox is stupid
      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension
      xhr.responseType = 'arraybuffer';
    }

    if ('POST' === this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    try {
      xhr.setRequestHeader('Accept', '*/*');
    } catch (e) {}

    // ie6 check
    if ('withCredentials' in xhr) {
      xhr.withCredentials = true;
    }

    if (this.requestTimeout) {
      xhr.timeout = this.requestTimeout;
    }

    if (this.hasXDR()) {
      xhr.onload = function () {
        self.onLoad();
      };
      xhr.onerror = function () {
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function () {
        if (4 !== xhr.readyState) return;
        if (200 === xhr.status || 1223 === xhr.status) {
          self.onLoad();
        } else {
          // make sure the `error` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function () {
            self.onError(xhr.status);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function () {
      self.onError(e);
    }, 0);
    return;
  }

  if (global.document) {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};

/**
 * Called upon successful response.
 *
 * @api private
 */

Request.prototype.onSuccess = function () {
  this.emit('success');
  this.cleanup();
};

/**
 * Called if we have data.
 *
 * @api private
 */

Request.prototype.onData = function (data) {
  this.emit('data', data);
  this.onSuccess();
};

/**
 * Called upon error.
 *
 * @api private
 */

Request.prototype.onError = function (err) {
  this.emit('error', err);
  this.cleanup(true);
};

/**
 * Cleans up house.
 *
 * @api private
 */

Request.prototype.cleanup = function (fromError) {
  if ('undefined' === typeof this.xhr || null === this.xhr) {
    return;
  }
  // xmlhttprequest
  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  if (fromError) {
    try {
      this.xhr.abort();
    } catch (e) {}
  }

  if (global.document) {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};

/**
 * Called upon load.
 *
 * @api private
 */

Request.prototype.onLoad = function () {
  var data;
  try {
    var contentType;
    try {
      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];
    } catch (e) {}
    if (contentType === 'application/octet-stream') {
      data = this.xhr.response || this.xhr.responseText;
    } else {
      if (!this.supportsBinary) {
        data = this.xhr.responseText;
      } else {
        try {
          data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));
        } catch (e) {
          var ui8Arr = new Uint8Array(this.xhr.response);
          var dataArray = [];
          for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {
            dataArray.push(ui8Arr[idx]);
          }

          data = String.fromCharCode.apply(null, dataArray);
        }
      }
    }
  } catch (e) {
    this.onError(e);
  }
  if (null != data) {
    this.onData(data);
  }
};

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

Request.prototype.hasXDR = function () {
  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
};

/**
 * Aborts the request.
 *
 * @api public
 */

Request.prototype.abort = function () {
  this.cleanup();
};

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

Request.requestsCount = 0;
Request.requests = {};

if (global.document) {
  if (global.attachEvent) {
    global.attachEvent('onunload', unloadHandler);
  } else if (global.addEventListener) {
    global.addEventListener('beforeunload', unloadHandler, false);
  }
}

function unloadHandler () {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

}).apply(this, arguments);

},{"./polling":23,"component-emitter":26,"component-inherit":15,"debug":27,"xmlhttprequest-ssl":25}],23:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/engine.io-client/lib/transports/polling.js", module);
(function(){
/**
 * Module dependencies.
 */

var Transport = require('../transport');
var parseqs = require('parseqs');
var parser = require('engine.io-parser');
var inherit = require('component-inherit');
var yeast = require('yeast');
var debug = require('debug')('engine.io-client:polling');

/**
 * Module exports.
 */

module.exports = Polling;

/**
 * Is XHR2 supported?
 */

var hasXHR2 = (function () {
  var XMLHttpRequest = require('xmlhttprequest-ssl');
  var xhr = new XMLHttpRequest({ xdomain: false });
  return null != xhr.responseType;
})();

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

function Polling (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(Polling, Transport);

/**
 * Transport name.
 */

Polling.prototype.name = 'polling';

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function () {
  this.poll();
};

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

Polling.prototype.pause = function (onPause) {
  var self = this;

  this.readyState = 'pausing';

  function pause () {
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function () {
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function () {
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};

/**
 * Starts polling cycle.
 *
 * @api public
 */

Polling.prototype.poll = function () {
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

Polling.prototype.onData = function (data) {
  var self = this;
  debug('polling got data %s', data);
  var callback = function (packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' === self.readyState) {
      self.onOpen();
    }

    // if its a close packet, we close the ongoing requests
    if ('close' === packet.type) {
      self.onClose();
      return false;
    }

    // otherwise bypass onData and handle the message
    self.onPacket(packet);
  };

  // decode payload
  parser.decodePayload(data, this.socket.binaryType, callback);

  // if an event did not trigger closing
  if ('closed' !== this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' === this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};

/**
 * For polling, send a close packet.
 *
 * @api private
 */

Polling.prototype.doClose = function () {
  var self = this;

  function close () {
    debug('writing close packet');
    self.write([{ type: 'close' }]);
  }

  if ('open' === this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

Polling.prototype.write = function (packets) {
  var self = this;
  this.writable = false;
  var callbackfn = function () {
    self.writable = true;
    self.emit('drain');
  };

  parser.encodePayload(packets, this.supportsBinary, function (data) {
    self.doWrite(data, callbackfn);
  });
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

Polling.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = '';

  // cache busting is forced
  if (false !== this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // avoid port if default for schema
  if (this.port && (('https' === schema && Number(this.port) !== 443) ||
     ('http' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

}).apply(this, arguments);

},{"../transport":19,"component-inherit":15,"debug":27,"engine.io-parser":30,"parseqs":184,"xmlhttprequest-ssl":25,"yeast":208}],24:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/engine.io-client/lib/transports/websocket.js", module);
(function(){
(function (global){
/**
 * Module dependencies.
 */

var Transport = require('../transport');
var parser = require('engine.io-parser');
var parseqs = require('parseqs');
var inherit = require('component-inherit');
var yeast = require('yeast');
var debug = require('debug')('engine.io-client:websocket');
var BrowserWebSocket = global.WebSocket || global.MozWebSocket;
var NodeWebSocket;
if (typeof window === 'undefined') {
  try {
    NodeWebSocket = require('ws');
  } catch (e) { }
}

/**
 * Get either the `WebSocket` or `MozWebSocket` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by `ws` for Node-like environment.
 */

var WebSocket = BrowserWebSocket;
if (!WebSocket && typeof window === 'undefined') {
  WebSocket = NodeWebSocket;
}

/**
 * Module exports.
 */

module.exports = WS;

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (forceBase64) {
    this.supportsBinary = false;
  }
  this.perMessageDeflate = opts.perMessageDeflate;
  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
  if (!this.usingBrowserWebSocket) {
    WebSocket = NodeWebSocket;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(WS, Transport);

/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';

/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;

/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function () {
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var uri = this.uri();
  var protocols = void (0);
  var opts = {
    agent: this.agent,
    perMessageDeflate: this.perMessageDeflate
  };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  if (this.extraHeaders) {
    opts.headers = this.extraHeaders;
  }
  if (this.localAddress) {
    opts.localAddress = this.localAddress;
  }

  try {
    this.ws = this.usingBrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);
  } catch (err) {
    return this.emit('error', err);
  }

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  if (this.ws.supports && this.ws.supports.binary) {
    this.supportsBinary = true;
    this.ws.binaryType = 'nodebuffer';
  } else {
    this.ws.binaryType = 'arraybuffer';
  }

  this.addEventListeners();
};

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

WS.prototype.addEventListeners = function () {
  var self = this;

  this.ws.onopen = function () {
    self.onOpen();
  };
  this.ws.onclose = function () {
    self.onClose();
  };
  this.ws.onmessage = function (ev) {
    self.onData(ev.data);
  };
  this.ws.onerror = function (e) {
    self.onError('websocket error', e);
  };
};

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

WS.prototype.write = function (packets) {
  var self = this;
  this.writable = false;

  // encodePacket efficient as it uses WS framing
  // no need for encodePayload
  var total = packets.length;
  for (var i = 0, l = total; i < l; i++) {
    (function (packet) {
      parser.encodePacket(packet, self.supportsBinary, function (data) {
        if (!self.usingBrowserWebSocket) {
          // always create a new object (GH-437)
          var opts = {};
          if (packet.options) {
            opts.compress = packet.options.compress;
          }

          if (self.perMessageDeflate) {
            var len = 'string' === typeof data ? global.Buffer.byteLength(data) : data.length;
            if (len < self.perMessageDeflate.threshold) {
              opts.compress = false;
            }
          }
        }

        // Sometimes the websocket has already been closed but the browser didn't
        // have a chance of informing us about it yet, in that case send will
        // throw an error
        try {
          if (self.usingBrowserWebSocket) {
            // TypeError is thrown when passing the second argument on Safari
            self.ws.send(data);
          } else {
            self.ws.send(data, opts);
          }
        } catch (e) {
          debug('websocket closed before onclose event');
        }

        --total || done();
      });
    })(packets[i]);
  }

  function done () {
    self.emit('flush');

    // fake drain
    // defer to next tick to allow Socket to clear writeBuffer
    setTimeout(function () {
      self.writable = true;
      self.emit('drain');
    }, 0);
  }
};

/**
 * Called upon close
 *
 * @api private
 */

WS.prototype.onClose = function () {
  Transport.prototype.onClose.call(this);
};

/**
 * Closes socket.
 *
 * @api private
 */

WS.prototype.doClose = function () {
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

WS.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = '';

  // avoid port if default for schema
  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||
    ('ws' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // append timestamp to URI
  if (this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  // communicate binary support capabilities
  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

WS.prototype.check = function () {
  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

}).apply(this, arguments);

},{"../transport":19,"component-inherit":15,"debug":27,"engine.io-parser":30,"parseqs":184,"ws":9,"yeast":208}],25:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/engine.io-client/lib/xmlhttprequest.js", module);
(function(){
(function (global){
// browser shim for xmlhttprequest module

var hasCORS = require('has-cors');

module.exports = function (opts) {
  var xdomain = opts.xdomain;

  // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
  var xscheme = opts.xscheme;

  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217
  var enablesXDR = opts.enablesXDR;

  // XMLHttpRequest can be disabled on IE
  try {
    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) { }

  // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example
  try {
    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) { }

  if (!xdomain) {
    try {
      return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
    } catch (e) { }
  }
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

}).apply(this, arguments);

},{"has-cors":34}],26:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/engine.io-client/node_modules/component-emitter/index.js", module);
(function(){

/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

}).apply(this, arguments);

},{}],27:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/engine.io-client/node_modules/debug/browser.js", module);
(function(){
(function (process){

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    return exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (typeof process !== 'undefined' && 'env' in process) {
    return process.env.DEBUG;
  }
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}

}).call(this,require('_process'))

}).apply(this, arguments);

},{"./debug":28,"_process":186}],28:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/engine.io-client/node_modules/debug/debug.js", module);
(function(){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug.debug = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting
    args = exports.formatArgs.apply(self, args);

    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/[\\^$+?.()|[\]{}]/g, '\\$&').replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

}).apply(this, arguments);

},{"ms":29}],29:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/engine.io-client/node_modules/ms/index.js", module);
(function(){
/**
 * Helpers.
 */

var s = 1000
var m = s * 60
var h = m * 60
var d = h * 24
var y = d * 365.25

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {}
  var type = typeof val
  if (type === 'string' && val.length > 0) {
    return parse(val)
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ?
			fmtLong(val) :
			fmtShort(val)
  }
  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))
}

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str)
  if (str.length > 10000) {
    return
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)
  if (!match) {
    return
  }
  var n = parseFloat(match[1])
  var type = (match[2] || 'ms').toLowerCase()
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y
    case 'days':
    case 'day':
    case 'd':
      return n * d
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n
    default:
      return undefined
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd'
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h'
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm'
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's'
  }
  return ms + 'ms'
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms'
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name
  }
  return Math.ceil(ms / n) + ' ' + name + 's'
}

}).apply(this, arguments);

},{}],30:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/engine.io-parser/lib/browser.js", module);
(function(){
(function (global){
/**
 * Module dependencies.
 */

var keys = require('./keys');
var hasBinary = require('has-binary');
var sliceBuffer = require('arraybuffer.slice');
var after = require('after');
var utf8 = require('wtf-8');

var base64encoder;
if (global && global.ArrayBuffer) {
  base64encoder = require('base64-arraybuffer');
}

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */
var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

/**
 * When true, avoids using Blobs to encode payloads.
 * @type boolean
 */
var dontSendBlobs = isAndroid || isPhantomJS;

/**
 * Current protocol version.
 */

exports.protocol = 3;

/**
 * Packet types.
 */

var packets = exports.packets = {
    open:     0    // non-ws
  , close:    1    // non-ws
  , ping:     2
  , pong:     3
  , message:  4
  , upgrade:  5
  , noop:     6
};

var packetslist = keys(packets);

/**
 * Premade error packet.
 */

var err = { type: 'error', data: 'parser error' };

/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = require('blob');

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if ('function' == typeof supportsBinary) {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if ('function' == typeof utf8encode) {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = (packet.data === undefined)
    ? undefined
    : packet.data.buffer || packet.data;

  if (global.ArrayBuffer && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (Blob && data instanceof global.Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  }

  // might be an object with { base64: true, data: dataAsBase64String }
  if (data && data.base64) {
    return encodeBase64Object(packet, callback);
  }

  // Sending data as a utf-8 string
  var encoded = packets[packet.type];

  // data fragment is optional
  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);
  }

  return callback('' + encoded);

};

function encodeBase64Object(packet, callback) {
  // packet data is an object { base64: true, data: dataAsBase64String }
  var message = 'b' + exports.packets[packet.type] + packet.data.data;
  return callback(message);
}

/**
 * Encode packet helpers for binary types
 */

function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);

  resultBuffer[0] = packets[packet.type];
  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i+1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();
  fr.onload = function() {
    packet.data = fr.result;
    exports.encodePacket(packet, supportsBinary, true, callback);
  };
  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (dontSendBlobs) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);

  return callback(blob);
}

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */

exports.encodeBase64Packet = function(packet, callback) {
  var message = 'b' + exports.packets[packet.type];
  if (Blob && packet.data instanceof global.Blob) {
    var fr = new FileReader();
    fr.onload = function() {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };
    return fr.readAsDataURL(packet.data);
  }

  var b64data;
  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);
    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }
    b64data = String.fromCharCode.apply(null, basic);
  }
  message += global.btoa(b64data);
  return callback(message);
};

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */

exports.decodePacket = function (data, binaryType, utf8decode) {
  if (data === undefined) {
    return err;
  }
  // String data
  if (typeof data == 'string') {
    if (data.charAt(0) == 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      data = tryDecode(data);
      if (data === false) {
        return err;
      }
    }
    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return { type: packetslist[type], data: data.substring(1) };
    } else {
      return { type: packetslist[type] };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);
  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }
  return { type: packetslist[type], data: rest };
};

function tryDecode(data) {
  try {
    data = utf8.decode(data);
  } catch (e) {
    return false;
  }
  return data;
}

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */

exports.decodeBase64Packet = function(msg, binaryType) {
  var type = packetslist[msg.charAt(0)];
  if (!base64encoder) {
    return { type: type, data: { base64: true, data: msg.substr(1) } };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return { type: type, data: data };
};

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary == 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  var isBinary = hasBinary(packets);

  if (supportsBinary && isBinary) {
    if (Blob && !dontSendBlobs) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(results.join(''));
  });
};

/**
 * Async array map using after
 */

function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function(i, el, cb) {
    each(el, function(error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data != 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;
  if (data == '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = ''
    , n, msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (':' != chr) {
      length += chr;
    } else {
      if ('' == length || (length != (n = Number(length)))) {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      msg = data.substr(i + 1, n);

      if (length != msg.length) {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      if (msg.length) {
        packet = exports.decodePacket(msg, binaryType, true);

        if (err.type == packet.type && err.data == packet.data) {
          // parser error in individual packet - ignoring payload
          return callback(err, 0, 1);
        }

        var ret = callback(packet, i + n, l);
        if (false === ret) return;
      }

      // advance cursor
      i += n;
      length = '';
    }
  }

  if (length != '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

};

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

exports.encodePayloadAsArrayBuffer = function(packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function(err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function(acc, p) {
      var len;
      if (typeof p === 'string'){
        len = p.length;
      } else {
        len = p.byteLength;
      }
      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);

    var resultArray = new Uint8Array(totalLength);

    var bufferIndex = 0;
    encodedPackets.forEach(function(p) {
      var isString = typeof p === 'string';
      var ab = p;
      if (isString) {
        var view = new Uint8Array(p.length);
        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }
        ab = view.buffer;
      }

      if (isString) { // not true binary
        resultArray[bufferIndex++] = 0;
      } else { // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();
      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }
      resultArray[bufferIndex++] = 255;

      var view = new Uint8Array(ab);
      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });

    return callback(resultArray.buffer);
  });
};

/**
 * Encode as Blob
 */

exports.encodePayloadAsBlob = function(packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;
      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);
        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }
        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = (encoded instanceof ArrayBuffer)
        ? encoded.byteLength
        : encoded.size;

      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);
      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }
      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(new Blob(results));
  });
};

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  var numberTooLong = false;
  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1; ; i++) {
      if (tailArray[i] == 255) break;

      if (msgLength.length > 310) {
        numberTooLong = true;
        break;
      }

      msgLength += tailArray[i];
    }

    if(numberTooLong) return callback(err, 0, 1);

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);

    var msg = sliceBuffer(bufferTail, 0, msgLength);
    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';
        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function(buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

}).apply(this, arguments);

},{"./keys":31,"after":4,"arraybuffer.slice":5,"base64-arraybuffer":7,"blob":8,"has-binary":32,"wtf-8":207}],31:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/engine.io-parser/lib/keys.js", module);
(function(){

/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

module.exports = Object.keys || function keys (obj){
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }
  return arr;
};

}).apply(this, arguments);

},{}],32:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/has-binary/index.js", module);
(function(){
(function (global){

/*
 * Module requirements.
 */

var isArray = require('isarray');

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Right now only Buffer and ArrayBuffer are supported..
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary(data) {

  function _hasBinary(obj) {
    if (!obj) return false;

    if ( (global.Buffer && global.Buffer.isBuffer && global.Buffer.isBuffer(obj)) ||
         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
         (global.Blob && obj instanceof Blob) ||
         (global.File && obj instanceof File)
        ) {
      return true;
    }

    if (isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
          if (_hasBinary(obj[i])) {
              return true;
          }
      }
    } else if (obj && 'object' == typeof obj) {
      // see: https://github.com/Automattic/has-binary/pull/4
      if (obj.toJSON && 'function' == typeof obj.toJSON) {
        obj = obj.toJSON();
      }

      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
          return true;
        }
      }
    }

    return false;
  }

  return _hasBinary(data);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

}).apply(this, arguments);

},{"isarray":33}],33:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/has-binary/node_modules/isarray/index.js", module);
(function(){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

}).apply(this, arguments);

},{}],34:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/has-cors/index.js", module);
(function(){

/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

try {
  module.exports = typeof XMLHttpRequest !== 'undefined' &&
    'withCredentials' in new XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}

}).apply(this, arguments);

},{}],35:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/indexof/index.js", module);
(function(){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
}).apply(this, arguments);

},{}],36:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/json3/lib/json3.js", module);
(function(){
(function (global){
/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
;(function () {
  // Detect the `define` function exposed by asynchronous module loaders. The
  // strict `define` check is necessary for compatibility with `r.js`.
  var isLoader = typeof define === "function" && define.amd;

  // A set of types used to distinguish objects from primitives.
  var objectTypes = {
    "function": true,
    "object": true
  };

  // Detect the `exports` object exposed by CommonJS implementations.
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  // Use the `global` object exposed by Node (including Browserify via
  // `insert-module-globals`), Narwhal, and Ringo as the default context,
  // and the `window` object in browsers. Rhino exports a `global` function
  // instead.
  var root = objectTypes[typeof window] && window || this,
      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
    root = freeGlobal;
  }

  // Public: Initializes JSON 3 using the given `context` object, attaching the
  // `stringify` and `parse` functions to the specified `exports` object.
  function runInContext(context, exports) {
    context || (context = root["Object"]());
    exports || (exports = root["Object"]());

    // Native constructor aliases.
    var Number = context["Number"] || root["Number"],
        String = context["String"] || root["String"],
        Object = context["Object"] || root["Object"],
        Date = context["Date"] || root["Date"],
        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
        TypeError = context["TypeError"] || root["TypeError"],
        Math = context["Math"] || root["Math"],
        nativeJSON = context["JSON"] || root["JSON"];

    // Delegate to the native `stringify` and `parse` implementations.
    if (typeof nativeJSON == "object" && nativeJSON) {
      exports.stringify = nativeJSON.stringify;
      exports.parse = nativeJSON.parse;
    }

    // Convenience aliases.
    var objectProto = Object.prototype,
        getClass = objectProto.toString,
        isProperty, forEach, undef;

    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
    var isExtended = new Date(-3509827334573292);
    try {
      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
      // results for certain dates in Opera >= 10.53.
      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
        // Safari < 2.0.2 stores the internal millisecond time value correctly,
        // but clips the values returned by the date methods to the range of
        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
    } catch (exception) {}

    // Internal: Determines whether the native `JSON.stringify` and `parse`
    // implementations are spec-compliant. Based on work by Ken Snyder.
    function has(name) {
      if (has[name] !== undef) {
        // Return cached feature test result.
        return has[name];
      }
      var isSupported;
      if (name == "bug-string-char-index") {
        // IE <= 7 doesn't support accessing string characters using square
        // bracket notation. IE 8 only supports this for primitives.
        isSupported = "a"[0] != "a";
      } else if (name == "json") {
        // Indicates whether both `JSON.stringify` and `JSON.parse` are
        // supported.
        isSupported = has("json-stringify") && has("json-parse");
      } else {
        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
        // Test `JSON.stringify`.
        if (name == "json-stringify") {
          var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
          if (stringifySupported) {
            // A test function object with a custom `toJSON` method.
            (value = function () {
              return 1;
            }).toJSON = value;
            try {
              stringifySupported =
                // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" &&
                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" &&
                stringify(new String()) == '""' &&
                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undef &&
                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undef) === undef &&
                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undef &&
                // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" &&
                stringify([value]) == "[1]" &&
                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undef]) == "[null]" &&
                // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" &&
                // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undef, getClass, null]) == "[null,null,null]" &&
                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" &&
                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
                // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
            } catch (exception) {
              stringifySupported = false;
            }
          }
          isSupported = stringifySupported;
        }
        // Test `JSON.parse`.
        if (name == "json-parse") {
          var parse = exports.parse;
          if (typeof parse == "function") {
            try {
              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
              // Conforming implementations should also coerce the initial argument to
              // a string prior to parsing.
              if (parse("0") === 0 && !parse(false)) {
                // Simple parsing test.
                value = parse(serialized);
                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
                if (parseSupported) {
                  try {
                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                    parseSupported = !parse('"\t"');
                  } catch (exception) {}
                  if (parseSupported) {
                    try {
                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                      // certain octal literals.
                      parseSupported = parse("01") !== 1;
                    } catch (exception) {}
                  }
                  if (parseSupported) {
                    try {
                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                      // points. These environments, along with FF 3.1b1 and 2,
                      // also allow trailing commas in JSON objects and arrays.
                      parseSupported = parse("1.") !== 1;
                    } catch (exception) {}
                  }
                }
              }
            } catch (exception) {
              parseSupported = false;
            }
          }
          isSupported = parseSupported;
        }
      }
      return has[name] = !!isSupported;
    }

    if (!has("json")) {
      // Common `[[Class]]` name aliases.
      var functionClass = "[object Function]",
          dateClass = "[object Date]",
          numberClass = "[object Number]",
          stringClass = "[object String]",
          arrayClass = "[object Array]",
          booleanClass = "[object Boolean]";

      // Detect incomplete support for accessing string characters by index.
      var charIndexBuggy = has("bug-string-char-index");

      // Define additional utility methods if the `Date` methods are buggy.
      if (!isExtended) {
        var floor = Math.floor;
        // A mapping between the months of the year and the number of days between
        // January 1st and the first of the respective month.
        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        // Internal: Calculates the number of days between the Unix epoch and the
        // first day of the given month.
        var getDay = function (year, month) {
          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
        };
      }

      // Internal: Determines if a property is a direct property of the given
      // object. Delegates to the native `Object#hasOwnProperty` method.
      if (!(isProperty = objectProto.hasOwnProperty)) {
        isProperty = function (property) {
          var members = {}, constructor;
          if ((members.__proto__ = null, members.__proto__ = {
            // The *proto* property cannot be set multiple times in recent
            // versions of Firefox and SeaMonkey.
            "toString": 1
          }, members).toString != getClass) {
            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
            // supports the mutable *proto* property.
            isProperty = function (property) {
              // Capture and break the object's prototype chain (see section 8.6.2
              // of the ES 5.1 spec). The parenthesized expression prevents an
              // unsafe transformation by the Closure Compiler.
              var original = this.__proto__, result = property in (this.__proto__ = null, this);
              // Restore the original prototype chain.
              this.__proto__ = original;
              return result;
            };
          } else {
            // Capture a reference to the top-level `Object` constructor.
            constructor = members.constructor;
            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
            // other environments.
            isProperty = function (property) {
              var parent = (this.constructor || constructor).prototype;
              return property in this && !(property in parent && this[property] === parent[property]);
            };
          }
          members = null;
          return isProperty.call(this, property);
        };
      }

      // Internal: Normalizes the `for...in` iteration algorithm across
      // environments. Each enumerated key is yielded to a `callback` function.
      forEach = function (object, callback) {
        var size = 0, Properties, members, property;

        // Tests for bugs in the current environment's `for...in` algorithm. The
        // `valueOf` property inherits the non-enumerable flag from
        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
        (Properties = function () {
          this.valueOf = 0;
        }).prototype.valueOf = 0;

        // Iterate over a new instance of the `Properties` class.
        members = new Properties();
        for (property in members) {
          // Ignore all properties inherited from `Object.prototype`.
          if (isProperty.call(members, property)) {
            size++;
          }
        }
        Properties = members = null;

        // Normalize the iteration algorithm.
        if (!size) {
          // A list of non-enumerable properties inherited from `Object.prototype`.
          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
          // properties.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, length;
            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
            for (property in object) {
              // Gecko <= 1.0 enumerates the `prototype` property of functions under
              // certain conditions; IE does not.
              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                callback(property);
              }
            }
            // Manually invoke the callback for each non-enumerable property.
            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
          };
        } else if (size == 2) {
          // Safari <= 2.0.4 enumerates shadowed properties twice.
          forEach = function (object, callback) {
            // Create a set of iterated properties.
            var members = {}, isFunction = getClass.call(object) == functionClass, property;
            for (property in object) {
              // Store each property name to prevent double enumeration. The
              // `prototype` property of functions is not enumerated due to cross-
              // environment inconsistencies.
              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                callback(property);
              }
            }
          };
        } else {
          // No bugs detected; use the standard `for...in` algorithm.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
            for (property in object) {
              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                callback(property);
              }
            }
            // Manually invoke the callback for the `constructor` property due to
            // cross-environment inconsistencies.
            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
              callback(property);
            }
          };
        }
        return forEach(object, callback);
      };

      // Public: Serializes a JavaScript `value` as a JSON string. The optional
      // `filter` argument may specify either a function that alters how object and
      // array members are serialized, or an array of strings and numbers that
      // indicates which properties should be serialized. The optional `width`
      // argument may be either a string or number that specifies the indentation
      // level of the output.
      if (!has("json-stringify")) {
        // Internal: A map of control characters and their escaped equivalents.
        var Escapes = {
          92: "\\\\",
          34: '\\"',
          8: "\\b",
          12: "\\f",
          10: "\\n",
          13: "\\r",
          9: "\\t"
        };

        // Internal: Converts `value` into a zero-padded string such that its
        // length is at least equal to `width`. The `width` must be <= 6.
        var leadingZeroes = "000000";
        var toPaddedString = function (width, value) {
          // The `|| 0` expression is necessary to work around a bug in
          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
          return (leadingZeroes + (value || 0)).slice(-width);
        };

        // Internal: Double-quotes a string `value`, replacing all ASCII control
        // characters (characters with code unit values between 0 and 31) with
        // their escaped equivalents. This is an implementation of the
        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
        var unicodePrefix = "\\u00";
        var quote = function (value) {
          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
          for (; index < length; index++) {
            var charCode = value.charCodeAt(index);
            // If the character is a control character, append its Unicode or
            // shorthand escape sequence; otherwise, append the character as-is.
            switch (charCode) {
              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
                result += Escapes[charCode];
                break;
              default:
                if (charCode < 32) {
                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                  break;
                }
                result += useCharIndex ? symbols[index] : value.charAt(index);
            }
          }
          return result + '"';
        };

        // Internal: Recursively serializes an object. Implements the
        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
          try {
            // Necessary for host object support.
            value = object[property];
          } catch (exception) {}
          if (typeof value == "object" && value) {
            className = getClass.call(value);
            if (className == dateClass && !isProperty.call(value, "toJSON")) {
              if (value > -1 / 0 && value < 1 / 0) {
                // Dates are serialized according to the `Date#toJSON` method
                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                // for the ISO 8601 date time string format.
                if (getDay) {
                  // Manually compute the year, month, date, hours, minutes,
                  // seconds, and milliseconds if the `getUTC*` methods are
                  // buggy. Adapted from @Yaffle's `date-shim` project.
                  date = floor(value / 864e5);
                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
                  date = 1 + date - getDay(year, month);
                  // The `time` value specifies the time within the day (see ES
                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                  // to compute `A modulo B`, as the `%` operator does not
                  // correspond to the `modulo` operation for negative numbers.
                  time = (value % 864e5 + 864e5) % 864e5;
                  // The hours, minutes, seconds, and milliseconds are obtained by
                  // decomposing the time within the day. See section 15.9.1.10.
                  hours = floor(time / 36e5) % 24;
                  minutes = floor(time / 6e4) % 60;
                  seconds = floor(time / 1e3) % 60;
                  milliseconds = time % 1e3;
                } else {
                  year = value.getUTCFullYear();
                  month = value.getUTCMonth();
                  date = value.getUTCDate();
                  hours = value.getUTCHours();
                  minutes = value.getUTCMinutes();
                  seconds = value.getUTCSeconds();
                  milliseconds = value.getUTCMilliseconds();
                }
                // Serialize extended years correctly.
                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
                  // Months, dates, hours, minutes, and seconds should have two
                  // digits; milliseconds should have three.
                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
                  // Milliseconds are optional in ES 5.0, but required in 5.1.
                  "." + toPaddedString(3, milliseconds) + "Z";
              } else {
                value = null;
              }
            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
              // ignores all `toJSON` methods on these objects unless they are
              // defined directly on an instance.
              value = value.toJSON(property);
            }
          }
          if (callback) {
            // If a replacement function was provided, call it to obtain the value
            // for serialization.
            value = callback.call(object, property, value);
          }
          if (value === null) {
            return "null";
          }
          className = getClass.call(value);
          if (className == booleanClass) {
            // Booleans are represented literally.
            return "" + value;
          } else if (className == numberClass) {
            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
            // `"null"`.
            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
          } else if (className == stringClass) {
            // Strings are double-quoted and escaped.
            return quote("" + value);
          }
          // Recursively serialize objects and arrays.
          if (typeof value == "object") {
            // Check for cyclic structures. This is a linear search; performance
            // is inversely proportional to the number of unique nested objects.
            for (length = stack.length; length--;) {
              if (stack[length] === value) {
                // Cyclic structures cannot be serialized by `JSON.stringify`.
                throw TypeError();
              }
            }
            // Add the object to the stack of traversed objects.
            stack.push(value);
            results = [];
            // Save the current indentation level and indent one additional level.
            prefix = indentation;
            indentation += whitespace;
            if (className == arrayClass) {
              // Recursively serialize array elements.
              for (index = 0, length = value.length; index < length; index++) {
                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                results.push(element === undef ? "null" : element);
              }
              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
            } else {
              // Recursively serialize object members. Members are selected from
              // either a user-specified list of property names, or the object
              // itself.
              forEach(properties || value, function (property) {
                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                if (element !== undef) {
                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                  // is not the empty string, let `member` {quote(property) + ":"}
                  // be the concatenation of `member` and the `space` character."
                  // The "`space` character" refers to the literal space
                  // character, not the `space` {width} argument provided to
                  // `JSON.stringify`.
                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                }
              });
              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
            }
            // Remove the object from the traversed object stack.
            stack.pop();
            return result;
          }
        };

        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
        exports.stringify = function (source, filter, width) {
          var whitespace, callback, properties, className;
          if (objectTypes[typeof filter] && filter) {
            if ((className = getClass.call(filter)) == functionClass) {
              callback = filter;
            } else if (className == arrayClass) {
              // Convert the property names array into a makeshift set.
              properties = {};
              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
            }
          }
          if (width) {
            if ((className = getClass.call(width)) == numberClass) {
              // Convert the `width` to an integer and create a string containing
              // `width` number of space characters.
              if ((width -= width % 1) > 0) {
                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
              }
            } else if (className == stringClass) {
              whitespace = width.length <= 10 ? width : width.slice(0, 10);
            }
          }
          // Opera <= 7.54u2 discards the values associated with empty string keys
          // (`""`) only if they are used directly within an object member list
          // (e.g., `!("" in { "": 1})`).
          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
        };
      }

      // Public: Parses a JSON source string.
      if (!has("json-parse")) {
        var fromCharCode = String.fromCharCode;

        // Internal: A map of escaped control characters and their unescaped
        // equivalents.
        var Unescapes = {
          92: "\\",
          34: '"',
          47: "/",
          98: "\b",
          116: "\t",
          110: "\n",
          102: "\f",
          114: "\r"
        };

        // Internal: Stores the parser state.
        var Index, Source;

        // Internal: Resets the parser state and throws a `SyntaxError`.
        var abort = function () {
          Index = Source = null;
          throw SyntaxError();
        };

        // Internal: Returns the next token, or `"$"` if the parser has reached
        // the end of the source string. A token may be a string, number, `null`
        // literal, or Boolean literal.
        var lex = function () {
          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
          while (Index < length) {
            charCode = source.charCodeAt(Index);
            switch (charCode) {
              case 9: case 10: case 13: case 32:
                // Skip whitespace tokens, including tabs, carriage returns, line
                // feeds, and space characters.
                Index++;
                break;
              case 123: case 125: case 91: case 93: case 58: case 44:
                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                // the current position.
                value = charIndexBuggy ? source.charAt(Index) : source[Index];
                Index++;
                return value;
              case 34:
                // `"` delimits a JSON string; advance to the next character and
                // begin parsing the string. String tokens are prefixed with the
                // sentinel `@` character to distinguish them from punctuators and
                // end-of-string tokens.
                for (value = "@", Index++; Index < length;) {
                  charCode = source.charCodeAt(Index);
                  if (charCode < 32) {
                    // Unescaped ASCII control characters (those with a code unit
                    // less than the space character) are not permitted.
                    abort();
                  } else if (charCode == 92) {
                    // A reverse solidus (`\`) marks the beginning of an escaped
                    // control character (including `"`, `\`, and `/`) or Unicode
                    // escape sequence.
                    charCode = source.charCodeAt(++Index);
                    switch (charCode) {
                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
                        // Revive escaped control characters.
                        value += Unescapes[charCode];
                        Index++;
                        break;
                      case 117:
                        // `\u` marks the beginning of a Unicode escape sequence.
                        // Advance to the first character and validate the
                        // four-digit code point.
                        begin = ++Index;
                        for (position = Index + 4; Index < position; Index++) {
                          charCode = source.charCodeAt(Index);
                          // A valid sequence comprises four hexdigits (case-
                          // insensitive) that form a single hexadecimal value.
                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                            // Invalid Unicode escape sequence.
                            abort();
                          }
                        }
                        // Revive the escaped character.
                        value += fromCharCode("0x" + source.slice(begin, Index));
                        break;
                      default:
                        // Invalid escape sequence.
                        abort();
                    }
                  } else {
                    if (charCode == 34) {
                      // An unescaped double-quote character marks the end of the
                      // string.
                      break;
                    }
                    charCode = source.charCodeAt(Index);
                    begin = Index;
                    // Optimize for the common case where a string is valid.
                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
                      charCode = source.charCodeAt(++Index);
                    }
                    // Append the string as-is.
                    value += source.slice(begin, Index);
                  }
                }
                if (source.charCodeAt(Index) == 34) {
                  // Advance to the next character and return the revived string.
                  Index++;
                  return value;
                }
                // Unterminated string.
                abort();
              default:
                // Parse numbers and literals.
                begin = Index;
                // Advance past the negative sign, if one is specified.
                if (charCode == 45) {
                  isSigned = true;
                  charCode = source.charCodeAt(++Index);
                }
                // Parse an integer or floating-point value.
                if (charCode >= 48 && charCode <= 57) {
                  // Leading zeroes are interpreted as octal literals.
                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
                    // Illegal octal literal.
                    abort();
                  }
                  isSigned = false;
                  // Parse the integer component.
                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
                  // Floats cannot contain a leading decimal point; however, this
                  // case is already accounted for by the parser.
                  if (source.charCodeAt(Index) == 46) {
                    position = ++Index;
                    // Parse the decimal component.
                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal trailing decimal.
                      abort();
                    }
                    Index = position;
                  }
                  // Parse exponents. The `e` denoting the exponent is
                  // case-insensitive.
                  charCode = source.charCodeAt(Index);
                  if (charCode == 101 || charCode == 69) {
                    charCode = source.charCodeAt(++Index);
                    // Skip past the sign following the exponent, if one is
                    // specified.
                    if (charCode == 43 || charCode == 45) {
                      Index++;
                    }
                    // Parse the exponential component.
                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal empty exponent.
                      abort();
                    }
                    Index = position;
                  }
                  // Coerce the parsed value to a JavaScript number.
                  return +source.slice(begin, Index);
                }
                // A negative sign may only precede numbers.
                if (isSigned) {
                  abort();
                }
                // `true`, `false`, and `null` literals.
                if (source.slice(Index, Index + 4) == "true") {
                  Index += 4;
                  return true;
                } else if (source.slice(Index, Index + 5) == "false") {
                  Index += 5;
                  return false;
                } else if (source.slice(Index, Index + 4) == "null") {
                  Index += 4;
                  return null;
                }
                // Unrecognized token.
                abort();
            }
          }
          // Return the sentinel `$` character if the parser has reached the end
          // of the source string.
          return "$";
        };

        // Internal: Parses a JSON `value` token.
        var get = function (value) {
          var results, hasMembers;
          if (value == "$") {
            // Unexpected end of input.
            abort();
          }
          if (typeof value == "string") {
            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
              // Remove the sentinel `@` character.
              return value.slice(1);
            }
            // Parse object and array literals.
            if (value == "[") {
              // Parses a JSON array, returning a new JavaScript array.
              results = [];
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing square bracket marks the end of the array literal.
                if (value == "]") {
                  break;
                }
                // If the array literal contains elements, the current token
                // should be a comma separating the previous element from the
                // next.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "]") {
                      // Unexpected trailing `,` in array literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each array element.
                    abort();
                  }
                }
                // Elisions and leading commas are not permitted.
                if (value == ",") {
                  abort();
                }
                results.push(get(value));
              }
              return results;
            } else if (value == "{") {
              // Parses a JSON object, returning a new JavaScript object.
              results = {};
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing curly brace marks the end of the object literal.
                if (value == "}") {
                  break;
                }
                // If the object literal contains members, the current token
                // should be a comma separator.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "}") {
                      // Unexpected trailing `,` in object literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each object member.
                    abort();
                  }
                }
                // Leading commas are not permitted, object property names must be
                // double-quoted strings, and a `:` must separate each property
                // name and value.
                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                  abort();
                }
                results[value.slice(1)] = get(lex());
              }
              return results;
            }
            // Unexpected token encountered.
            abort();
          }
          return value;
        };

        // Internal: Updates a traversed object member.
        var update = function (source, property, callback) {
          var element = walk(source, property, callback);
          if (element === undef) {
            delete source[property];
          } else {
            source[property] = element;
          }
        };

        // Internal: Recursively traverses a parsed JSON object, invoking the
        // `callback` function for each value. This is an implementation of the
        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
        var walk = function (source, property, callback) {
          var value = source[property], length;
          if (typeof value == "object" && value) {
            // `forEach` can't be used to traverse an array in Opera <= 8.54
            // because its `Object#hasOwnProperty` implementation returns `false`
            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
            if (getClass.call(value) == arrayClass) {
              for (length = value.length; length--;) {
                update(value, length, callback);
              }
            } else {
              forEach(value, function (property) {
                update(value, property, callback);
              });
            }
          }
          return callback.call(source, property, value);
        };

        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
        exports.parse = function (source, callback) {
          var result, value;
          Index = 0;
          Source = "" + source;
          result = get(lex());
          // If a JSON string contains multiple tokens, it is invalid.
          if (lex() != "$") {
            abort();
          }
          // Reset the parser state.
          Index = Source = null;
          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
        };
      }
    }

    exports["runInContext"] = runInContext;
    return exports;
  }

  if (freeExports && !isLoader) {
    // Export for CommonJS environments.
    runInContext(root, freeExports);
  } else {
    // Export for web browsers and JavaScript engines.
    var nativeJSON = root.JSON,
        previousJSON = root["JSON3"],
        isRestored = false;

    var JSON3 = runInContext(root, (root["JSON3"] = {
      // Public: Restores the original value of the global `JSON` object and
      // returns a reference to the `JSON3` object.
      "noConflict": function () {
        if (!isRestored) {
          isRestored = true;
          root.JSON = nativeJSON;
          root["JSON3"] = previousJSON;
          nativeJSON = previousJSON = null;
        }
        return JSON3;
      }
    }));

    root.JSON = {
      "parse": JSON3.parse,
      "stringify": JSON3.stringify
    };
  }

  // Export for asynchronous module loaders.
  if (isLoader) {
    define(function () {
      return JSON3;
    });
  }
}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

}).apply(this, arguments);

},{}],37:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_DataView.js", module);
(function(){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;

}).apply(this, arguments);

},{"./_getNative":103,"./_root":140}],38:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_Hash.js", module);
(function(){
var hashClear = require('./_hashClear'),
    hashDelete = require('./_hashDelete'),
    hashGet = require('./_hashGet'),
    hashHas = require('./_hashHas'),
    hashSet = require('./_hashSet');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;

}).apply(this, arguments);

},{"./_hashClear":109,"./_hashDelete":110,"./_hashGet":111,"./_hashHas":112,"./_hashSet":113}],39:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_ListCache.js", module);
(function(){
var listCacheClear = require('./_listCacheClear'),
    listCacheDelete = require('./_listCacheDelete'),
    listCacheGet = require('./_listCacheGet'),
    listCacheHas = require('./_listCacheHas'),
    listCacheSet = require('./_listCacheSet');

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;

}).apply(this, arguments);

},{"./_listCacheClear":121,"./_listCacheDelete":122,"./_listCacheGet":123,"./_listCacheHas":124,"./_listCacheSet":125}],40:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_Map.js", module);
(function(){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

}).apply(this, arguments);

},{"./_getNative":103,"./_root":140}],41:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_MapCache.js", module);
(function(){
var mapCacheClear = require('./_mapCacheClear'),
    mapCacheDelete = require('./_mapCacheDelete'),
    mapCacheGet = require('./_mapCacheGet'),
    mapCacheHas = require('./_mapCacheHas'),
    mapCacheSet = require('./_mapCacheSet');

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;

}).apply(this, arguments);

},{"./_mapCacheClear":126,"./_mapCacheDelete":127,"./_mapCacheGet":128,"./_mapCacheHas":129,"./_mapCacheSet":130}],42:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_Promise.js", module);
(function(){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;

}).apply(this, arguments);

},{"./_getNative":103,"./_root":140}],43:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_Set.js", module);
(function(){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;

}).apply(this, arguments);

},{"./_getNative":103,"./_root":140}],44:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_SetCache.js", module);
(function(){
var MapCache = require('./_MapCache'),
    setCacheAdd = require('./_setCacheAdd'),
    setCacheHas = require('./_setCacheHas');

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;

}).apply(this, arguments);

},{"./_MapCache":41,"./_setCacheAdd":141,"./_setCacheHas":142}],45:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_Stack.js", module);
(function(){
var ListCache = require('./_ListCache'),
    stackClear = require('./_stackClear'),
    stackDelete = require('./_stackDelete'),
    stackGet = require('./_stackGet'),
    stackHas = require('./_stackHas'),
    stackSet = require('./_stackSet');

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

}).apply(this, arguments);

},{"./_ListCache":39,"./_stackClear":146,"./_stackDelete":147,"./_stackGet":148,"./_stackHas":149,"./_stackSet":150}],46:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_Symbol.js", module);
(function(){
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

}).apply(this, arguments);

},{"./_root":140}],47:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_Uint8Array.js", module);
(function(){
var root = require('./_root');

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

}).apply(this, arguments);

},{"./_root":140}],48:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_WeakMap.js", module);
(function(){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;

}).apply(this, arguments);

},{"./_getNative":103,"./_root":140}],49:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_apply.js", module);
(function(){
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;

}).apply(this, arguments);

},{}],50:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_arrayEach.js", module);
(function(){
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;

}).apply(this, arguments);

},{}],51:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_arrayFilter.js", module);
(function(){
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;

}).apply(this, arguments);

},{}],52:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_arrayLikeKeys.js", module);
(function(){
var baseTimes = require('./_baseTimes'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isIndex = require('./_isIndex'),
    isTypedArray = require('./isTypedArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;

}).apply(this, arguments);

},{"./_baseTimes":83,"./_isIndex":114,"./isArguments":163,"./isArray":164,"./isBuffer":166,"./isTypedArray":172}],53:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_arrayMap.js", module);
(function(){
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;

}).apply(this, arguments);

},{}],54:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_arrayPush.js", module);
(function(){
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;

}).apply(this, arguments);

},{}],55:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_arraySome.js", module);
(function(){
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;

}).apply(this, arguments);

},{}],56:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_assignValue.js", module);
(function(){
var baseAssignValue = require('./_baseAssignValue'),
    eq = require('./eq');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;

}).apply(this, arguments);

},{"./_baseAssignValue":58,"./eq":156}],57:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_assocIndexOf.js", module);
(function(){
var eq = require('./eq');

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;

}).apply(this, arguments);

},{"./eq":156}],58:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseAssignValue.js", module);
(function(){
var defineProperty = require('./_defineProperty');

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;

}).apply(this, arguments);

},{"./_defineProperty":95}],59:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseEach.js", module);
(function(){
var baseForOwn = require('./_baseForOwn'),
    createBaseEach = require('./_createBaseEach');

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;

}).apply(this, arguments);

},{"./_baseForOwn":62,"./_createBaseEach":93}],60:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseFilter.js", module);
(function(){
var baseEach = require('./_baseEach');

/**
 * The base implementation of `_.filter` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function baseFilter(collection, predicate) {
  var result = [];
  baseEach(collection, function(value, index, collection) {
    if (predicate(value, index, collection)) {
      result.push(value);
    }
  });
  return result;
}

module.exports = baseFilter;

}).apply(this, arguments);

},{"./_baseEach":59}],61:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseFor.js", module);
(function(){
var createBaseFor = require('./_createBaseFor');

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;

}).apply(this, arguments);

},{"./_createBaseFor":94}],62:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseForOwn.js", module);
(function(){
var baseFor = require('./_baseFor'),
    keys = require('./keys');

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;

}).apply(this, arguments);

},{"./_baseFor":61,"./keys":173}],63:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseGet.js", module);
(function(){
var castPath = require('./_castPath'),
    toKey = require('./_toKey');

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;

}).apply(this, arguments);

},{"./_castPath":89,"./_toKey":152}],64:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseGetAllKeys.js", module);
(function(){
var arrayPush = require('./_arrayPush'),
    isArray = require('./isArray');

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;

}).apply(this, arguments);

},{"./_arrayPush":54,"./isArray":164}],65:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseGetTag.js", module);
(function(){
var Symbol = require('./_Symbol'),
    getRawTag = require('./_getRawTag'),
    objectToString = require('./_objectToString');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;

}).apply(this, arguments);

},{"./_Symbol":46,"./_getRawTag":104,"./_objectToString":137}],66:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseHasIn.js", module);
(function(){
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;

}).apply(this, arguments);

},{}],67:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseIsArguments.js", module);
(function(){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

}).apply(this, arguments);

},{"./_baseGetTag":65,"./isObjectLike":170}],68:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseIsEqual.js", module);
(function(){
var baseIsEqualDeep = require('./_baseIsEqualDeep'),
    isObjectLike = require('./isObjectLike');

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;

}).apply(this, arguments);

},{"./_baseIsEqualDeep":69,"./isObjectLike":170}],69:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseIsEqualDeep.js", module);
(function(){
var Stack = require('./_Stack'),
    equalArrays = require('./_equalArrays'),
    equalByTag = require('./_equalByTag'),
    equalObjects = require('./_equalObjects'),
    getTag = require('./_getTag'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isTypedArray = require('./isTypedArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;

}).apply(this, arguments);

},{"./_Stack":45,"./_equalArrays":96,"./_equalByTag":97,"./_equalObjects":98,"./_getTag":106,"./isArray":164,"./isBuffer":166,"./isTypedArray":172}],70:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseIsMatch.js", module);
(function(){
var Stack = require('./_Stack'),
    baseIsEqual = require('./_baseIsEqual');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;

}).apply(this, arguments);

},{"./_Stack":45,"./_baseIsEqual":68}],71:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseIsNative.js", module);
(function(){
var isFunction = require('./isFunction'),
    isMasked = require('./_isMasked'),
    isObject = require('./isObject'),
    toSource = require('./_toSource');

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

}).apply(this, arguments);

},{"./_isMasked":118,"./_toSource":153,"./isFunction":167,"./isObject":169}],72:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseIsTypedArray.js", module);
(function(){
var baseGetTag = require('./_baseGetTag'),
    isLength = require('./isLength'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

}).apply(this, arguments);

},{"./_baseGetTag":65,"./isLength":168,"./isObjectLike":170}],73:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseIteratee.js", module);
(function(){
var baseMatches = require('./_baseMatches'),
    baseMatchesProperty = require('./_baseMatchesProperty'),
    identity = require('./identity'),
    isArray = require('./isArray'),
    property = require('./property');

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;

}).apply(this, arguments);

},{"./_baseMatches":76,"./_baseMatchesProperty":77,"./identity":162,"./isArray":164,"./property":177}],74:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseKeys.js", module);
(function(){
var isPrototype = require('./_isPrototype'),
    nativeKeys = require('./_nativeKeys');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;

}).apply(this, arguments);

},{"./_isPrototype":119,"./_nativeKeys":135}],75:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseMap.js", module);
(function(){
var baseEach = require('./_baseEach'),
    isArrayLike = require('./isArrayLike');

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;

}).apply(this, arguments);

},{"./_baseEach":59,"./isArrayLike":165}],76:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseMatches.js", module);
(function(){
var baseIsMatch = require('./_baseIsMatch'),
    getMatchData = require('./_getMatchData'),
    matchesStrictComparable = require('./_matchesStrictComparable');

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;

}).apply(this, arguments);

},{"./_baseIsMatch":70,"./_getMatchData":102,"./_matchesStrictComparable":132}],77:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseMatchesProperty.js", module);
(function(){
var baseIsEqual = require('./_baseIsEqual'),
    get = require('./get'),
    hasIn = require('./hasIn'),
    isKey = require('./_isKey'),
    isStrictComparable = require('./_isStrictComparable'),
    matchesStrictComparable = require('./_matchesStrictComparable'),
    toKey = require('./_toKey');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;

}).apply(this, arguments);

},{"./_baseIsEqual":68,"./_isKey":116,"./_isStrictComparable":120,"./_matchesStrictComparable":132,"./_toKey":152,"./get":160,"./hasIn":161}],78:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseProperty.js", module);
(function(){
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

}).apply(this, arguments);

},{}],79:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_basePropertyDeep.js", module);
(function(){
var baseGet = require('./_baseGet');

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;

}).apply(this, arguments);

},{"./_baseGet":63}],80:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseRest.js", module);
(function(){
var identity = require('./identity'),
    overRest = require('./_overRest'),
    setToString = require('./_setToString');

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;

}).apply(this, arguments);

},{"./_overRest":139,"./_setToString":144,"./identity":162}],81:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseSetToString.js", module);
(function(){
var constant = require('./constant'),
    defineProperty = require('./_defineProperty'),
    identity = require('./identity');

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;

}).apply(this, arguments);

},{"./_defineProperty":95,"./constant":155,"./identity":162}],82:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseSome.js", module);
(function(){
var baseEach = require('./_baseEach');

/**
 * The base implementation of `_.some` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function baseSome(collection, predicate) {
  var result;

  baseEach(collection, function(value, index, collection) {
    result = predicate(value, index, collection);
    return !result;
  });
  return !!result;
}

module.exports = baseSome;

}).apply(this, arguments);

},{"./_baseEach":59}],83:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseTimes.js", module);
(function(){
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

}).apply(this, arguments);

},{}],84:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseToString.js", module);
(function(){
var Symbol = require('./_Symbol'),
    arrayMap = require('./_arrayMap'),
    isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;

}).apply(this, arguments);

},{"./_Symbol":46,"./_arrayMap":53,"./isArray":164,"./isSymbol":171}],85:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseUnary.js", module);
(function(){
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;

}).apply(this, arguments);

},{}],86:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_baseZipObject.js", module);
(function(){
/**
 * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
 *
 * @private
 * @param {Array} props The property identifiers.
 * @param {Array} values The property values.
 * @param {Function} assignFunc The function to assign values.
 * @returns {Object} Returns the new object.
 */
function baseZipObject(props, values, assignFunc) {
  var index = -1,
      length = props.length,
      valsLength = values.length,
      result = {};

  while (++index < length) {
    var value = index < valsLength ? values[index] : undefined;
    assignFunc(result, props[index], value);
  }
  return result;
}

module.exports = baseZipObject;

}).apply(this, arguments);

},{}],87:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_cacheHas.js", module);
(function(){
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;

}).apply(this, arguments);

},{}],88:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_castFunction.js", module);
(function(){
var identity = require('./identity');

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}

module.exports = castFunction;

}).apply(this, arguments);

},{"./identity":162}],89:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_castPath.js", module);
(function(){
var isArray = require('./isArray'),
    isKey = require('./_isKey'),
    stringToPath = require('./_stringToPath'),
    toString = require('./toString');

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;

}).apply(this, arguments);

},{"./_isKey":116,"./_stringToPath":151,"./isArray":164,"./toString":181}],90:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_copyObject.js", module);
(function(){
var assignValue = require('./_assignValue'),
    baseAssignValue = require('./_baseAssignValue');

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;

}).apply(this, arguments);

},{"./_assignValue":56,"./_baseAssignValue":58}],91:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_coreJsData.js", module);
(function(){
var root = require('./_root');

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;

}).apply(this, arguments);

},{"./_root":140}],92:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_createAssigner.js", module);
(function(){
var baseRest = require('./_baseRest'),
    isIterateeCall = require('./_isIterateeCall');

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;

}).apply(this, arguments);

},{"./_baseRest":80,"./_isIterateeCall":115}],93:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_createBaseEach.js", module);
(function(){
var isArrayLike = require('./isArrayLike');

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;

}).apply(this, arguments);

},{"./isArrayLike":165}],94:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_createBaseFor.js", module);
(function(){
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;

}).apply(this, arguments);

},{}],95:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_defineProperty.js", module);
(function(){
var getNative = require('./_getNative');

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;

}).apply(this, arguments);

},{"./_getNative":103}],96:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_equalArrays.js", module);
(function(){
var SetCache = require('./_SetCache'),
    arraySome = require('./_arraySome'),
    cacheHas = require('./_cacheHas');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;

}).apply(this, arguments);

},{"./_SetCache":44,"./_arraySome":55,"./_cacheHas":87}],97:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_equalByTag.js", module);
(function(){
var Symbol = require('./_Symbol'),
    Uint8Array = require('./_Uint8Array'),
    eq = require('./eq'),
    equalArrays = require('./_equalArrays'),
    mapToArray = require('./_mapToArray'),
    setToArray = require('./_setToArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;

}).apply(this, arguments);

},{"./_Symbol":46,"./_Uint8Array":47,"./_equalArrays":96,"./_mapToArray":131,"./_setToArray":143,"./eq":156}],98:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_equalObjects.js", module);
(function(){
var getAllKeys = require('./_getAllKeys');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

}).apply(this, arguments);

},{"./_getAllKeys":100}],99:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_freeGlobal.js", module);
(function(){
(function (global){
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

}).apply(this, arguments);

},{}],100:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_getAllKeys.js", module);
(function(){
var baseGetAllKeys = require('./_baseGetAllKeys'),
    getSymbols = require('./_getSymbols'),
    keys = require('./keys');

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;

}).apply(this, arguments);

},{"./_baseGetAllKeys":64,"./_getSymbols":105,"./keys":173}],101:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_getMapData.js", module);
(function(){
var isKeyable = require('./_isKeyable');

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;

}).apply(this, arguments);

},{"./_isKeyable":117}],102:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_getMatchData.js", module);
(function(){
var isStrictComparable = require('./_isStrictComparable'),
    keys = require('./keys');

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;

}).apply(this, arguments);

},{"./_isStrictComparable":120,"./keys":173}],103:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_getNative.js", module);
(function(){
var baseIsNative = require('./_baseIsNative'),
    getValue = require('./_getValue');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

}).apply(this, arguments);

},{"./_baseIsNative":71,"./_getValue":107}],104:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_getRawTag.js", module);
(function(){
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

}).apply(this, arguments);

},{"./_Symbol":46}],105:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_getSymbols.js", module);
(function(){
var arrayFilter = require('./_arrayFilter'),
    stubArray = require('./stubArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;

}).apply(this, arguments);

},{"./_arrayFilter":51,"./stubArray":179}],106:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_getTag.js", module);
(function(){
var DataView = require('./_DataView'),
    Map = require('./_Map'),
    Promise = require('./_Promise'),
    Set = require('./_Set'),
    WeakMap = require('./_WeakMap'),
    baseGetTag = require('./_baseGetTag'),
    toSource = require('./_toSource');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;

}).apply(this, arguments);

},{"./_DataView":37,"./_Map":40,"./_Promise":42,"./_Set":43,"./_WeakMap":48,"./_baseGetTag":65,"./_toSource":153}],107:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_getValue.js", module);
(function(){
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

}).apply(this, arguments);

},{}],108:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_hasPath.js", module);
(function(){
var castPath = require('./_castPath'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isIndex = require('./_isIndex'),
    isLength = require('./isLength'),
    toKey = require('./_toKey');

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;

}).apply(this, arguments);

},{"./_castPath":89,"./_isIndex":114,"./_toKey":152,"./isArguments":163,"./isArray":164,"./isLength":168}],109:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_hashClear.js", module);
(function(){
var nativeCreate = require('./_nativeCreate');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

}).apply(this, arguments);

},{"./_nativeCreate":134}],110:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_hashDelete.js", module);
(function(){
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

}).apply(this, arguments);

},{}],111:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_hashGet.js", module);
(function(){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

}).apply(this, arguments);

},{"./_nativeCreate":134}],112:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_hashHas.js", module);
(function(){
var nativeCreate = require('./_nativeCreate');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

}).apply(this, arguments);

},{"./_nativeCreate":134}],113:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_hashSet.js", module);
(function(){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

}).apply(this, arguments);

},{"./_nativeCreate":134}],114:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_isIndex.js", module);
(function(){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;

}).apply(this, arguments);

},{}],115:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_isIterateeCall.js", module);
(function(){
var eq = require('./eq'),
    isArrayLike = require('./isArrayLike'),
    isIndex = require('./_isIndex'),
    isObject = require('./isObject');

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;

}).apply(this, arguments);

},{"./_isIndex":114,"./eq":156,"./isArrayLike":165,"./isObject":169}],116:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_isKey.js", module);
(function(){
var isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;

}).apply(this, arguments);

},{"./isArray":164,"./isSymbol":171}],117:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_isKeyable.js", module);
(function(){
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;

}).apply(this, arguments);

},{}],118:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_isMasked.js", module);
(function(){
var coreJsData = require('./_coreJsData');

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;

}).apply(this, arguments);

},{"./_coreJsData":91}],119:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_isPrototype.js", module);
(function(){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;

}).apply(this, arguments);

},{}],120:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_isStrictComparable.js", module);
(function(){
var isObject = require('./isObject');

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;

}).apply(this, arguments);

},{"./isObject":169}],121:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_listCacheClear.js", module);
(function(){
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

}).apply(this, arguments);

},{}],122:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_listCacheDelete.js", module);
(function(){
var assocIndexOf = require('./_assocIndexOf');

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;

}).apply(this, arguments);

},{"./_assocIndexOf":57}],123:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_listCacheGet.js", module);
(function(){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

}).apply(this, arguments);

},{"./_assocIndexOf":57}],124:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_listCacheHas.js", module);
(function(){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

}).apply(this, arguments);

},{"./_assocIndexOf":57}],125:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_listCacheSet.js", module);
(function(){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;

}).apply(this, arguments);

},{"./_assocIndexOf":57}],126:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_mapCacheClear.js", module);
(function(){
var Hash = require('./_Hash'),
    ListCache = require('./_ListCache'),
    Map = require('./_Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;

}).apply(this, arguments);

},{"./_Hash":38,"./_ListCache":39,"./_Map":40}],127:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_mapCacheDelete.js", module);
(function(){
var getMapData = require('./_getMapData');

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

}).apply(this, arguments);

},{"./_getMapData":101}],128:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_mapCacheGet.js", module);
(function(){
var getMapData = require('./_getMapData');

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

}).apply(this, arguments);

},{"./_getMapData":101}],129:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_mapCacheHas.js", module);
(function(){
var getMapData = require('./_getMapData');

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

}).apply(this, arguments);

},{"./_getMapData":101}],130:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_mapCacheSet.js", module);
(function(){
var getMapData = require('./_getMapData');

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

}).apply(this, arguments);

},{"./_getMapData":101}],131:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_mapToArray.js", module);
(function(){
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

}).apply(this, arguments);

},{}],132:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_matchesStrictComparable.js", module);
(function(){
/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;

}).apply(this, arguments);

},{}],133:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_memoizeCapped.js", module);
(function(){
var memoize = require('./memoize');

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;

}).apply(this, arguments);

},{"./memoize":176}],134:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_nativeCreate.js", module);
(function(){
var getNative = require('./_getNative');

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;

}).apply(this, arguments);

},{"./_getNative":103}],135:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_nativeKeys.js", module);
(function(){
var overArg = require('./_overArg');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;

}).apply(this, arguments);

},{"./_overArg":138}],136:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_nodeUtil.js", module);
(function(){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

}).apply(this, arguments);

},{"./_freeGlobal":99}],137:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_objectToString.js", module);
(function(){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

}).apply(this, arguments);

},{}],138:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_overArg.js", module);
(function(){
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

}).apply(this, arguments);

},{}],139:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_overRest.js", module);
(function(){
var apply = require('./_apply');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;

}).apply(this, arguments);

},{"./_apply":49}],140:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_root.js", module);
(function(){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

}).apply(this, arguments);

},{"./_freeGlobal":99}],141:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_setCacheAdd.js", module);
(function(){
/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;

}).apply(this, arguments);

},{}],142:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_setCacheHas.js", module);
(function(){
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;

}).apply(this, arguments);

},{}],143:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_setToArray.js", module);
(function(){
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

}).apply(this, arguments);

},{}],144:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_setToString.js", module);
(function(){
var baseSetToString = require('./_baseSetToString'),
    shortOut = require('./_shortOut');

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;

}).apply(this, arguments);

},{"./_baseSetToString":81,"./_shortOut":145}],145:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_shortOut.js", module);
(function(){
/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;

}).apply(this, arguments);

},{}],146:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_stackClear.js", module);
(function(){
var ListCache = require('./_ListCache');

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;

}).apply(this, arguments);

},{"./_ListCache":39}],147:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_stackDelete.js", module);
(function(){
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;

}).apply(this, arguments);

},{}],148:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_stackGet.js", module);
(function(){
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

}).apply(this, arguments);

},{}],149:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_stackHas.js", module);
(function(){
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

}).apply(this, arguments);

},{}],150:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_stackSet.js", module);
(function(){
var ListCache = require('./_ListCache'),
    Map = require('./_Map'),
    MapCache = require('./_MapCache');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

}).apply(this, arguments);

},{"./_ListCache":39,"./_Map":40,"./_MapCache":41}],151:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_stringToPath.js", module);
(function(){
var memoizeCapped = require('./_memoizeCapped');

/** Used to match property names within property paths. */
var reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;

}).apply(this, arguments);

},{"./_memoizeCapped":133}],152:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_toKey.js", module);
(function(){
var isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;

}).apply(this, arguments);

},{"./isSymbol":171}],153:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/_toSource.js", module);
(function(){
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

}).apply(this, arguments);

},{}],154:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/assign.js", module);
(function(){
var assignValue = require('./_assignValue'),
    copyObject = require('./_copyObject'),
    createAssigner = require('./_createAssigner'),
    isArrayLike = require('./isArrayLike'),
    isPrototype = require('./_isPrototype'),
    keys = require('./keys');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns own enumerable string keyed properties of source objects to the
 * destination object. Source objects are applied from left to right.
 * Subsequent sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object` and is loosely based on
 * [`Object.assign`](https://mdn.io/Object/assign).
 *
 * @static
 * @memberOf _
 * @since 0.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assignIn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assign({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'c': 3 }
 */
var assign = createAssigner(function(object, source) {
  if (isPrototype(source) || isArrayLike(source)) {
    copyObject(source, keys(source), object);
    return;
  }
  for (var key in source) {
    if (hasOwnProperty.call(source, key)) {
      assignValue(object, key, source[key]);
    }
  }
});

module.exports = assign;

}).apply(this, arguments);

},{"./_assignValue":56,"./_copyObject":90,"./_createAssigner":92,"./_isPrototype":119,"./isArrayLike":165,"./keys":173}],155:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/constant.js", module);
(function(){
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;

}).apply(this, arguments);

},{}],156:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/eq.js", module);
(function(){
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;

}).apply(this, arguments);

},{}],157:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/filter.js", module);
(function(){
var arrayFilter = require('./_arrayFilter'),
    baseFilter = require('./_baseFilter'),
    baseIteratee = require('./_baseIteratee'),
    isArray = require('./isArray');

/**
 * Iterates over elements of `collection`, returning an array of all elements
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * **Note:** Unlike `_.remove`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see _.reject
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * _.filter(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, { 'age': 36, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.filter(users, 'active');
 * // => objects for ['barney']
 */
function filter(collection, predicate) {
  var func = isArray(collection) ? arrayFilter : baseFilter;
  return func(collection, baseIteratee(predicate, 3));
}

module.exports = filter;

}).apply(this, arguments);

},{"./_arrayFilter":51,"./_baseFilter":60,"./_baseIteratee":73,"./isArray":164}],158:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/forEach.js", module);
(function(){
var arrayEach = require('./_arrayEach'),
    baseEach = require('./_baseEach'),
    castFunction = require('./_castFunction'),
    isArray = require('./isArray');

/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _.forEach([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forEach(collection, iteratee) {
  var func = isArray(collection) ? arrayEach : baseEach;
  return func(collection, castFunction(iteratee));
}

module.exports = forEach;

}).apply(this, arguments);

},{"./_arrayEach":50,"./_baseEach":59,"./_castFunction":88,"./isArray":164}],159:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/forOwn.js", module);
(function(){
var baseForOwn = require('./_baseForOwn'),
    castFunction = require('./_castFunction');

/**
 * Iterates over own enumerable string keyed properties of an object and
 * invokes `iteratee` for each property. The iteratee is invoked with three
 * arguments: (value, key, object). Iteratee functions may exit iteration
 * early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 0.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forOwnRight
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forOwn(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forOwn(object, iteratee) {
  return object && baseForOwn(object, castFunction(iteratee));
}

module.exports = forOwn;

}).apply(this, arguments);

},{"./_baseForOwn":62,"./_castFunction":88}],160:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/get.js", module);
(function(){
var baseGet = require('./_baseGet');

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;

}).apply(this, arguments);

},{"./_baseGet":63}],161:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/hasIn.js", module);
(function(){
var baseHasIn = require('./_baseHasIn'),
    hasPath = require('./_hasPath');

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;

}).apply(this, arguments);

},{"./_baseHasIn":66,"./_hasPath":108}],162:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/identity.js", module);
(function(){
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

}).apply(this, arguments);

},{}],163:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/isArguments.js", module);
(function(){
var baseIsArguments = require('./_baseIsArguments'),
    isObjectLike = require('./isObjectLike');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;

}).apply(this, arguments);

},{"./_baseIsArguments":67,"./isObjectLike":170}],164:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/isArray.js", module);
(function(){
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

}).apply(this, arguments);

},{}],165:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/isArrayLike.js", module);
(function(){
var isFunction = require('./isFunction'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

}).apply(this, arguments);

},{"./isFunction":167,"./isLength":168}],166:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/isBuffer.js", module);
(function(){
var root = require('./_root'),
    stubFalse = require('./stubFalse');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

}).apply(this, arguments);

},{"./_root":140,"./stubFalse":180}],167:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/isFunction.js", module);
(function(){
var baseGetTag = require('./_baseGetTag'),
    isObject = require('./isObject');

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

}).apply(this, arguments);

},{"./_baseGetTag":65,"./isObject":169}],168:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/isLength.js", module);
(function(){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

}).apply(this, arguments);

},{}],169:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/isObject.js", module);
(function(){
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

}).apply(this, arguments);

},{}],170:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/isObjectLike.js", module);
(function(){
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

}).apply(this, arguments);

},{}],171:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/isSymbol.js", module);
(function(){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;

}).apply(this, arguments);

},{"./_baseGetTag":65,"./isObjectLike":170}],172:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/isTypedArray.js", module);
(function(){
var baseIsTypedArray = require('./_baseIsTypedArray'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;

}).apply(this, arguments);

},{"./_baseIsTypedArray":72,"./_baseUnary":85,"./_nodeUtil":136}],173:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/keys.js", module);
(function(){
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeys = require('./_baseKeys'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

}).apply(this, arguments);

},{"./_arrayLikeKeys":52,"./_baseKeys":74,"./isArrayLike":165}],174:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/map.js", module);
(function(){
var arrayMap = require('./_arrayMap'),
    baseIteratee = require('./_baseIteratee'),
    baseMap = require('./_baseMap'),
    isArray = require('./isArray');

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee, 3));
}

module.exports = map;

}).apply(this, arguments);

},{"./_arrayMap":53,"./_baseIteratee":73,"./_baseMap":75,"./isArray":164}],175:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/mapValues.js", module);
(function(){
var baseAssignValue = require('./_baseAssignValue'),
    baseForOwn = require('./_baseForOwn'),
    baseIteratee = require('./_baseIteratee');

/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */
function mapValues(object, iteratee) {
  var result = {};
  iteratee = baseIteratee(iteratee, 3);

  baseForOwn(object, function(value, key, object) {
    baseAssignValue(result, key, iteratee(value, key, object));
  });
  return result;
}

module.exports = mapValues;

}).apply(this, arguments);

},{"./_baseAssignValue":58,"./_baseForOwn":62,"./_baseIteratee":73}],176:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/memoize.js", module);
(function(){
var MapCache = require('./_MapCache');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;

}).apply(this, arguments);

},{"./_MapCache":41}],177:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/property.js", module);
(function(){
var baseProperty = require('./_baseProperty'),
    basePropertyDeep = require('./_basePropertyDeep'),
    isKey = require('./_isKey'),
    toKey = require('./_toKey');

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;

}).apply(this, arguments);

},{"./_baseProperty":78,"./_basePropertyDeep":79,"./_isKey":116,"./_toKey":152}],178:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/some.js", module);
(function(){
var arraySome = require('./_arraySome'),
    baseIteratee = require('./_baseIteratee'),
    baseSome = require('./_baseSome'),
    isArray = require('./isArray'),
    isIterateeCall = require('./_isIterateeCall');

/**
 * Checks if `predicate` returns truthy for **any** element of `collection`.
 * Iteration is stopped once `predicate` returns truthy. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 * @example
 *
 * _.some([null, 0, 'yes', false], Boolean);
 * // => true
 *
 * var users = [
 *   { 'user': 'barney', 'active': true },
 *   { 'user': 'fred',   'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.some(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.some(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.some(users, 'active');
 * // => true
 */
function some(collection, predicate, guard) {
  var func = isArray(collection) ? arraySome : baseSome;
  if (guard && isIterateeCall(collection, predicate, guard)) {
    predicate = undefined;
  }
  return func(collection, baseIteratee(predicate, 3));
}

module.exports = some;

}).apply(this, arguments);

},{"./_arraySome":55,"./_baseIteratee":73,"./_baseSome":82,"./_isIterateeCall":115,"./isArray":164}],179:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/stubArray.js", module);
(function(){
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;

}).apply(this, arguments);

},{}],180:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/stubFalse.js", module);
(function(){
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

}).apply(this, arguments);

},{}],181:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/toString.js", module);
(function(){
var baseToString = require('./_baseToString');

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;

}).apply(this, arguments);

},{"./_baseToString":84}],182:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/lodash/zipObject.js", module);
(function(){
var assignValue = require('./_assignValue'),
    baseZipObject = require('./_baseZipObject');

/**
 * This method is like `_.fromPairs` except that it accepts two arrays,
 * one of property identifiers and one of corresponding values.
 *
 * @static
 * @memberOf _
 * @since 0.4.0
 * @category Array
 * @param {Array} [props=[]] The property identifiers.
 * @param {Array} [values=[]] The property values.
 * @returns {Object} Returns the new object.
 * @example
 *
 * _.zipObject(['a', 'b'], [1, 2]);
 * // => { 'a': 1, 'b': 2 }
 */
function zipObject(props, values) {
  return baseZipObject(props || [], values || [], assignValue);
}

module.exports = zipObject;

}).apply(this, arguments);

},{"./_assignValue":56,"./_baseZipObject":86}],183:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/parsejson/index.js", module);
(function(){
(function (global){
/**
 * JSON parse.
 *
 * @see Based on jQuery#parseJSON (MIT) and JSON2
 * @api private
 */

var rvalidchars = /^[\],:{}\s]*$/;
var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
var rtrimLeft = /^\s+/;
var rtrimRight = /\s+$/;

module.exports = function parsejson(data) {
  if ('string' != typeof data || !data) {
    return null;
  }

  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');

  // Attempt to parse using the native JSON parser first
  if (global.JSON && JSON.parse) {
    return JSON.parse(data);
  }

  if (rvalidchars.test(data.replace(rvalidescape, '@')
      .replace(rvalidtokens, ']')
      .replace(rvalidbraces, ''))) {
    return (new Function('return ' + data))();
  }
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

}).apply(this, arguments);

},{}],184:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/parseqs/index.js", module);
(function(){
/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

exports.decode = function(qs){
  var qry = {};
  var pairs = qs.split('&');
  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
};

}).apply(this, arguments);

},{}],185:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/parseuri/index.js", module);
(function(){
/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
];

module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
        uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
    }

    return uri;
};

}).apply(this, arguments);

},{}],186:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/process/browser.js", module);
(function(){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

}).apply(this, arguments);

},{}],187:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/socket.io-client/lib/index.js", module);
(function(){

/**
 * Module dependencies.
 */

var url = require('./url');
var parser = require('socket.io-parser');
var Manager = require('./manager');
var debug = require('debug')('socket.io-client');

/**
 * Module exports.
 */

module.exports = exports = lookup;

/**
 * Managers cache.
 */

var cache = exports.managers = {};

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup (uri, opts) {
  if (typeof uri === 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};

  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var path = parsed.path;
  var sameNamespace = cache[id] && path in cache[id].nsps;
  var newConnection = opts.forceNew || opts['force new connection'] ||
                      false === opts.multiplex || sameNamespace;

  var io;

  if (newConnection) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }
    io = cache[id];
  }
  if (parsed.query && !opts.query) {
    opts.query = parsed.query;
  } else if (opts && 'object' === typeof opts.query) {
    opts.query = encodeQueryString(opts.query);
  }
  return io.socket(parsed.path, opts);
}
/**
 *  Helper method to parse query objects to string.
 * @param {object} query
 * @returns {string}
 */
function encodeQueryString (obj) {
  var str = [];
  for (var p in obj) {
    if (obj.hasOwnProperty(p)) {
      str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
    }
  }
  return str.join('&');
}
/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = parser.protocol;

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = require('./manager');
exports.Socket = require('./socket');

}).apply(this, arguments);

},{"./manager":188,"./socket":190,"./url":191,"debug":193,"socket.io-parser":197}],188:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/socket.io-client/lib/manager.js", module);
(function(){

/**
 * Module dependencies.
 */

var eio = require('engine.io-client');
var Socket = require('./socket');
var Emitter = require('component-emitter');
var parser = require('socket.io-parser');
var on = require('./on');
var bind = require('component-bind');
var debug = require('debug')('socket.io-client:manager');
var indexOf = require('indexof');
var Backoff = require('backo2');

/**
 * IE6+ hasOwnProperty
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Module exports
 */

module.exports = Manager;

/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager (uri, opts) {
  if (!(this instanceof Manager)) return new Manager(uri, opts);
  if (uri && ('object' === typeof uri)) {
    opts = uri;
    uri = undefined;
  }
  opts = opts || {};

  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.randomizationFactor(opts.randomizationFactor || 0.5);
  this.backoff = new Backoff({
    min: this.reconnectionDelay(),
    max: this.reconnectionDelayMax(),
    jitter: this.randomizationFactor()
  });
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connecting = [];
  this.lastPing = null;
  this.encoding = false;
  this.packetBuffer = [];
  this.encoder = new parser.Encoder();
  this.decoder = new parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}

/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */

Manager.prototype.emitAll = function () {
  this.emit.apply(this, arguments);
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
    }
  }
};

/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */

Manager.prototype.updateSocketIds = function () {
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].id = this.engine.id;
    }
  }
};

/**
 * Mix in `Emitter`.
 */

Emitter(Manager.prototype);

/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function (v) {
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionAttempts = function (v) {
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelay = function (v) {
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  this.backoff && this.backoff.setMin(v);
  return this;
};

Manager.prototype.randomizationFactor = function (v) {
  if (!arguments.length) return this._randomizationFactor;
  this._randomizationFactor = v;
  this.backoff && this.backoff.setJitter(v);
  return this;
};

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelayMax = function (v) {
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  this.backoff && this.backoff.setMax(v);
  return this;
};

/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.timeout = function (v) {
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

Manager.prototype.maybeReconnectOnOpen = function () {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.reconnect();
  }
};

/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

Manager.prototype.open =
Manager.prototype.connect = function (fn, opts) {
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;

  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';
  this.skipReconnect = false;

  // emit `open`
  var openSub = on(socket, 'open', function () {
    self.onopen();
    fn && fn();
  });

  // emit `connect_error`
  var errorSub = on(socket, 'error', function (data) {
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);
    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    } else {
      // Only do this if there is no fn to handle the error
      self.maybeReconnectOnOpen();
    }
  });

  // emit `connect_timeout`
  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout);

    // set timer
    var timer = setTimeout(function () {
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);

  return this;
};

/**
 * Called upon transport open.
 *
 * @api private
 */

Manager.prototype.onopen = function () {
  debug('open');

  // clear old subs
  this.cleanup();

  // mark as open
  this.readyState = 'open';
  this.emit('open');

  // add new subs
  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
};

/**
 * Called upon a ping.
 *
 * @api private
 */

Manager.prototype.onping = function () {
  this.lastPing = new Date();
  this.emitAll('ping');
};

/**
 * Called upon a packet.
 *
 * @api private
 */

Manager.prototype.onpong = function () {
  this.emitAll('pong', new Date() - this.lastPing);
};

/**
 * Called with data.
 *
 * @api private
 */

Manager.prototype.ondata = function (data) {
  this.decoder.add(data);
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Manager.prototype.ondecoded = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon socket error.
 *
 * @api private
 */

Manager.prototype.onerror = function (err) {
  debug('error', err);
  this.emitAll('error', err);
};

/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */

Manager.prototype.socket = function (nsp, opts) {
  var socket = this.nsps[nsp];
  if (!socket) {
    socket = new Socket(this, nsp, opts);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connecting', onConnecting);
    socket.on('connect', function () {
      socket.id = self.engine.id;
    });

    if (this.autoConnect) {
      // manually call here since connecting evnet is fired before listening
      onConnecting();
    }
  }

  function onConnecting () {
    if (!~indexOf(self.connecting, socket)) {
      self.connecting.push(socket);
    }
  }

  return socket;
};

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

Manager.prototype.destroy = function (socket) {
  var index = indexOf(this.connecting, socket);
  if (~index) this.connecting.splice(index, 1);
  if (this.connecting.length) return;

  this.close();
};

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

Manager.prototype.packet = function (packet) {
  debug('writing packet %j', packet);
  var self = this;
  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function (encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i], packet.options);
      }
      self.encoding = false;
      self.processPacketQueue();
    });
  } else { // add packet to the queue
    self.packetBuffer.push(packet);
  }
};

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

Manager.prototype.processPacketQueue = function () {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

Manager.prototype.cleanup = function () {
  debug('cleanup');

  var subsLength = this.subs.length;
  for (var i = 0; i < subsLength; i++) {
    var sub = this.subs.shift();
    sub.destroy();
  }

  this.packetBuffer = [];
  this.encoding = false;
  this.lastPing = null;

  this.decoder.destroy();
};

/**
 * Close the current socket.
 *
 * @api private
 */

Manager.prototype.close =
Manager.prototype.disconnect = function () {
  debug('disconnect');
  this.skipReconnect = true;
  this.reconnecting = false;
  if ('opening' === this.readyState) {
    // `onclose` will not fire because
    // an open event never happened
    this.cleanup();
  }
  this.backoff.reset();
  this.readyState = 'closed';
  if (this.engine) this.engine.close();
};

/**
 * Called upon engine close.
 *
 * @api private
 */

Manager.prototype.onclose = function (reason) {
  debug('onclose');

  this.cleanup();
  this.backoff.reset();
  this.readyState = 'closed';
  this.emit('close', reason);

  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};

/**
 * Attempt a reconnection.
 *
 * @api private
 */

Manager.prototype.reconnect = function () {
  if (this.reconnecting || this.skipReconnect) return this;

  var self = this;

  if (this.backoff.attempts >= this._reconnectionAttempts) {
    debug('reconnect failed');
    this.backoff.reset();
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.backoff.duration();
    debug('will wait %dms before reconnect attempt', delay);

    this.reconnecting = true;
    var timer = setTimeout(function () {
      if (self.skipReconnect) return;

      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.backoff.attempts);
      self.emitAll('reconnecting', self.backoff.attempts);

      // check again for the case socket closed in above events
      if (self.skipReconnect) return;

      self.open(function (err) {
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }
};

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

Manager.prototype.onreconnect = function () {
  var attempt = this.backoff.attempts;
  this.reconnecting = false;
  this.backoff.reset();
  this.updateSocketIds();
  this.emitAll('reconnect', attempt);
};

}).apply(this, arguments);

},{"./on":189,"./socket":190,"backo2":6,"component-bind":13,"component-emitter":192,"debug":193,"engine.io-client":16,"indexof":35,"socket.io-parser":197}],189:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/socket.io-client/lib/on.js", module);
(function(){

/**
 * Module exports.
 */

module.exports = on;

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on (obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function () {
      obj.removeListener(ev, fn);
    }
  };
}

}).apply(this, arguments);

},{}],190:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/socket.io-client/lib/socket.js", module);
(function(){

/**
 * Module dependencies.
 */

var parser = require('socket.io-parser');
var Emitter = require('component-emitter');
var toArray = require('to-array');
var on = require('./on');
var bind = require('component-bind');
var debug = require('debug')('socket.io-client:socket');
var hasBin = require('has-binary');

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  connecting: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1,
  ping: 1,
  pong: 1
};

/**
 * Shortcut to `Emitter#emit`.
 */

var emit = Emitter.prototype.emit;

/**
 * `Socket` constructor.
 *
 * @api public
 */

function Socket (io, nsp, opts) {
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat
  this.ids = 0;
  this.acks = {};
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
  if (opts && opts.query) {
    this.query = opts.query;
  }
  if (this.io.autoConnect) this.open();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function () {
  if (this.subs) return;

  var io = this.io;
  this.subs = [
    on(io, 'open', bind(this, 'onopen')),
    on(io, 'packet', bind(this, 'onpacket')),
    on(io, 'close', bind(this, 'onclose'))
  ];
};

/**
 * "Opens" the socket.
 *
 * @api public
 */

Socket.prototype.open =
Socket.prototype.connect = function () {
  if (this.connected) return this;

  this.subEvents();
  this.io.open(); // ensure open
  if ('open' === this.io.readyState) this.onopen();
  this.emit('connecting');
  return this;
};

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send = function () {
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function (ev) {
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var parserType = parser.EVENT; // default
  if (hasBin(args)) { parserType = parser.BINARY_EVENT; } // binary
  var packet = { type: parserType, data: args };

  packet.options = {};
  packet.options.compress = !this.flags || false !== this.flags.compress;

  // event ack callback
  if ('function' === typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  delete this.flags;

  return this;
};

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.packet = function (packet) {
  packet.nsp = this.nsp;
  this.io.packet(packet);
};

/**
 * Called upon engine `open`.
 *
 * @api private
 */

Socket.prototype.onopen = function () {
  debug('transport is open - connecting');

  // write connect packet if necessary
  if ('/' !== this.nsp) {
    if (this.query) {
      this.packet({type: parser.CONNECT, query: this.query});
    } else {
      this.packet({type: parser.CONNECT});
    }
  }
};

/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */

Socket.prototype.onclose = function (reason) {
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  delete this.id;
  this.emit('disconnect', reason);
};

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function (packet) {
  if (packet.nsp !== this.nsp) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onevent = function (packet) {
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

Socket.prototype.ack = function (id) {
  var self = this;
  var sent = false;
  return function () {
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);

    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;
    self.packet({
      type: type,
      id: id,
      data: args
    });
  };
};

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onack = function (packet) {
  var ack = this.acks[packet.id];
  if ('function' === typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};

/**
 * Called upon server connect.
 *
 * @api private
 */

Socket.prototype.onconnect = function () {
  this.connected = true;
  this.disconnected = false;
  this.emit('connect');
  this.emitBuffered();
};

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

Socket.prototype.emitBuffered = function () {
  var i;
  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }
  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }
  this.sendBuffer = [];
};

/**
 * Called upon server disconnect.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function () {
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

Socket.prototype.destroy = function () {
  if (this.subs) {
    // clean subscriptions to avoid reconnections
    for (var i = 0; i < this.subs.length; i++) {
      this.subs[i].destroy();
    }
    this.subs = null;
  }

  this.io.destroy(this);
};

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.close =
Socket.prototype.disconnect = function () {
  if (this.connected) {
    debug('performing disconnect (%s)', this.nsp);
    this.packet({ type: parser.DISCONNECT });
  }

  // remove socket from pool
  this.destroy();

  if (this.connected) {
    // fire events
    this.onclose('io client disconnect');
  }
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Socket.prototype.compress = function (compress) {
  this.flags = this.flags || {};
  this.flags.compress = compress;
  return this;
};

}).apply(this, arguments);

},{"./on":189,"component-bind":13,"component-emitter":192,"debug":193,"has-binary":32,"socket.io-parser":197,"to-array":203}],191:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/socket.io-client/lib/url.js", module);
(function(){
(function (global){

/**
 * Module dependencies.
 */

var parseuri = require('parseuri');
var debug = require('debug')('socket.io-client:url');

/**
 * Module exports.
 */

module.exports = url;

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url (uri, loc) {
  var obj = uri;

  // default to window.location
  loc = loc || global.location;
  if (null == uri) uri = loc.protocol + '//' + loc.host;

  // relative path support
  if ('string' === typeof uri) {
    if ('/' === uri.charAt(0)) {
      if ('/' === uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }

    if (!/^(https?|wss?):\/\//.test(uri)) {
      debug('protocol-less url %s', uri);
      if ('undefined' !== typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    }

    // parse
    debug('parse %s', uri);
    obj = parseuri(uri);
  }

  // make sure we treat `localhost:80` and `localhost` equally
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    } else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';

  var ipv6 = obj.host.indexOf(':') !== -1;
  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

  // define unique id
  obj.id = obj.protocol + '://' + host + ':' + obj.port;
  // define href
  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));

  return obj;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

}).apply(this, arguments);

},{"debug":193,"parseuri":185}],192:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/socket.io-client/node_modules/component-emitter/index.js", module);
(function(){

/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

}).apply(this, arguments);

},{}],193:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/socket.io-client/node_modules/debug/browser.js", module);
(function(){
(function (process){

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    return exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (typeof process !== 'undefined' && 'env' in process) {
    return process.env.DEBUG;
  }
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}

}).call(this,require('_process'))

}).apply(this, arguments);

},{"./debug":194,"_process":186}],194:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/socket.io-client/node_modules/debug/debug.js", module);
(function(){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug.debug = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting
    args = exports.formatArgs.apply(self, args);

    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/[\\^$+?.()|[\]{}]/g, '\\$&').replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

}).apply(this, arguments);

},{"ms":195}],195:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/socket.io-client/node_modules/ms/index.js", module);
(function(){
/**
 * Helpers.
 */

var s = 1000
var m = s * 60
var h = m * 60
var d = h * 24
var y = d * 365.25

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {}
  var type = typeof val
  if (type === 'string' && val.length > 0) {
    return parse(val)
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ?
			fmtLong(val) :
			fmtShort(val)
  }
  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))
}

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str)
  if (str.length > 10000) {
    return
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)
  if (!match) {
    return
  }
  var n = parseFloat(match[1])
  var type = (match[2] || 'ms').toLowerCase()
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y
    case 'days':
    case 'day':
    case 'd':
      return n * d
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n
    default:
      return undefined
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd'
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h'
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm'
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's'
  }
  return ms + 'ms'
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms'
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name
  }
  return Math.ceil(ms / n) + ' ' + name + 's'
}

}).apply(this, arguments);

},{}],196:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/socket.io-parser/binary.js", module);
(function(){
(function (global){
/*global Blob,File*/

/**
 * Module requirements
 */

var isArray = require('isarray');
var isBuf = require('./is-buffer');

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function(packet){
  var buffers = [];
  var packetData = packet.data;

  function _deconstructPacket(data) {
    if (!data) return data;

    if (isBuf(data)) {
      var placeholder = { _placeholder: true, num: buffers.length };
      buffers.push(data);
      return placeholder;
    } else if (isArray(data)) {
      var newData = new Array(data.length);
      for (var i = 0; i < data.length; i++) {
        newData[i] = _deconstructPacket(data[i]);
      }
      return newData;
    } else if ('object' == typeof data && !(data instanceof Date)) {
      var newData = {};
      for (var key in data) {
        newData[key] = _deconstructPacket(data[key]);
      }
      return newData;
    }
    return data;
  }

  var pack = packet;
  pack.data = _deconstructPacket(packetData);
  pack.attachments = buffers.length; // number of binary 'attachments'
  return {packet: pack, buffers: buffers};
};

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

exports.reconstructPacket = function(packet, buffers) {
  var curPlaceHolder = 0;

  function _reconstructPacket(data) {
    if (data && data._placeholder) {
      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)
      return buf;
    } else if (isArray(data)) {
      for (var i = 0; i < data.length; i++) {
        data[i] = _reconstructPacket(data[i]);
      }
      return data;
    } else if (data && 'object' == typeof data) {
      for (var key in data) {
        data[key] = _reconstructPacket(data[key]);
      }
      return data;
    }
    return data;
  }

  packet.data = _reconstructPacket(packet.data);
  packet.attachments = undefined; // no longer useful
  return packet;
};

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

exports.removeBlobs = function(data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj;

    // convert any blob
    if ((global.Blob && obj instanceof Blob) ||
        (global.File && obj instanceof File)) {
      pendingBlobs++;

      // async filereader
      var fileReader = new FileReader();
      fileReader.onload = function() { // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        }
        else {
          bloblessData = this.result;
        }

        // if nothing pending its callback time
        if(! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) { // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;
  _removeBlobs(bloblessData);
  if (!pendingBlobs) {
    callback(bloblessData);
  }
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

}).apply(this, arguments);

},{"./is-buffer":198,"isarray":201}],197:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/socket.io-parser/index.js", module);
(function(){

/**
 * Module dependencies.
 */

var debug = require('debug')('socket.io-parser');
var json = require('json3');
var Emitter = require('component-emitter');
var binary = require('./binary');
var isBuf = require('./is-buffer');

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = 4;

/**
 * Packet types.
 *
 * @api public
 */

exports.types = [
  'CONNECT',
  'DISCONNECT',
  'EVENT',
  'ACK',
  'ERROR',
  'BINARY_EVENT',
  'BINARY_ACK'
];

/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;

/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;

/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;

/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;

/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;

/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;

/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function(obj, callback){
  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
    encodeAsBinary(obj, callback);
  }
  else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

function encodeAsString(obj) {
  var str = '';
  var nsp = false;

  // first is type
  str += obj.type;

  // attachments if we have them
  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
    str += obj.attachments;
    str += '-';
  }

  // if we have a namespace other than `/`
  // we append it followed by a comma `,`
  if (obj.nsp && '/' != obj.nsp) {
    nsp = true;
    str += obj.nsp;
  }

  // immediately followed by the id
  if (null != obj.id) {
    if (nsp) {
      str += ',';
      nsp = false;
    }
    str += obj.id;
  }

  // json data
  if (null != obj.data) {
    if (nsp) str += ',';
    str += json.stringify(obj.data);
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

function encodeAsBinary(obj, callback) {

  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;

    buffers.unshift(pack); // add packet info to beginning of data list
    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

function Decoder() {
  this.reconstructor = null;
}

/**
 * Mix in `Emitter` with Decoder.
 */

Emitter(Decoder.prototype);

/**
 * Decodes an ecoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function(obj) {
  var packet;
  if ('string' == typeof obj) {
    packet = decodeString(obj);
    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet);

      // no attachments, labeled binary but no binary data to follow
      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else { // non-binary full packet
      this.emit('decoded', packet);
    }
  }
  else if (isBuf(obj) || obj.base64) { // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);
      if (packet) { // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  }
  else {
    throw new Error('Unknown type: ' + obj);
  }
};

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

function decodeString(str) {
  var p = {};
  var i = 0;

  // look up type
  p.type = Number(str.charAt(0));
  if (null == exports.types[p.type]) return error();

  // look up attachments if type binary
  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
    var buf = '';
    while (str.charAt(++i) != '-') {
      buf += str.charAt(i);
      if (i == str.length) break;
    }
    if (buf != Number(buf) || str.charAt(i) != '-') {
      throw new Error('Illegal attachments');
    }
    p.attachments = Number(buf);
  }

  // look up namespace (if any)
  if ('/' == str.charAt(i + 1)) {
    p.nsp = '';
    while (++i) {
      var c = str.charAt(i);
      if (',' == c) break;
      p.nsp += c;
      if (i == str.length) break;
    }
  } else {
    p.nsp = '/';
  }

  // look up id
  var next = str.charAt(i + 1);
  if ('' !== next && Number(next) == next) {
    p.id = '';
    while (++i) {
      var c = str.charAt(i);
      if (null == c || Number(c) != c) {
        --i;
        break;
      }
      p.id += str.charAt(i);
      if (i == str.length) break;
    }
    p.id = Number(p.id);
  }

  // look up json data
  if (str.charAt(++i)) {
    p = tryParse(p, str.substr(i));
  }

  debug('decoded %s as %j', str, p);
  return p;
}

function tryParse(p, str) {
  try {
    p.data = json.parse(str);
  } catch(e){
    return error();
  }
  return p; 
};

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

Decoder.prototype.destroy = function() {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

BinaryReconstructor.prototype.takeBinaryData = function(binData) {
  this.buffers.push(binData);
  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }
  return null;
};

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

BinaryReconstructor.prototype.finishedReconstruction = function() {
  this.reconPack = null;
  this.buffers = [];
};

function error(data){
  return {
    type: exports.ERROR,
    data: 'parser error'
  };
}

}).apply(this, arguments);

},{"./binary":196,"./is-buffer":198,"component-emitter":14,"debug":199,"json3":36}],198:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/socket.io-parser/is-buffer.js", module);
(function(){
(function (global){

module.exports = isBuf;

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

function isBuf(obj) {
  return (global.Buffer && global.Buffer.isBuffer(obj)) ||
         (global.ArrayBuffer && obj instanceof ArrayBuffer);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

}).apply(this, arguments);

},{}],199:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/socket.io-parser/node_modules/debug/browser.js", module);
(function(){

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  return ('WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  return JSON.stringify(v);
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}
  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}

}).apply(this, arguments);

},{"./debug":200}],200:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/socket.io-parser/node_modules/debug/debug.js", module);
(function(){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = Array.prototype.slice.call(arguments);

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    if ('function' === typeof exports.formatArgs) {
      args = exports.formatArgs.apply(self, args);
    }
    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

}).apply(this, arguments);

},{"ms":202}],201:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/socket.io-parser/node_modules/isarray/index.js", module);
(function(){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

}).apply(this, arguments);

},{}],202:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/socket.io-parser/node_modules/ms/index.js", module);
(function(){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options){
  options = options || {};
  if ('string' == typeof val) return parse(val);
  return options.long
    ? long(val)
    : short(val);
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = '' + str;
  if (str.length > 10000) return;
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
  if (!match) return;
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function short(ms) {
  if (ms >= d) return Math.round(ms / d) + 'd';
  if (ms >= h) return Math.round(ms / h) + 'h';
  if (ms >= m) return Math.round(ms / m) + 'm';
  if (ms >= s) return Math.round(ms / s) + 's';
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function long(ms) {
  return plural(ms, d, 'day')
    || plural(ms, h, 'hour')
    || plural(ms, m, 'minute')
    || plural(ms, s, 'second')
    || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) return;
  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
  return Math.ceil(ms / n) + ' ' + name + 's';
}

}).apply(this, arguments);

},{}],203:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/to-array/index.js", module);
(function(){
module.exports = toArray

function toArray(list, index) {
    var array = []

    index = index || 0

    for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i]
    }

    return array
}

}).apply(this, arguments);

},{}],204:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/vue-hot-reload-api/index.js", module);
(function(){
var Vue // late bind
var version
var map = window.__VUE_HOT_MAP__ = Object.create(null)
var installed = false
var isBrowserify = false
var initHookName = 'beforeCreate'

exports.install = function (vue, browserify) {
  if (installed) return
  installed = true

  Vue = vue.__esModule ? vue.default : vue
  version = Vue.version.split('.').map(Number)
  isBrowserify = browserify

  // compat with < 2.0.0-alpha.7
  if (Vue.config._lifecycleHooks.indexOf('init') > -1) {
    initHookName = 'init'
  }

  exports.compatible = version[0] >= 2
  if (!exports.compatible) {
    console.warn(
      '[HMR] You are using a version of vue-hot-reload-api that is ' +
      'only compatible with Vue.js core ^2.0.0.'
    )
    return
  }
}

/**
 * Create a record for a hot module, which keeps track of its constructor
 * and instances
 *
 * @param {String} id
 * @param {Object} options
 */

exports.createRecord = function (id, options) {
  var Ctor = null
  if (typeof options === 'function') {
    Ctor = options
    options = Ctor.options
  }
  makeOptionsHot(id, options)
  map[id] = {
    Ctor: Vue.extend(options),
    instances: []
  }
}

/**
 * Make a Component options object hot.
 *
 * @param {String} id
 * @param {Object} options
 */

function makeOptionsHot (id, options) {
  injectHook(options, initHookName, function () {
    map[id].instances.push(this)
  })
  injectHook(options, 'beforeDestroy', function () {
    var instances = map[id].instances
    instances.splice(instances.indexOf(this), 1)
  })
}

/**
 * Inject a hook to a hot reloadable component so that
 * we can keep track of it.
 *
 * @param {Object} options
 * @param {String} name
 * @param {Function} hook
 */

function injectHook (options, name, hook) {
  var existing = options[name]
  options[name] = existing
    ? Array.isArray(existing)
      ? existing.concat(hook)
      : [existing, hook]
    : [hook]
}

function tryWrap (fn) {
  return function (id, arg) {
    try { fn(id, arg) } catch (e) {
      console.error(e)
      console.warn('Something went wrong during Vue component hot-reload. Full reload required.')
    }
  }
}

exports.rerender = tryWrap(function (id, options) {
  var record = map[id]
  if (!options) {
    record.instances.slice().forEach(function (instance) {
      instance.$forceUpdate()
    })
    return
  }
  if (typeof options === 'function') {
    options = options.options
  }
  record.Ctor.options.render = options.render
  record.Ctor.options.staticRenderFns = options.staticRenderFns
  record.instances.slice().forEach(function (instance) {
    instance.$options.render = options.render
    instance.$options.staticRenderFns = options.staticRenderFns
    instance._staticTrees = [] // reset static trees
    instance.$forceUpdate()
  })
})

exports.reload = tryWrap(function (id, options) {
  var record = map[id]
  if (options) {
    if (typeof options === 'function') {
      options = options.options
    }
    makeOptionsHot(id, options)
    if (version[1] < 2) {
      // preserve pre 2.2 behavior for global mixin handling
      record.Ctor.extendOptions = options
    }
    var newCtor = record.Ctor.super.extend(options)
    record.Ctor.options = newCtor.options
    record.Ctor.cid = newCtor.cid
    record.Ctor.prototype = newCtor.prototype
    if (newCtor.release) {
      // temporary global mixin strategy used in < 2.0.0-alpha.6
      newCtor.release()
    }
  }
  record.instances.slice().forEach(function (instance) {
    if (instance.$vnode && instance.$vnode.context) {
      instance.$vnode.context.$forceUpdate()
    } else {
      console.warn('Root or manually mounted instance modified. Full reload required.')
    }
  })
})

}).apply(this, arguments);

},{}],205:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/vue/dist/vue.common.js", module);
(function(){
(function (process,global){
/*!
 * Vue.js v2.4.4
 * (c) 2014-2017 Evan You
 * Released under the MIT License.
 */
'use strict';

/*  */

// these helpers produces better vm code in JS engines due to their
// explicitness and function inlining
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

var _toString = Object.prototype.toString;

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(val);
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : typeof val === 'object'
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert a input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if a attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,is');

/**
 * Remove an item from an array
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether the object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind, faster than native
 */
function bind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }
  // record original fn length
  boundFn._length = fn.length;
  return boundFn
}

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/**
 * Return same value
 */
var identity = function (_) { return _; };

/**
 * Generate a static keys string from compiler modules.
 */
function genStaticKeys (modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || [])
  }, []).join(',')
}

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated'
];

/*  */

var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: process.env.NODE_ENV !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: process.env.NODE_ENV !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

var emptyObject = Object.freeze({});

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = /[^\w.$]/;
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

var warn = noop;
var tip = noop;
var formatComponentName = (null); // work around flow check

if (process.env.NODE_ENV !== 'production') {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>'
    }
    var name = typeof vm === 'string'
      ? vm
      : typeof vm === 'function' && vm.options
        ? vm.options.name
        : vm._isVue
          ? vm.$options.name || vm.$options._componentTag
          : vm.name;

    var file = vm._isVue && vm.$options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  var generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

function handleError (err, vm, info) {
  if (config.errorHandler) {
    config.errorHandler.call(null, err, vm, info);
  } else {
    if (process.env.NODE_ENV !== 'production') {
      warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
    }
    /* istanbul ignore else */
    if (inBrowser && typeof console !== 'undefined') {
      console.error(err);
    } else {
      throw err
    }
  }
}

/*  */
/* globals MutationObserver */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0;
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

/**
 * Defer a task to execute it asynchronously.
 */
var nextTick = (function () {
  var callbacks = [];
  var pending = false;
  var timerFunc;

  function nextTickHandler () {
    pending = false;
    var copies = callbacks.slice(0);
    callbacks.length = 0;
    for (var i = 0; i < copies.length; i++) {
      copies[i]();
    }
  }

  // the nextTick behavior leverages the microtask queue, which can be accessed
  // via either native Promise.then or MutationObserver.
  // MutationObserver has wider support, however it is seriously bugged in
  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
  // completely stops working after triggering a few times... so, if native
  // Promise is available, we will use it:
  /* istanbul ignore if */
  if (typeof Promise !== 'undefined' && isNative(Promise)) {
    var p = Promise.resolve();
    var logError = function (err) { console.error(err); };
    timerFunc = function () {
      p.then(nextTickHandler).catch(logError);
      // in problematic UIWebViews, Promise.then doesn't completely break, but
      // it can get stuck in a weird state where callbacks are pushed into the
      // microtask queue but the queue isn't being flushed, until the browser
      // needs to do some other work, e.g. handle a timer. Therefore we can
      // "force" the microtask queue to be flushed by adding an empty timer.
      if (isIOS) { setTimeout(noop); }
    };
  } else if (!isIE && typeof MutationObserver !== 'undefined' && (
    isNative(MutationObserver) ||
    // PhantomJS and iOS 7.x
    MutationObserver.toString() === '[object MutationObserverConstructor]'
  )) {
    // use MutationObserver where native Promise is not available,
    // e.g. PhantomJS, iOS7, Android 4.4
    var counter = 1;
    var observer = new MutationObserver(nextTickHandler);
    var textNode = document.createTextNode(String(counter));
    observer.observe(textNode, {
      characterData: true
    });
    timerFunc = function () {
      counter = (counter + 1) % 2;
      textNode.data = String(counter);
    };
  } else {
    // fallback to setTimeout
    /* istanbul ignore next */
    timerFunc = function () {
      setTimeout(nextTickHandler, 0);
    };
  }

  return function queueNextTick (cb, ctx) {
    var _resolve;
    callbacks.push(function () {
      if (cb) {
        try {
          cb.call(ctx);
        } catch (e) {
          handleError(e, ctx, 'nextTick');
        }
      } else if (_resolve) {
        _resolve(ctx);
      }
    });
    if (!pending) {
      pending = true;
      timerFunc();
    }
    if (!cb && typeof Promise !== 'undefined') {
      return new Promise(function (resolve, reject) {
        _resolve = resolve;
      })
    }
  }
})();

var _Set;
/* istanbul ignore if */
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = (function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */


var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// the current target watcher being evaluated.
// this is globally unique because there could be only one
// watcher being evaluated at any time.
Dep.target = null;
var targetStack = [];

function pushTarget (_target) {
  if (Dep.target) { targetStack.push(Dep.target); }
  Dep.target = _target;
}

function popTarget () {
  Dep.target = targetStack.pop();
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);[
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
]
.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * By default, when a reactive property is set, the new value is
 * also converted to become reactive. However when passing down props,
 * we don't want to force conversion because the value may be a nested value
 * under a frozen data structure. Converting it would defeat the optimization.
 */
var observerState = {
  shouldConvert: true
};

/**
 * Observer class that are attached to each observed
 * object. Once attached, the observer converts target
 * object's property keys into getter/setters that
 * collect dependencies and dispatches updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    var augment = hasProto
      ? protoAugment
      : copyAugment;
    augment(value, arrayMethods, arrayKeys);
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through each property and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i], obj[keys[i]]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment an target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src, keys) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment an target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value)) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    observerState.shouldConvert &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (process.env.NODE_ENV !== 'production' && customSetter) {
        customSetter();
      }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (hasOwn(target, key)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    process.env.NODE_ENV !== 'production' && warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    process.env.NODE_ENV !== 'production' && warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
if (process.env.NODE_ENV !== 'production') {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;
  var keys = Object.keys(from);
  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this) : parentVal
      )
    }
  } else if (parentVal || childVal) {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      process.env.NODE_ENV !== 'production' && warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn.call(this, parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  return childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (parentVal, childVal) {
  var res = Object.create(parentVal || null);
  return childVal
    ? extend(res, childVal)
    : res
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (parentVal, childVal) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key in childVal) {
    var parent = ret[key];
    var child = childVal[key];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (parentVal, childVal) {
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    var lower = key.toLowerCase();
    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {
      warn(
        'Do not use built-in or reserved HTML elements as component ' +
        'id: ' + key
      );
    }
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else if (process.env.NODE_ENV !== 'production') {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options) {
  var inject = options.inject;
  if (Array.isArray(inject)) {
    var normalized = options.inject = {};
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = inject[i];
    }
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def = dirs[key];
      if (typeof def === 'function') {
        dirs[key] = { bind: def, update: def };
      }
    }
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  if (process.env.NODE_ENV !== 'production') {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child);
  normalizeInject(child);
  normalizeDirectives(child);
  var extendsFrom = child.extends;
  if (extendsFrom) {
    parent = mergeOptions(parent, extendsFrom, vm);
  }
  if (child.mixins) {
    for (var i = 0, l = child.mixins.length; i < l; i++) {
      parent = mergeOptions(parent, child.mixins[i], vm);
    }
  }
  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */

function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // handle boolean props
  if (isType(Boolean, prop.type)) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {
      value = true;
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldConvert = observerState.shouldConvert;
    observerState.shouldConvert = true;
    observe(value);
    observerState.shouldConvert = prevShouldConvert;
  }
  if (process.env.NODE_ENV !== 'production') {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (process.env.NODE_ENV !== 'production' && isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }
  if (!valid) {
    warn(
      'Invalid prop: type check failed for prop "' + name + '".' +
      ' Expected ' + expectedTypes.map(capitalize).join(', ') +
      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isType (type, fn) {
  if (!Array.isArray(fn)) {
    return getType(fn) === getType(type)
  }
  for (var i = 0, len = fn.length; i < len; i++) {
    if (getType(fn[i]) === getType(type)) {
      return true
    }
  }
  /* istanbul ignore next */
  return false
}

/*  */

var mark;
var measure;

if (process.env.NODE_ENV !== 'production') {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      perf.clearMeasures(name);
    };
  }
}

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

if (process.env.NODE_ENV !== 'production') {
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      "referenced during render. Make sure to declare reactive data " +
      "properties in the data option.",
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' &&
    Proxy.toString().match(/native code/);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
      if (!has && !isAllowed) {
        warnNonPresent(target, key);
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        warnNonPresent(target, key);
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.functionalContext = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: {} };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode, deep) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    vnode.children,
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.isCloned = true;
  if (deep && vnode.children) {
    cloned.children = cloneVNodes(vnode.children);
  }
  return cloned
}

function cloneVNodes (vnodes, deep) {
  var len = vnodes.length;
  var res = new Array(len);
  for (var i = 0; i < len; i++) {
    res[i] = cloneVNode(vnodes[i], deep);
  }
  return res
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  var plain = !(passive || once$$1 || capture);
  return {
    name: name,
    plain: plain,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        cloned[i].apply(null, arguments$1);
      }
    } else {
      // return handler return value for single handlers
      return fns.apply(null, arguments)
    }
  }
  invoker.fns = fns;
  return invoker
}

// #6552
function prioritizePlainEvents (a, b) {
  return a.plain ? -1 : b.plain ? 1 : 0
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  vm
) {
  var name, cur, old, event;
  var toAdd = [];
  var hasModifier = false;
  for (name in on) {
    cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (!event.plain) { hasModifier = true; }
    if (isUndef(cur)) {
      process.env.NODE_ENV !== 'production' && warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur);
      }
      event.handler = cur;
      toAdd.push(event);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  if (toAdd.length) {
    if (hasModifier) { toAdd.sort(prioritizePlainEvents); }
    for (var i = 0; i < toAdd.length; i++) {
      var event$1 = toAdd[i];
      add(event$1.name, event$1.handler, event$1.once, event$1.capture, event$1.passive);
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (process.env.NODE_ENV !== 'production') {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    last = res[res.length - 1];
    //  nested
    if (Array.isArray(c)) {
      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i)));
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        (last).text += String(c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[res.length - 1] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function ensureCtor (comp, base) {
  if (comp.__esModule && comp.default) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor,
  context
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (isDef(factory.contexts)) {
    // already pending
    factory.contexts.push(context);
  } else {
    var contexts = factory.contexts = [context];
    var sync = true;

    var forceRender = function () {
      for (var i = 0, l = contexts.length; i < l; i++) {
        contexts[i].$forceUpdate();
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender();
      }
    });

    var reject = once(function (reason) {
      process.env.NODE_ENV !== 'production' && warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender();
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (typeof res.then === 'function') {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isDef(res.component) && typeof res.component.then === 'function') {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            setTimeout(function () {
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender();
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          setTimeout(function () {
            if (isUndef(factory.resolved)) {
              reject(
                process.env.NODE_ENV !== 'production'
                  ? ("timeout (" + (res.timeout) + "ms)")
                  : null
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn, once$$1) {
  if (once$$1) {
    target.$once(event, fn);
  } else {
    target.$on(event, fn);
  }
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var this$1 = this;

    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var this$1 = this;

    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$off(event[i], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (arguments.length === 1) {
      vm._events[event] = null;
      return vm
    }
    if (fn) {
      // specific handler
      var cb;
      var i$1 = cbs.length;
      while (i$1--) {
        cb = cbs[i$1];
        if (cb === fn || cb.fn === fn) {
          cbs.splice(i$1, 1);
          break
        }
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    if (process.env.NODE_ENV !== 'production') {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      for (var i = 0, l = cbs.length; i < l; i++) {
        try {
          cbs[i].apply(vm, args);
        } catch (e) {
          handleError(e, vm, ("event handler for \"" + event + "\""));
        }
      }
    }
    return vm
  };
}

/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  var slots = {};
  if (!children) {
    return slots
  }
  var defaultSlot = [];
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.functionalContext === context) &&
      data && data.slot != null
    ) {
      var name = child.data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children);
      } else {
        slot.push(child);
      }
    } else {
      defaultSlot.push(child);
    }
  }
  // ignore whitespace
  if (!defaultSlot.every(isWhitespace)) {
    slots.default = defaultSlot;
  }
  return slots
}

function isWhitespace (node) {
  return node.isComment || node.text === ' '
}

function resolveScopedSlots (
  fns, // see flow/vnode
  res
) {
  res = res || {};
  for (var i = 0; i < fns.length; i++) {
    if (Array.isArray(fns[i])) {
      resolveScopedSlots(fns[i], res);
    } else {
      res[fns[i].key] = fns[i].fn;
    }
  }
  return res
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    if (vm._isMounted) {
      callHook(vm, 'beforeUpdate');
    }
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var prevActiveInstance = activeInstance;
    activeInstance = vm;
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(
        vm.$el, vnode, hydrating, false /* removeOnly */,
        vm.$options._parentElm,
        vm.$options._refElm
      );
      // no need for the ref nodes after initial patch
      // this prevents keeping a detached DOM tree in memory (#5851)
      vm.$options._parentElm = vm.$options._refElm = null;
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    activeInstance = prevActiveInstance;
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    if (process.env.NODE_ENV !== 'production') {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure((name + " render"), startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure((name + " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  vm._watcher = new Watcher(vm, updateComponent, noop);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  if (process.env.NODE_ENV !== 'production') {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren
  var hasChildren = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    parentVnode.data.scopedSlots || // has new scoped slots
    vm.$scopedSlots !== emptyObject // has old scoped slots
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = (parentVnode.data && parentVnode.data.attrs) || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    observerState.shouldConvert = false;
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      props[key] = validateProp(key, vm.$options.props, propsData, vm);
    }
    observerState.shouldConvert = true;
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  if (listeners) {
    var oldListeners = vm.$options._parentListeners;
    vm.$options._parentListeners = listeners;
    updateComponentListeners(vm, listeners, oldListeners);
  }
  // resolve slots + force update if has children
  if (hasChildren) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (process.env.NODE_ENV !== 'production') {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  var handlers = vm.$options[hook];
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      try {
        handlers[i].call(vm);
      } catch (e) {
        handleError(e, vm, (hook + " hook"));
      }
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
}

/*  */


var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (process.env.NODE_ENV !== 'production') {
    circular = {};
  }
  waiting = flushing = false;
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (process.env.NODE_ENV !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */

var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options
) {
  this.vm = vm;
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = process.env.NODE_ENV !== 'production'
    ? expOrFn.toString()
    : '';
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = function () {};
      process.env.NODE_ENV !== 'production' && warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
    var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    var dep = this$1.deps[i];
    if (!this$1.newDepIds.has(dep.id)) {
      dep.removeSub(this$1);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
    var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    this$1.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
    var this$1 = this;

  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this$1.deps[i].removeSub(this$1);
    }
    this.active = false;
  }
};

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
var seenObjects = new _Set();
function traverse (val) {
  seenObjects.clear();
  _traverse(val, seenObjects);
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function checkOptionType (vm, name) {
  var option = vm.$options[name];
  if (!isPlainObject(option)) {
    warn(
      ("component option \"" + name + "\" should be an object."),
      vm
    );
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  observerState.shouldConvert = isRoot;
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      if (isReservedAttribute(key) || config.isReservedAttr(key)) {
        warn(
          ("\"" + key + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (vm.$parent && !isUpdatingChildComponent) {
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    } else {
      defineReactive$$1(props, key, value);
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  observerState.shouldConvert = true;
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
    process.env.NODE_ENV !== 'production' && warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    if (process.env.NODE_ENV !== 'production') {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
      process.env.NODE_ENV !== 'production' && warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  try {
    return data.call(vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  process.env.NODE_ENV !== 'production' && checkOptionType(vm, 'computed');
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (process.env.NODE_ENV !== 'production' && getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (process.env.NODE_ENV !== 'production') {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : userDef;
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : userDef.get
      : noop;
    sharedPropertyDefinition.set = userDef.set
      ? userDef.set
      : noop;
  }
  if (process.env.NODE_ENV !== 'production' &&
      sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function initMethods (vm, methods) {
  process.env.NODE_ENV !== 'production' && checkOptionType(vm, 'methods');
  var props = vm.$options.props;
  for (var key in methods) {
    if (process.env.NODE_ENV !== 'production') {
      if (methods[key] == null) {
        warn(
          "Method \"" + key + "\" has an undefined value in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  process.env.NODE_ENV !== 'production' && checkOptionType(vm, 'watch');
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  keyOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(keyOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  if (process.env.NODE_ENV !== 'production') {
    dataDef.set = function (newData) {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      cb.call(vm, watcher.value);
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    observerState.shouldConvert = false;
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      } else {
        defineReactive$$1(vm, key, result[key]);
      }
    });
    observerState.shouldConvert = true;
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
        ? Reflect.ownKeys(inject).filter(function (key) {
          /* istanbul ignore next */
          return Object.getOwnPropertyDescriptor(inject, key).enumerable
        })
        : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var provideKey = inject[key];
      var source = vm;
      while (source) {
        if (source._provided && provideKey in source._provided) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (process.env.NODE_ENV !== 'production' && !source) {
        warn(("Injection \"" + key + "\" not found"), vm);
      }
    }
    return result
  }
}

/*  */

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  context,
  children
) {
  var props = {};
  var propOptions = Ctor.options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var _context = Object.create(context);
  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };
  var vnode = Ctor.options.render.call(null, h, {
    data: data,
    props: props,
    children: children,
    parent: context,
    listeners: data.on || emptyObject,
    injections: resolveInject(Ctor.options.inject, context),
    slots: function () { return resolveSlots(children, context); }
  });
  if (vnode instanceof VNode) {
    vnode.functionalContext = context;
    vnode.functionalOptions = Ctor.options;
    if (data.slot) {
      (vnode.data || (vnode.data = {})).slot = data.slot;
    }
  }
  return vnode
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

// hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (
    vnode,
    hydrating,
    parentElm,
    refElm
  ) {
    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance,
        parentElm,
        refElm
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    } else if (vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    if (process.env.NODE_ENV !== 'production') {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // merge component management hooks onto the placeholder node
  mergeHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );
  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent, // activeInstance in lifecycle state
  parentElm,
  refElm
) {
  var vnodeComponentOptions = vnode.componentOptions;
  var options = {
    _isComponent: true,
    parent: parent,
    propsData: vnodeComponentOptions.propsData,
    _componentTag: vnodeComponentOptions.tag,
    _parentVnode: vnode,
    _parentListeners: vnodeComponentOptions.listeners,
    _renderChildren: vnodeComponentOptions.children,
    _parentElm: parentElm || null,
    _refElm: refElm || null
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnodeComponentOptions.Ctor(options)
}

function mergeHooks (data) {
  if (!data.hook) {
    data.hook = {};
  }
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var fromParent = data.hook[key];
    var ours = componentVNodeHooks[key];
    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;
  }
}

function mergeHook$1 (one, two) {
  return function (a, b, c, d) {
    one(a, b, c, d);
    two(a, b, c, d);
  }
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  if (isDef(on[event])) {
    on[event] = [data.model.callback].concat(on[event]);
  } else {
    on[event] = data.model.callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
    process.env.NODE_ENV !== 'production' && warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (process.env.NODE_ENV !== 'production' &&
    isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    warn(
      'Avoid using non-primitive value as key, ' +
      'use string/number value instead.',
      context
    );
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (isDef(vnode)) {
    if (ns) { applyNS(vnode, ns); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    return
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && isUndef(child.ns)) {
        applyNS(child, ns);
      }
    }
  }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    keys = Object.keys(val);
    ret = new Array(keys.length);
    for (i = 0, l = keys.length; i < l; i++) {
      key = keys[i];
      ret[i] = render(val[key], key, i);
    }
  }
  if (isDef(ret)) {
    (ret)._isVList = true;
  }
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      props = extend(extend({}, bindObject), props);
    }
    return scopedSlotFn(props) || fallback
  } else {
    var slotNodes = this.$slots[name];
    // warn duplicate slot usage
    if (slotNodes && process.env.NODE_ENV !== 'production') {
      slotNodes._rendered && warn(
        "Duplicate presence of slot \"" + name + "\" found in the same render tree " +
        "- this will likely cause render errors.",
        this
      );
      slotNodes._rendered = true;
    }
    return slotNodes || fallback
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

/**
 * Runtime helper for checking keyCodes from config.
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInAlias
) {
  var keyCodes = config.keyCodes[key] || builtInAlias;
  if (Array.isArray(keyCodes)) {
    return keyCodes.indexOf(eventKeyCode) === -1
  } else {
    return keyCodes !== eventKeyCode
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
      process.env.NODE_ENV !== 'production' && warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        if (!(key in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var tree = this._staticTrees[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree by doing a shallow clone.
  if (tree && !isInFor) {
    return Array.isArray(tree)
      ? cloneVNodes(tree)
      : cloneVNode(tree)
  }
  // otherwise, render a fresh tree.
  tree = this._staticTrees[index] =
    this.$options.staticRenderFns[index].call(this._renderProxy);
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      process.env.NODE_ENV !== 'production' && warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(ours, existing) : ours;
      }
    }
  }
  return data
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null;
  var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  if (process.env.NODE_ENV !== 'production') {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', vm.$options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
    defineReactive$$1(vm, '$listeners', vm.$options._parentListeners || emptyObject, null, true);
  }
}

function renderMixin (Vue) {
  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var staticRenderFns = ref.staticRenderFns;
    var _parentVnode = ref._parentVnode;

    if (vm._isMounted) {
      // if the parent didn't update, the slot nodes will be the ones from
      // last render. They need to be cloned to ensure "freshness" for this render.
      for (var key in vm.$slots) {
        var slot = vm.$slots[key];
        if (slot._rendered) {
          vm.$slots[key] = cloneVNodes(slot, true /* deep */);
        }
      }
    }

    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;

    if (staticRenderFns && !vm._staticTrees) {
      vm._staticTrees = [];
    }
    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render function");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        vnode = vm.$options.renderError
          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)
          : vm._vnode;
      } else {
        vnode = vm._vnode;
      }
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };

  // internal render helpers.
  // these are exposed on the instance prototype to reduce generated render
  // code size.
  Vue.prototype._o = markOnce;
  Vue.prototype._n = toNumber;
  Vue.prototype._s = toString;
  Vue.prototype._l = renderList;
  Vue.prototype._t = renderSlot;
  Vue.prototype._q = looseEqual;
  Vue.prototype._i = looseIndexOf;
  Vue.prototype._m = renderStatic;
  Vue.prototype._f = resolveFilter;
  Vue.prototype._k = checkKeyCodes;
  Vue.prototype._b = bindObjectProps;
  Vue.prototype._v = createTextVNode;
  Vue.prototype._e = createEmptyVNode;
  Vue.prototype._u = resolveScopedSlots;
  Vue.prototype._g = bindObjectListeners;
}

/*  */

var uid$1 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$1++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
      startTag = "vue-perf-init:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      initProxy(vm);
    } else {
      vm._renderProxy = vm;
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(((vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  opts.parent = options.parent;
  opts.propsData = options.propsData;
  opts._parentVnode = options._parentVnode;
  opts._parentListeners = options._parentListeners;
  opts._renderChildren = options._renderChildren;
  opts._componentTag = options._componentTag;
  opts._parentElm = options._parentElm;
  opts._refElm = options._refElm;
  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var extended = Ctor.extendOptions;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = dedupe(latest[key], extended[key], sealed[key]);
    }
  }
  return modified
}

function dedupe (latest, extended, sealed) {
  // compare latest and sealed to ensure lifecycle hooks won't be duplicated
  // between merges
  if (Array.isArray(latest)) {
    var res = [];
    sealed = Array.isArray(sealed) ? sealed : [sealed];
    extended = Array.isArray(extended) ? extended : [extended];
    for (var i = 0; i < latest.length; i++) {
      // push original options and not sealed options to exclude duplicated options
      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
        res.push(latest[i]);
      }
    }
    return res
  } else {
    return latest
  }
}

function Vue$3 (options) {
  if (process.env.NODE_ENV !== 'production' &&
    !(this instanceof Vue$3)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue$3);
stateMixin(Vue$3);
eventsMixin(Vue$3);
lifecycleMixin(Vue$3);
renderMixin(Vue$3);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (process.env.NODE_ENV !== 'production') {
      if (!/^[a-zA-Z][\w-]*$/.test(name)) {
        warn(
          'Invalid component name: "' + name + '". Component names ' +
          'can only contain alphanumeric characters and the hyphen, ' +
          'and must start with a letter.'
        );
      }
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (process.env.NODE_ENV !== 'production') {
          if (type === 'component' && config.isReservedTag(id)) {
            warn(
              'Do not use built-in or reserved HTML elements as component ' +
              'id: ' + id
            );
          }
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */

var patternTypes = [String, RegExp, Array];

function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (cache, current, filter) {
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        if (cachedNode !== current) {
          pruneCacheEntry(cachedNode);
        }
        cache[key] = null;
      }
    }
  }
}

function pruneCacheEntry (vnode) {
  if (vnode) {
    vnode.componentInstance.$destroy();
  }
}

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes
  },

  created: function created () {
    this.cache = Object.create(null);
  },

  destroyed: function destroyed () {
    var this$1 = this;

    for (var key in this$1.cache) {
      pruneCacheEntry(this$1.cache[key]);
    }
  },

  watch: {
    include: function include (val) {
      pruneCache(this.cache, this._vnode, function (name) { return matches(val, name); });
    },
    exclude: function exclude (val) {
      pruneCache(this.cache, this._vnode, function (name) { return !matches(val, name); });
    }
  },

  render: function render () {
    var vnode = getFirstComponentChild(this.$slots.default);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      if (name && (
        (this.include && !matches(this.include, name)) ||
        (this.exclude && matches(this.exclude, name))
      )) {
        return vnode
      }
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (this.cache[key]) {
        vnode.componentInstance = this.cache[key].componentInstance;
      } else {
        this.cache[key] = vnode;
      }
      vnode.data.keepAlive = true;
    }
    return vnode
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  if (process.env.NODE_ENV !== 'production') {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue$3);

Object.defineProperty(Vue$3.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue$3.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

Vue$3.version = '2.4.4';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,translate,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);

var isPreTag = function (tag) { return tag === 'pre'; };

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      process.env.NODE_ENV !== 'production' && warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setAttribute (node, key, val) {
  node.setAttribute(key, val);
}


var nodeOps = Object.freeze({
	createElement: createElement$1,
	createElementNS: createElementNS,
	createTextNode: createTextNode,
	createComment: createComment,
	insertBefore: insertBefore,
	removeChild: removeChild,
	appendChild: appendChild,
	parentNode: parentNode,
	nextSibling: nextSibling,
	tagName: tagName,
	setTextContent: setTextContent,
	setAttribute: setAttribute
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!key) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        a.asyncFactory === b.asyncFactory &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  var inPre = 0;
  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {
    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      if (process.env.NODE_ENV !== 'production') {
        if (data && data.pre) {
          inPre++;
        }
        if (
          !inPre &&
          !vnode.ns &&
          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&
          config.isUnknownElement(tag)
        ) {
          warn(
            'Unknown custom element: <' + tag + '> - did you ' +
            'register the component correctly? For recursive components, ' +
            'make sure to provide the "name" option.',
            vnode.context
          );
        }
      }
      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (process.env.NODE_ENV !== 'production' && data && data.pre) {
        inPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */, parentElm, refElm);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (ref$$1.parentNode === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    var ancestor = vnode;
    while (ancestor) {
      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
        nodeOps.setAttribute(vnode.elm, i, '');
      }
      ancestor = ancestor.parent;
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setAttribute(vnode.elm, i, '');
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, elmToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
        } else {
          elmToMove = oldCh[idxInOld];
          /* istanbul ignore if */
          if (process.env.NODE_ENV !== 'production' && !elmToMove) {
            warn(
              'It seems there are duplicate keys that is causing an update error. ' +
              'Make sure each v-for item has a unique key.'
            );
          }
          if (sameVnode(elmToMove, newStartVnode)) {
            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {
    if (oldVnode === vnode) {
      return
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var bailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue) {
    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.elm = elm;
      vnode.isAsyncPlaceholder = true;
      return true
    }
    if (process.env.NODE_ENV !== 'production') {
      if (!assertNodeMatch(elm, vnode)) {
        return false
      }
    }
    vnode.elm = elm;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (process.env.NODE_ENV !== 'production' &&
                typeof console !== 'undefined' &&
                !bailed
              ) {
                bailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (process.env.NODE_ENV !== 'production' &&
                typeof console !== 'undefined' &&
                !bailed
              ) {
                bailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        for (var key in data) {
          if (!isRenderedModule(key)) {
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode) {
    if (isDef(vnode.tag)) {
      return (
        vnode.tag.indexOf('vue-component') === 0 ||
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue, parentElm, refElm);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else if (process.env.NODE_ENV !== 'production') {
              warn(
                'The client-side rendered virtual DOM tree is not matching ' +
                'server-rendered content. This is likely caused by incorrect ' +
                'HTML markup, for example nesting block-level elements inside ' +
                '<p>, or missing <tbody>. Bailing hydration and performing ' +
                'full client-side render.'
              );
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }
        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm$1 = nodeOps.parentNode(oldElm);
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm$1,
          nodeOps.nextSibling(oldElm)
        );

        if (isDef(vnode.parent)) {
          // component root element replaced.
          // update parent placeholder node element, recursively
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            }
            ancestor = ancestor.parent;
          }
        }

        if (isDef(parentElm$1)) {
          removeVnodes(parentElm$1, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  /* istanbul ignore if */
  if (isIE9 && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value) {
  if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, value);
    }
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters (exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
    } else if (
      c === 0x7C && // pipe
      exp.charCodeAt(i + 1) !== 0x7C &&
      exp.charCodeAt(i - 1) !== 0x7C &&
      !curly && !square && !paren
    ) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22: inDouble = true; break         // "
        case 0x27: inSingle = true; break         // '
        case 0x60: inTemplateString = true; break // `
        case 0x28: paren++; break                 // (
        case 0x29: paren--; break                 // )
        case 0x5B: square++; break                // [
        case 0x5D: square--; break                // ]
        case 0x7B: curly++; break                 // {
        case 0x7D: curly--; break                 // }
      }
      if (c === 0x2f) { // /
        var j = i - 1;
        var p = (void 0);
        // find first non-whitespace prev char
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== ' ') { break }
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter () {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression
}

function wrapFilter (exp, filter) {
  var i = filter.indexOf('(');
  if (i < 0) {
    // _f: resolveFilter
    return ("_f(\"" + filter + "\")(" + exp + ")")
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return ("_f(\"" + name + "\")(" + exp + "," + args)
  }
}

/*  */

function baseWarn (msg) {
  console.error(("[Vue compiler]: " + msg));
}

function pluckModuleFunction (
  modules,
  key
) {
  return modules
    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
    : []
}

function addProp (el, name, value) {
  (el.props || (el.props = [])).push({ name: name, value: value });
}

function addAttr (el, name, value) {
  (el.attrs || (el.attrs = [])).push({ name: name, value: value });
}

function addDirective (
  el,
  name,
  rawName,
  value,
  arg,
  modifiers
) {
  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });
}

function addHandler (
  el,
  name,
  value,
  modifiers,
  important,
  warn
) {
  // warn prevent and passive modifier
  /* istanbul ignore if */
  if (
    process.env.NODE_ENV !== 'production' && warn &&
    modifiers && modifiers.prevent && modifiers.passive
  ) {
    warn(
      'passive and prevent can\'t be used together. ' +
      'Passive handler can\'t prevent default event.'
    );
  }
  // check capture modifier
  if (modifiers && modifiers.capture) {
    delete modifiers.capture;
    name = '!' + name; // mark the event as captured
  }
  if (modifiers && modifiers.once) {
    delete modifiers.once;
    name = '~' + name; // mark the event as once
  }
  /* istanbul ignore if */
  if (modifiers && modifiers.passive) {
    delete modifiers.passive;
    name = '&' + name; // mark the event as passive
  }
  var events;
  if (modifiers && modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }
  var newHandler = { value: value, modifiers: modifiers };
  var handlers = events[name];
  /* istanbul ignore if */
  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }
}

function getBindingAttr (
  el,
  name,
  getStatic
) {
  var dynamicValue =
    getAndRemoveAttr(el, ':' + name) ||
    getAndRemoveAttr(el, 'v-bind:' + name);
  if (dynamicValue != null) {
    return parseFilters(dynamicValue)
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);
    if (staticValue != null) {
      return JSON.stringify(staticValue)
    }
  }
}

function getAndRemoveAttr (el, name) {
  var val;
  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;
    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break
      }
    }
  }
  return val
}

/*  */

/**
 * Cross-platform code generation for component v-model
 */
function genComponentModel (
  el,
  value,
  modifiers
) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;

  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;
  if (trim) {
    valueExpression =
      "(typeof " + baseValueExpression + " === 'string'" +
        "? " + baseValueExpression + ".trim()" +
        ": " + baseValueExpression + ")";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }
  var assignment = genAssignmentCode(value, valueExpression);

  el.model = {
    value: ("(" + value + ")"),
    expression: ("\"" + value + "\""),
    callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
  };
}

/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */
function genAssignmentCode (
  value,
  assignment
) {
  var modelRs = parseModel(value);
  if (modelRs.idx === null) {
    return (value + "=" + assignment)
  } else {
    return ("$set(" + (modelRs.exp) + ", " + (modelRs.idx) + ", " + assignment + ")")
  }
}

/**
 * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)
 *
 * for loop possible cases:
 *
 * - test
 * - test[idx]
 * - test[test1[idx]]
 * - test["a"][idx]
 * - xxx.test[a[a].test1[idx]]
 * - test.xxx.a["asa"][test1[idx]]
 *
 */

var len;
var str;
var chr;
var index$1;
var expressionPos;
var expressionEndPos;

function parseModel (val) {
  str = val;
  len = str.length;
  index$1 = expressionPos = expressionEndPos = 0;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    return {
      exp: val,
      idx: null
    }
  }

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */
    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.substring(0, expressionPos),
    idx: val.substring(expressionPos + 1, expressionEndPos)
  }
}

function next () {
  return str.charCodeAt(++index$1)
}

function eof () {
  return index$1 >= len
}

function isStringStart (chr) {
  return chr === 0x22 || chr === 0x27
}

function parseBracket (chr) {
  var inBracket = 1;
  expressionPos = index$1;
  while (!eof()) {
    chr = next();
    if (isStringStart(chr)) {
      parseString(chr);
      continue
    }
    if (chr === 0x5B) { inBracket++; }
    if (chr === 0x5D) { inBracket--; }
    if (inBracket === 0) {
      expressionEndPos = index$1;
      break
    }
  }
}

function parseString (chr) {
  var stringQuote = chr;
  while (!eof()) {
    chr = next();
    if (chr === stringQuote) {
      break
    }
  }
}

/*  */

var warn$1;

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

function model (
  el,
  dir,
  _warn
) {
  warn$1 = _warn;
  var value = dir.value;
  var modifiers = dir.modifiers;
  var tag = el.tag;
  var type = el.attrsMap.type;

  if (process.env.NODE_ENV !== 'production') {
    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
    if (tag === 'input' && dynamicType) {
      warn$1(
        "<input :type=\"" + dynamicType + "\" v-model=\"" + value + "\">:\n" +
        "v-model does not support dynamic input types. Use v-if branches instead."
      );
    }
    // inputs with type="file" are read only and setting the input's
    // value will throw an error.
    if (tag === 'input' && type === 'file') {
      warn$1(
        "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +
        "File inputs are read only. Use a v-on:change listener instead."
      );
    }
  }

  if (el.component) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else if (tag === 'select') {
    genSelect(el, value, modifiers);
  } else if (tag === 'input' && type === 'checkbox') {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === 'input' && type === 'radio') {
    genRadioModel(el, value, modifiers);
  } else if (tag === 'input' || tag === 'textarea') {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else if (process.env.NODE_ENV !== 'production') {
    warn$1(
      "<" + (el.tag) + " v-model=\"" + value + "\">: " +
      "v-model is not supported on this element type. " +
      'If you are working with contenteditable, it\'s recommended to ' +
      'wrap a library dedicated for that purpose inside a custom component.'
    );
  }

  // ensure runtime directive metadata
  return true
}

function genCheckboxModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
  addProp(el, 'checked',
    "Array.isArray(" + value + ")" +
      "?_i(" + value + "," + valueBinding + ")>-1" + (
        trueValueBinding === 'true'
          ? (":(" + value + ")")
          : (":_q(" + value + "," + trueValueBinding + ")")
      )
  );
  addHandler(el, CHECKBOX_RADIO_TOKEN,
    "var $$a=" + value + "," +
        '$$el=$event.target,' +
        "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
    'if(Array.isArray($$a)){' +
      "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
          '$$i=_i($$a,$$v);' +
      "if($$el.checked){$$i<0&&(" + value + "=$$a.concat([$$v]))}" +
      "else{$$i>-1&&(" + value + "=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}" +
    "}else{" + (genAssignmentCode(value, '$$c')) + "}",
    null, true
  );
}

function genRadioModel (
    el,
    value,
    modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
  addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
  addHandler(el, CHECKBOX_RADIO_TOKEN, genAssignmentCode(value, valueBinding), null, true);
}

function genSelect (
    el,
    value,
    modifiers
) {
  var number = modifiers && modifiers.number;
  var selectedVal = "Array.prototype.filter" +
    ".call($event.target.options,function(o){return o.selected})" +
    ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
    "return " + (number ? '_n(val)' : 'val') + "})";

  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
  var code = "var $$selectedVal = " + selectedVal + ";";
  code = code + " " + (genAssignmentCode(value, assignment));
  addHandler(el, 'change', code, null, true);
}

function genDefaultModel (
  el,
  value,
  modifiers
) {
  var type = el.attrsMap.type;
  var ref = modifiers || {};
  var lazy = ref.lazy;
  var number = ref.number;
  var trim = ref.trim;
  var needCompositionGuard = !lazy && type !== 'range';
  var event = lazy
    ? 'change'
    : type === 'range'
      ? RANGE_TOKEN
      : 'input';

  var valueExpression = '$event.target.value';
  if (trim) {
    valueExpression = "$event.target.value.trim()";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  if (needCompositionGuard) {
    code = "if($event.target.composing)return;" + code;
  }

  addProp(el, 'value', ("(" + value + ")"));
  addHandler(el, event, code, null, true);
  if (trim || number) {
    addHandler(el, 'blur', '$forceUpdate()');
  }
}

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  var event;
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    // Chrome fires microtasks in between click/change, leads to #4521
    event = isChrome ? 'click' : 'change';
    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function add$1 (
  event,
  handler,
  once$$1,
  capture,
  passive
) {
  if (once$$1) {
    var oldHandler = handler;
    var _target = target$1; // save current target element in closure
    handler = function (ev) {
      var res = arguments.length === 1
        ? oldHandler(ev)
        : oldHandler.apply(null, arguments);
      if (res !== null) {
        remove$2(event, handler, capture, _target);
      }
    };
  }
  target$1.addEventListener(
    event,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  event,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(event, handler, capture);
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (isUndef(props[key])) {
      elm[key] = '';
    }
  }
  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
    }

    if (key === 'value') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, vnode, strCur)) {
        elm.value = strCur;
      }
    } else {
      elm[key] = cur;
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (
  elm,
  vnode,
  checkVal
) {
  return (!elm.composing && (
    vnode.tag === 'option' ||
    isDirty(elm, checkVal) ||
    isInputChanged(elm, checkVal)
  ))
}

function isDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isInputChanged (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers) && modifiers.number) {
    return toNumber(value) !== toNumber(newVal)
  }
  if (isDef(modifiers) && modifiers.trim) {
    return value.trim() !== newVal.trim()
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(name, val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser && window.requestAnimationFrame
  ? window.requestAnimationFrame.bind(window)
  : setTimeout;

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = styles[animationProp + 'Delay'].split(', ');
  var animationDurations = styles[animationProp + 'Duration'].split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

function toMs (s) {
  return Number(s.slice(0, -1)) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    transitionNode = transitionNode.parent;
    context = transitionNode.context;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      addTransitionClass(el, toClass);
      removeTransitionClass(el, startClass);
      if (!cb.cancelled && !userWantsControl) {
        if (isValidDuration(explicitEnterDuration)) {
          setTimeout(cb, explicitEnterDuration);
        } else {
          whenTransitionEnds(el, type, cb);
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        addTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled && !userWantsControl) {
          if (isValidDuration(explicitLeaveDuration)) {
            setTimeout(cb, explicitLeaveDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var model$1 = {
  inserted: function inserted (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        if (!isAndroid) {
          el.addEventListener('compositionstart', onCompositionStart);
          el.addEventListener('compositionend', onCompositionEnd);
        }
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    process.env.NODE_ENV !== 'production' && warn(
      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
      vm
    );
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (value === oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: model$1,
  show: show
};

/*  */

// Provides transition support for a single element/component.
// supports transition mode (out-in / in-out)

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$options._renderChildren;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if (process.env.NODE_ENV !== 'production' && children.length > 1) {
      warn(
        '<transition> can only be used on a single element. Use ' +
        '<transition-group> for lists.',
        this.$parent
      );
    }

    var mode = this.mode;

    // warn invalid mode
    if (process.env.NODE_ENV !== 'production' &&
      mode && mode !== 'in-out' && mode !== 'out-in'
    ) {
      warn(
        'invalid <transition> mode: ' + mode,
        this.$parent
      );
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild && (oldChild.data.transition = extend({}, data));
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

// Provides transition support for list items.
// supports move transitions using the FLIP technique.

// Because the vdom's children update algorithm is "unstable" - i.e.
// it doesn't guarantee the relative positioning of removed elements,
// we force transition-group to update its children into two passes:
// in the first pass, we remove all nodes that need to be removed,
// triggering their leaving transition; in the second pass, we insert/move
// into the final desired state. This way in the second pass removed
// nodes will remain where they should be.

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else if (process.env.NODE_ENV !== 'production') {
          var opts = c.componentOptions;
          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
          warn(("<transition-group> children must be keyed: <" + name + ">"));
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  beforeUpdate: function beforeUpdate () {
    // force removing pass
    this.__patch__(
      this._vnode,
      this.kept,
      false, // hydrating
      true // removeOnly (!important, avoids unnecessary moves)
    );
    this._vnode = this.kept;
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    var body = document.body;
    var f = body.offsetHeight; // eslint-disable-line

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue$3.config.mustUseProp = mustUseProp;
Vue$3.config.isReservedTag = isReservedTag;
Vue$3.config.isReservedAttr = isReservedAttr;
Vue$3.config.getTagNamespace = getTagNamespace;
Vue$3.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue$3.options.directives, platformDirectives);
extend(Vue$3.options.components, platformComponents);

// install platform patch function
Vue$3.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue$3.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
setTimeout(function () {
  if (config.devtools) {
    if (devtools) {
      devtools.emit('init', Vue$3);
    } else if (process.env.NODE_ENV !== 'production' && isChrome) {
      console[console.info ? 'info' : 'log'](
        'Download the Vue Devtools extension for a better development experience:\n' +
        'https://github.com/vuejs/vue-devtools'
      );
    }
  }
  if (process.env.NODE_ENV !== 'production' &&
    config.productionTip !== false &&
    inBrowser && typeof console !== 'undefined'
  ) {
    console[console.info ? 'info' : 'log'](
      "You are running Vue in development mode.\n" +
      "Make sure to turn on production mode when deploying for production.\n" +
      "See more tips at https://vuejs.org/guide/deployment.html"
    );
  }
}, 0);

/*  */

// check whether current browser encodes a char inside attribute values
function shouldDecode (content, encoded) {
  var div = document.createElement('div');
  div.innerHTML = "<div a=\"" + content + "\"/>";
  return div.innerHTML.indexOf(encoded) > 0
}

// #3663
// IE encodes newlines inside attribute values while other browsers don't
var shouldDecodeNewlines = inBrowser ? shouldDecode('\n', '&#10;') : false;

/*  */

var defaultTagRE = /\{\{((?:.|\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
});

function parseText (
  text,
  delimiters
) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
  if (!tagRE.test(text)) {
    return
  }
  var tokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index;
  while ((match = tagRE.exec(text))) {
    index = match.index;
    // push text token
    if (index > lastIndex) {
      tokens.push(JSON.stringify(text.slice(lastIndex, index)));
    }
    // tag token
    var exp = parseFilters(match[1].trim());
    tokens.push(("_s(" + exp + ")"));
    lastIndex = index + match[0].length;
  }
  if (lastIndex < text.length) {
    tokens.push(JSON.stringify(text.slice(lastIndex)));
  }
  return tokens.join('+')
}

/*  */

function transformNode (el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');
  if (process.env.NODE_ENV !== 'production' && staticClass) {
    var expression = parseText(staticClass, options.delimiters);
    if (expression) {
      warn(
        "class=\"" + staticClass + "\": " +
        'Interpolation inside attributes has been removed. ' +
        'Use v-bind or the colon shorthand instead. For example, ' +
        'instead of <div class="{{ val }}">, use <div :class="val">.'
      );
    }
  }
  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }
  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData (el) {
  var data = '';
  if (el.staticClass) {
    data += "staticClass:" + (el.staticClass) + ",";
  }
  if (el.classBinding) {
    data += "class:" + (el.classBinding) + ",";
  }
  return data
}

var klass$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData
};

/*  */

function transformNode$1 (el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  if (staticStyle) {
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production') {
      var expression = parseText(staticStyle, options.delimiters);
      if (expression) {
        warn(
          "style=\"" + staticStyle + "\": " +
          'Interpolation inside attributes has been removed. ' +
          'Use v-bind or the colon shorthand instead. For example, ' +
          'instead of <div style="{{ val }}">, use <div :style="val">.'
        );
      }
    }
    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }

  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}

function genData$1 (el) {
  var data = '';
  if (el.staticStyle) {
    data += "staticStyle:" + (el.staticStyle) + ",";
  }
  if (el.styleBinding) {
    data += "style:(" + (el.styleBinding) + "),";
  }
  return data
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$1
};

var modules$1 = [
  klass$1,
  style$1
];

/*  */

function text (el, dir) {
  if (dir.value) {
    addProp(el, 'textContent', ("_s(" + (dir.value) + ")"));
  }
}

/*  */

function html (el, dir) {
  if (dir.value) {
    addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"));
  }
}

var directives$1 = {
  model: model,
  text: text,
  html: html
};

/*  */

var isUnaryTag = makeMap(
  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
  'link,meta,param,source,track,wbr'
);

// Elements that you can, intentionally, leave open
// (and which close themselves)
var canBeLeftOpenTag = makeMap(
  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
);

// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
var isNonPhrasingTag = makeMap(
  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
  'title,tr,track'
);

/*  */

var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};

/*  */

var decoder;

var he = {
  decode: function decode (html) {
    decoder = decoder || document.createElement('div');
    decoder.innerHTML = html;
    return decoder.textContent
  }
};

/**
 * Not type-checking this file because it's mostly vendor code.
 */

/*!
 * HTML Parser By John Resig (ejohn.org)
 * Modified by Juriy "kangax" Zaytsev
 * Original code by Erik Arvidsson, Mozilla Public License
 * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
 */

// Regular Expressions for parsing tags and attributes
var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName
// but for Vue templates we can enforce a simple charset
var ncname = '[a-zA-Z_][\\w\\-\\.]*';
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp(("^<" + qnameCapture));
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp(("^<\\/" + qnameCapture + "[^>]*>"));
var doctype = /^<!DOCTYPE [^>]+>/i;
var comment = /^<!--/;
var conditionalComment = /^<!\[/;

var IS_REGEX_CAPTURING_BROKEN = false;
'x'.replace(/x(.)?/g, function (m, g) {
  IS_REGEX_CAPTURING_BROKEN = g === '';
});

// Special Elements (can contain anything)
var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};

var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n'
};
var encodedAttr = /&(?:lt|gt|quot|amp);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;

// #5992
var isIgnoreNewlineTag = makeMap('pre,textarea', true);
var shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\n'; };

function decodeAttr (value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) { return decodingMap[match]; })
}

function parseHTML (html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag$$1 = options.isUnaryTag || no;
  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;
  while (html) {
    last = html;
    // Make sure we're not in a plaintext content element like script/style
    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');
      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd));
            }
            advance(commentEnd + 3);
            continue
          }
        }

        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue
          }
        }

        // Doctype:
        var doctypeMatch = html.match(doctype);
        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue
        }

        // End tag:
        var endTagMatch = html.match(endTag);
        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue
        }

        // Start tag:
        var startTagMatch = parseStartTag();
        if (startTagMatch) {
          handleStartTag(startTagMatch);
          if (shouldIgnoreFirstNewline(lastTag, html)) {
            advance(1);
          }
          continue
        }
      }

      var text = (void 0), rest = (void 0), next = (void 0);
      if (textEnd >= 0) {
        rest = html.slice(textEnd);
        while (
          !endTag.test(rest) &&
          !startTagOpen.test(rest) &&
          !comment.test(rest) &&
          !conditionalComment.test(rest)
        ) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);
          if (next < 0) { break }
          textEnd += next;
          rest = html.slice(textEnd);
        }
        text = html.substring(0, textEnd);
        advance(textEnd);
      }

      if (textEnd < 0) {
        text = html;
        html = '';
      }

      if (options.chars && text) {
        options.chars(text);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;
        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text
            .replace(/<!--([\s\S]*?)-->/g, '$1')
            .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }
        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }
        if (options.chars) {
          options.chars(text);
        }
        return ''
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);
      if (process.env.NODE_ENV !== 'production' && !stack.length && options.warn) {
        options.warn(("Mal-formatted tag at end of template: \"" + html + "\""));
      }
      break
    }
  }

  // Clean up any remaining tags
  parseEndTag();

  function advance (n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag () {
    var start = html.match(startTagOpen);
    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;
      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {
        advance(attr[0].length);
        match.attrs.push(attr);
      }
      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match
      }
    }
  }

  function handleStartTag (match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }
      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag$$1(tagName) || !!unarySlash;

    var l = match.attrs.length;
    var attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778
      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('""') === -1) {
        if (args[3] === '') { delete args[3]; }
        if (args[4] === '') { delete args[4]; }
        if (args[5] === '') { delete args[5]; }
      }
      var value = args[3] || args[4] || args[5] || '';
      attrs[i] = {
        name: args[1],
        value: decodeAttr(
          value,
          options.shouldDecodeNewlines
        )
      };
    }

    if (!unary) {
      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag (tagName, start, end) {
    var pos, lowerCasedTagName;
    if (start == null) { start = index; }
    if (end == null) { end = index; }

    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();
    }

    // Find the closest opened tag of the same type
    if (tagName) {
      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if (process.env.NODE_ENV !== 'production' &&
          (i > pos || !tagName) &&
          options.warn
        ) {
          options.warn(
            ("tag <" + (stack[i].tag) + "> has no matching end tag.")
          );
        }
        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      }

      // Remove the open elements from the stack
      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }
      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}

/*  */

var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:/;
var forAliasRE = /(.*?)\s+(?:in|of)\s+(.*)/;
var forIteratorRE = /\((\{[^}]*\}|[^,]*),([^,]*)(?:,([^,]*))?\)/;

var argRE = /:(.*)$/;
var bindRE = /^:|^v-bind:/;
var modifierRE = /\.[^.]+/g;

var decodeHTMLCached = cached(he.decode);

// configurable state
var warn$2;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;

/**
 * Convert HTML string to AST.
 */
function parse (
  template,
  options
) {
  warn$2 = options.warn || baseWarn;

  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;

  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

  delimiters = options.delimiters;

  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce (msg) {
    if (!warned) {
      warned = true;
      warn$2(msg);
    }
  }

  function endPre (element) {
    // check pre state
    if (element.pre) {
      inVPre = false;
    }
    if (platformIsPreTag(element.tag)) {
      inPre = false;
    }
  }

  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldKeepComment: options.comments,
    start: function start (tag, attrs, unary) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

      // handle IE svg bug
      /* istanbul ignore if */
      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = {
        type: 1,
        tag: tag,
        attrsList: attrs,
        attrsMap: makeAttrsMap(attrs),
        parent: currentParent,
        children: []
      };
      if (ns) {
        element.ns = ns;
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
        process.env.NODE_ENV !== 'production' && warn$2(
          'Templates should only be responsible for mapping the state to the ' +
          'UI. Avoid placing tags with side-effects in your templates, such as ' +
          "<" + tag + ">" + ', as they will not be parsed.'
        );
      }

      // apply pre-transforms
      for (var i = 0; i < preTransforms.length; i++) {
        preTransforms[i](element, options);
      }

      if (!inVPre) {
        processPre(element);
        if (element.pre) {
          inVPre = true;
        }
      }
      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }
      if (inVPre) {
        processRawAttrs(element);
      } else {
        processFor(element);
        processIf(element);
        processOnce(element);
        processKey(element);

        // determine whether this is a plain element after
        // removing structural attributes
        element.plain = !element.key && !attrs.length;

        processRef(element);
        processSlot(element);
        processComponent(element);
        for (var i$1 = 0; i$1 < transforms.length; i$1++) {
          transforms[i$1](element, options);
        }
        processAttrs(element);
      }

      function checkRootConstraints (el) {
        if (process.env.NODE_ENV !== 'production') {
          if (el.tag === 'slot' || el.tag === 'template') {
            warnOnce(
              "Cannot use <" + (el.tag) + "> as component root element because it may " +
              'contain multiple nodes.'
            );
          }
          if (el.attrsMap.hasOwnProperty('v-for')) {
            warnOnce(
              'Cannot use v-for on stateful component root element because ' +
              'it renders multiple elements.'
            );
          }
        }
      }

      // tree management
      if (!root) {
        root = element;
        checkRootConstraints(root);
      } else if (!stack.length) {
        // allow root elements with v-if, v-else-if and v-else
        if (root.if && (element.elseif || element.else)) {
          checkRootConstraints(element);
          addIfCondition(root, {
            exp: element.elseif,
            block: element
          });
        } else if (process.env.NODE_ENV !== 'production') {
          warnOnce(
            "Component template should contain exactly one root element. " +
            "If you are using v-if on multiple elements, " +
            "use v-else-if to chain them instead."
          );
        }
      }
      if (currentParent && !element.forbidden) {
        if (element.elseif || element.else) {
          processIfConditions(element, currentParent);
        } else if (element.slotScope) { // scoped slot
          currentParent.plain = false;
          var name = element.slotTarget || '"default"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        } else {
          currentParent.children.push(element);
          element.parent = currentParent;
        }
      }
      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        endPre(element);
      }
      // apply post-transforms
      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {
        postTransforms[i$2](element, options);
      }
    },

    end: function end () {
      // remove trailing whitespace
      var element = stack[stack.length - 1];
      var lastNode = element.children[element.children.length - 1];
      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {
        element.children.pop();
      }
      // pop stack
      stack.length -= 1;
      currentParent = stack[stack.length - 1];
      endPre(element);
    },

    chars: function chars (text) {
      if (!currentParent) {
        if (process.env.NODE_ENV !== 'production') {
          if (text === template) {
            warnOnce(
              'Component template requires a root element, rather than just text.'
            );
          } else if ((text = text.trim())) {
            warnOnce(
              ("text \"" + text + "\" outside root element will be ignored.")
            );
          }
        }
        return
      }
      // IE textarea placeholder bug
      /* istanbul ignore if */
      if (isIE &&
        currentParent.tag === 'textarea' &&
        currentParent.attrsMap.placeholder === text
      ) {
        return
      }
      var children = currentParent.children;
      text = inPre || text.trim()
        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)
        // only preserve whitespace if its not right after a starting tag
        : preserveWhitespace && children.length ? ' ' : '';
      if (text) {
        var expression;
        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {
          children.push({
            type: 2,
            expression: expression,
            text: text
          });
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          children.push({
            type: 3,
            text: text
          });
        }
      }
    },
    comment: function comment (text) {
      currentParent.children.push({
        type: 3,
        text: text,
        isComment: true
      });
    }
  });
  return root
}

function processPre (el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs (el) {
  var l = el.attrsList.length;
  if (l) {
    var attrs = el.attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      attrs[i] = {
        name: el.attrsList[i].name,
        value: JSON.stringify(el.attrsList[i].value)
      };
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processKey (el) {
  var exp = getBindingAttr(el, 'key');
  if (exp) {
    if (process.env.NODE_ENV !== 'production' && el.tag === 'template') {
      warn$2("<template> cannot be keyed. Place the key on real elements instead.");
    }
    el.key = exp;
  }
}

function processRef (el) {
  var ref = getBindingAttr(el, 'ref');
  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor (el) {
  var exp;
  if ((exp = getAndRemoveAttr(el, 'v-for'))) {
    var inMatch = exp.match(forAliasRE);
    if (!inMatch) {
      process.env.NODE_ENV !== 'production' && warn$2(
        ("Invalid v-for expression: " + exp)
      );
      return
    }
    el.for = inMatch[2].trim();
    var alias = inMatch[1].trim();
    var iteratorMatch = alias.match(forIteratorRE);
    if (iteratorMatch) {
      el.alias = iteratorMatch[1].trim();
      el.iterator1 = iteratorMatch[2].trim();
      if (iteratorMatch[3]) {
        el.iterator2 = iteratorMatch[3].trim();
      }
    } else {
      el.alias = alias;
    }
  }
}

function processIf (el) {
  var exp = getAndRemoveAttr(el, 'v-if');
  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }
    var elseif = getAndRemoveAttr(el, 'v-else-if');
    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions (el, parent) {
  var prev = findPrevElement(parent.children);
  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else if (process.env.NODE_ENV !== 'production') {
    warn$2(
      "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +
      "used on element <" + (el.tag) + "> without corresponding v-if."
    );
  }
}

function findPrevElement (children) {
  var i = children.length;
  while (i--) {
    if (children[i].type === 1) {
      return children[i]
    } else {
      if (process.env.NODE_ENV !== 'production' && children[i].text !== ' ') {
        warn$2(
          "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +
          "will be ignored."
        );
      }
      children.pop();
    }
  }
}

function addIfCondition (el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }
  el.ifConditions.push(condition);
}

function processOnce (el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');
  if (once$$1 != null) {
    el.once = true;
  }
}

function processSlot (el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');
    if (process.env.NODE_ENV !== 'production' && el.key) {
      warn$2(
        "`key` does not work on <slot> because slots are abstract outlets " +
        "and can possibly expand into multiple elements. " +
        "Use the key on a wrapping element instead."
      );
    }
  } else {
    var slotTarget = getBindingAttr(el, 'slot');
    if (slotTarget) {
      el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
      // preserve slot as an attribute for native shadow DOM compat
      addAttr(el, 'slot', slotTarget);
    }
    if (el.tag === 'template') {
      el.slotScope = getAndRemoveAttr(el, 'scope');
    }
  }
}

function processComponent (el) {
  var binding;
  if ((binding = getBindingAttr(el, 'is'))) {
    el.component = binding;
  }
  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs (el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, isProp;
  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;
    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true;
      // modifiers
      modifiers = parseModifiers(name);
      if (modifiers) {
        name = name.replace(modifierRE, '');
      }
      if (bindRE.test(name)) { // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isProp = false;
        if (modifiers) {
          if (modifiers.prop) {
            isProp = true;
            name = camelize(name);
            if (name === 'innerHtml') { name = 'innerHTML'; }
          }
          if (modifiers.camel) {
            name = camelize(name);
          }
          if (modifiers.sync) {
            addHandler(
              el,
              ("update:" + (camelize(name))),
              genAssignmentCode(value, "$event")
            );
          }
        }
        if (isProp || (
          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)
        )) {
          addProp(el, name, value);
        } else {
          addAttr(el, name, value);
        }
      } else if (onRE.test(name)) { // v-on
        name = name.replace(onRE, '');
        addHandler(el, name, value, modifiers, false, warn$2);
      } else { // normal directives
        name = name.replace(dirRE, '');
        // parse arg
        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        if (arg) {
          name = name.slice(0, -(arg.length + 1));
        }
        addDirective(el, name, rawName, value, arg, modifiers);
        if (process.env.NODE_ENV !== 'production' && name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      if (process.env.NODE_ENV !== 'production') {
        var expression = parseText(value, delimiters);
        if (expression) {
          warn$2(
            name + "=\"" + value + "\": " +
            'Interpolation inside attributes has been removed. ' +
            'Use v-bind or the colon shorthand instead. For example, ' +
            'instead of <div id="{{ val }}">, use <div :id="val">.'
          );
        }
      }
      addAttr(el, name, JSON.stringify(value));
    }
  }
}

function checkInFor (el) {
  var parent = el;
  while (parent) {
    if (parent.for !== undefined) {
      return true
    }
    parent = parent.parent;
  }
  return false
}

function parseModifiers (name) {
  var match = name.match(modifierRE);
  if (match) {
    var ret = {};
    match.forEach(function (m) { ret[m.slice(1)] = true; });
    return ret
  }
}

function makeAttrsMap (attrs) {
  var map = {};
  for (var i = 0, l = attrs.length; i < l; i++) {
    if (
      process.env.NODE_ENV !== 'production' &&
      map[attrs[i].name] && !isIE && !isEdge
    ) {
      warn$2('duplicate attribute: ' + attrs[i].name);
    }
    map[attrs[i].name] = attrs[i].value;
  }
  return map
}

// for script (e.g. type="x/template") or style, do not decode content
function isTextTag (el) {
  return el.tag === 'script' || el.tag === 'style'
}

function isForbiddenTag (el) {
  return (
    el.tag === 'style' ||
    (el.tag === 'script' && (
      !el.attrsMap.type ||
      el.attrsMap.type === 'text/javascript'
    ))
  )
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;

/* istanbul ignore next */
function guardIESVGBug (attrs) {
  var res = [];
  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];
    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }
  return res
}

function checkForAliasModel (el, value) {
  var _el = el;
  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$2(
        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
        "You are binding v-model directly to a v-for iteration alias. " +
        "This will not be able to modify the v-for source array because " +
        "writing to the alias is like modifying a function local variable. " +
        "Consider using an array of objects and use v-model on an object property instead."
      );
    }
    _el = _el.parent;
  }
}

/*  */

var isStaticKey;
var isPlatformReservedTag;

var genStaticKeysCached = cached(genStaticKeys$1);

/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */
function optimize (root, options) {
  if (!root) { return }
  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no;
  // first pass: mark all non-static nodes.
  markStatic$1(root);
  // second pass: mark static roots.
  markStaticRoots(root, false);
}

function genStaticKeys$1 (keys) {
  return makeMap(
    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +
    (keys ? ',' + keys : '')
  )
}

function markStatic$1 (node) {
  node.static = isStatic(node);
  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (
      !isPlatformReservedTag(node.tag) &&
      node.tag !== 'slot' &&
      node.attrsMap['inline-template'] == null
    ) {
      return
    }
    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);
      if (!child.static) {
        node.static = false;
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);
        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots (node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    }
    // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.
    if (node.static && node.children.length && !(
      node.children.length === 1 &&
      node.children[0].type === 3
    )) {
      node.staticRoot = true;
      return
    } else {
      node.staticRoot = false;
    }
    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic (node) {
  if (node.type === 2) { // expression
    return false
  }
  if (node.type === 3) { // text
    return true
  }
  return !!(node.pre || (
    !node.hasBindings && // no dynamic bindings
    !node.if && !node.for && // not v-if or v-for or v-else
    !isBuiltInTag(node.tag) && // not a built-in
    isPlatformReservedTag(node.tag) && // not a component
    !isDirectChildOfTemplateFor(node) &&
    Object.keys(node).every(isStaticKey)
  ))
}

function isDirectChildOfTemplateFor (node) {
  while (node.parent) {
    node = node.parent;
    if (node.tag !== 'template') {
      return false
    }
    if (node.for) {
      return true
    }
  }
  return false
}

/*  */

var fnExpRE = /^\s*([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/;
var simplePathRE = /^\s*[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?']|\[".*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*\s*$/;

// keyCode aliases
var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
};

// #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once
var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers (
  events,
  isNative,
  warn
) {
  var res = isNative ? 'nativeOn:{' : 'on:{';
  for (var name in events) {
    var handler = events[name];
    // #5330: warn click.right, since right clicks do not actually fire click events.
    if (process.env.NODE_ENV !== 'production' &&
      name === 'click' &&
      handler && handler.modifiers && handler.modifiers.right
    ) {
      warn(
        "Use \"contextmenu\" instead of \"click.right\" since right clicks " +
        "do not actually fire \"click\" events."
      );
    }
    res += "\"" + name + "\":" + (genHandler(name, handler)) + ",";
  }
  return res.slice(0, -1) + '}'
}

function genHandler (
  name,
  handler
) {
  if (!handler) {
    return 'function(){}'
  }

  if (Array.isArray(handler)) {
    return ("[" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + "]")
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);

  if (!handler.modifiers) {
    return isMethodPath || isFunctionExpression
      ? handler.value
      : ("function($event){" + (handler.value) + "}") // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];
    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key];
        // left/right
        if (keyCodes[key]) {
          keys.push(key);
        }
      } else {
        keys.push(key);
      }
    }
    if (keys.length) {
      code += genKeyFilter(keys);
    }
    // Make sure modifiers like prevent and stop get executed after key filtering
    if (genModifierCode) {
      code += genModifierCode;
    }
    var handlerCode = isMethodPath
      ? handler.value + '($event)'
      : isFunctionExpression
        ? ("(" + (handler.value) + ")($event)")
        : handler.value;
    return ("function($event){" + code + handlerCode + "}")
  }
}

function genKeyFilter (keys) {
  return ("if(!('button' in $event)&&" + (keys.map(genFilterCode).join('&&')) + ")return null;")
}

function genFilterCode (key) {
  var keyVal = parseInt(key, 10);
  if (keyVal) {
    return ("$event.keyCode!==" + keyVal)
  }
  var alias = keyCodes[key];
  return ("_k($event.keyCode," + (JSON.stringify(key)) + (alias ? ',' + JSON.stringify(alias) : '') + ")")
}

/*  */

function on (el, dir) {
  if (process.env.NODE_ENV !== 'production' && dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }
  el.wrapListeners = function (code) { return ("_g(" + code + "," + (dir.value) + ")"); };
}

/*  */

function bind$1 (el, dir) {
  el.wrapData = function (code) {
    return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")")
  };
}

/*  */

var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};

/*  */

var CodegenState = function CodegenState (options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;
  this.maybeComponent = function (el) { return !isReservedTag(el.tag); };
  this.onceId = 0;
  this.staticRenderFns = [];
};



function generate (
  ast,
  options
) {
  var state = new CodegenState(options);
  var code = ast ? genElement(ast, state) : '_c("div")';
  return {
    render: ("with(this){return " + code + "}"),
    staticRenderFns: state.staticRenderFns
  }
}

function genElement (el, state) {
  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state)
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state)
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state)
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.tag === 'template' && !el.slotTarget) {
    return genChildren(el, state) || 'void 0'
  } else if (el.tag === 'slot') {
    return genSlot(el, state)
  } else {
    // component or element
    var code;
    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data = el.plain ? undefined : genData$2(el, state);

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
    }
    // module transforms
    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }
    return code
  }
}

// hoist static sub-trees out
function genStatic (el, state) {
  el.staticProcessed = true;
  state.staticRenderFns.push(("with(this){return " + (genElement(el, state)) + "}"));
  return ("_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
}

// v-once
function genOnce (el, state) {
  el.onceProcessed = true;
  if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;
    while (parent) {
      if (parent.for) {
        key = parent.key;
        break
      }
      parent = parent.parent;
    }
    if (!key) {
      process.env.NODE_ENV !== 'production' && state.warn(
        "v-once can only be used inside v-for that is keyed. "
      );
      return genElement(el, state)
    }
    return ("_o(" + (genElement(el, state)) + "," + (state.onceId++) + "," + key + ")")
  } else {
    return genStatic(el, state)
  }
}

function genIf (
  el,
  state,
  altGen,
  altEmpty
) {
  el.ifProcessed = true; // avoid recursion
  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)
}

function genIfConditions (
  conditions,
  state,
  altGen,
  altEmpty
) {
  if (!conditions.length) {
    return altEmpty || '_e()'
  }

  var condition = conditions.shift();
  if (condition.exp) {
    return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions, state, altGen, altEmpty)))
  } else {
    return ("" + (genTernaryExp(condition.block)))
  }

  // v-if with v-once should generate code like (a)?_m(0):_m(1)
  function genTernaryExp (el) {
    return altGen
      ? altGen(el, state)
      : el.once
        ? genOnce(el, state)
        : genElement(el, state)
  }
}

function genFor (
  el,
  state,
  altGen,
  altHelper
) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';

  if (process.env.NODE_ENV !== 'production' &&
    state.maybeComponent(el) &&
    el.tag !== 'slot' &&
    el.tag !== 'template' &&
    !el.key
  ) {
    state.warn(
      "<" + (el.tag) + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " +
      "v-for should have explicit keys. " +
      "See https://vuejs.org/guide/list.html#key for more info.",
      true /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion
  return (altHelper || '_l') + "((" + exp + ")," +
    "function(" + alias + iterator1 + iterator2 + "){" +
      "return " + ((altGen || genElement)(el, state)) +
    '})'
}

function genData$2 (el, state) {
  var data = '{';

  // directives first.
  // directives may mutate the el's other properties before they are generated.
  var dirs = genDirectives(el, state);
  if (dirs) { data += dirs + ','; }

  // key
  if (el.key) {
    data += "key:" + (el.key) + ",";
  }
  // ref
  if (el.ref) {
    data += "ref:" + (el.ref) + ",";
  }
  if (el.refInFor) {
    data += "refInFor:true,";
  }
  // pre
  if (el.pre) {
    data += "pre:true,";
  }
  // record original tag name for components using "is" attribute
  if (el.component) {
    data += "tag:\"" + (el.tag) + "\",";
  }
  // module data generation functions
  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  }
  // attributes
  if (el.attrs) {
    data += "attrs:{" + (genProps(el.attrs)) + "},";
  }
  // DOM props
  if (el.props) {
    data += "domProps:{" + (genProps(el.props)) + "},";
  }
  // event handlers
  if (el.events) {
    data += (genHandlers(el.events, false, state.warn)) + ",";
  }
  if (el.nativeEvents) {
    data += (genHandlers(el.nativeEvents, true, state.warn)) + ",";
  }
  // slot target
  if (el.slotTarget) {
    data += "slot:" + (el.slotTarget) + ",";
  }
  // scoped slots
  if (el.scopedSlots) {
    data += (genScopedSlots(el.scopedSlots, state)) + ",";
  }
  // component v-model
  if (el.model) {
    data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
  }
  // inline-template
  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);
    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }
  data = data.replace(/,$/, '') + '}';
  // v-bind data wrap
  if (el.wrapData) {
    data = el.wrapData(data);
  }
  // v-on data wrap
  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }
  return data
}

function genDirectives (el, state) {
  var dirs = el.directives;
  if (!dirs) { return }
  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;
  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];
    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }
    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:\"" + (dir.arg) + "\"") : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
    }
  }
  if (hasRuntime) {
    return res.slice(0, -1) + ']'
  }
}

function genInlineTemplate (el, state) {
  var ast = el.children[0];
  if (process.env.NODE_ENV !== 'production' && (
    el.children.length > 1 || ast.type !== 1
  )) {
    state.warn('Inline-template components must have exactly one child element.');
  }
  if (ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
  }
}

function genScopedSlots (
  slots,
  state
) {
  return ("scopedSlots:_u([" + (Object.keys(slots).map(function (key) {
      return genScopedSlot(key, slots[key], state)
    }).join(',')) + "])")
}

function genScopedSlot (
  key,
  el,
  state
) {
  if (el.for && !el.forProcessed) {
    return genForScopedSlot(key, el, state)
  }
  return "{key:" + key + ",fn:function(" + (String(el.attrsMap.scope)) + "){" +
    "return " + (el.tag === 'template'
      ? genChildren(el, state) || 'void 0'
      : genElement(el, state)) + "}}"
}

function genForScopedSlot (
  key,
  el,
  state
) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';
  el.forProcessed = true; // avoid recursion
  return "_l((" + exp + ")," +
    "function(" + alias + iterator1 + iterator2 + "){" +
      "return " + (genScopedSlot(key, el, state)) +
    '})'
}

function genChildren (
  el,
  state,
  checkSkip,
  altGenElement,
  altGenNode
) {
  var children = el.children;
  if (children.length) {
    var el$1 = children[0];
    // optimize single v-for
    if (children.length === 1 &&
      el$1.for &&
      el$1.tag !== 'template' &&
      el$1.tag !== 'slot'
    ) {
      return (altGenElement || genElement)(el$1, state)
    }
    var normalizationType = checkSkip
      ? getNormalizationType(children, state.maybeComponent)
      : 0;
    var gen = altGenNode || genNode;
    return ("[" + (children.map(function (c) { return gen(c, state); }).join(',')) + "]" + (normalizationType ? ("," + normalizationType) : ''))
  }
}

// determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed
function getNormalizationType (
  children,
  maybeComponent
) {
  var res = 0;
  for (var i = 0; i < children.length; i++) {
    var el = children[i];
    if (el.type !== 1) {
      continue
    }
    if (needsNormalization(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
      res = 2;
      break
    }
    if (maybeComponent(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
      res = 1;
    }
  }
  return res
}

function needsNormalization (el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
}

function genNode (node, state) {
  if (node.type === 1) {
    return genElement(node, state)
  } if (node.type === 3 && node.isComment) {
    return genComment(node)
  } else {
    return genText(node)
  }
}

function genText (text) {
  return ("_v(" + (text.type === 2
    ? text.expression // no need for () because already wrapped in _s()
    : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
}

function genComment (comment) {
  return ("_e(" + (JSON.stringify(comment.text)) + ")")
}

function genSlot (el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? ("," + children) : '');
  var attrs = el.attrs && ("{" + (el.attrs.map(function (a) { return ((camelize(a.name)) + ":" + (a.value)); }).join(',')) + "}");
  var bind$$1 = el.attrsMap['v-bind'];
  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }
  if (attrs) {
    res += "," + attrs;
  }
  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }
  return res + ')'
}

// componentName is el.component, take it as argument to shun flow's pessimistic refinement
function genComponent (
  componentName,
  el,
  state
) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return ("_c(" + componentName + "," + (genData$2(el, state)) + (children ? ("," + children) : '') + ")")
}

function genProps (props) {
  var res = '';
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    res += "\"" + (prop.name) + "\":" + (transformSpecialNewlines(prop.value)) + ",";
  }
  return res.slice(0, -1)
}

// #3895, #4268
function transformSpecialNewlines (text) {
  return text
    .replace(/\u2028/g, '\\u2028')
    .replace(/\u2029/g, '\\u2029')
}

/*  */

// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed
var prohibitedKeywordRE = new RegExp('\\b' + (
  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
  'super,throw,while,yield,delete,export,import,return,switch,default,' +
  'extends,finally,continue,debugger,function,arguments'
).split(',').join('\\b|\\b') + '\\b');

// these unary operators should not be used as property/method names
var unaryOperatorsRE = new RegExp('\\b' + (
  'delete,typeof,void'
).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

// check valid identifier for v-for
var identRE = /[A-Za-z_$][\w$]*/;

// strip strings in expressions
var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

// detect problematic expressions in a template
function detectErrors (ast) {
  var errors = [];
  if (ast) {
    checkNode(ast, errors);
  }
  return errors
}

function checkNode (node, errors) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];
        if (value) {
          if (name === 'v-for') {
            checkFor(node, ("v-for=\"" + value + "\""), errors);
          } else if (onRE.test(name)) {
            checkEvent(value, (name + "=\"" + value + "\""), errors);
          } else {
            checkExpression(value, (name + "=\"" + value + "\""), errors);
          }
        }
      }
    }
    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], errors);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, errors);
  }
}

function checkEvent (exp, text, errors) {
  var stipped = exp.replace(stripStringRE, '');
  var keywordMatch = stipped.match(unaryOperatorsRE);
  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
    errors.push(
      "avoid using JavaScript unary operator as property name: " +
      "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim())
    );
  }
  checkExpression(exp, text, errors);
}

function checkFor (node, text, errors) {
  checkExpression(node.for || '', text, errors);
  checkIdentifier(node.alias, 'v-for alias', text, errors);
  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);
  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);
}

function checkIdentifier (ident, type, text, errors) {
  if (typeof ident === 'string' && !identRE.test(ident)) {
    errors.push(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())));
  }
}

function checkExpression (exp, text, errors) {
  try {
    new Function(("return " + exp));
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
    if (keywordMatch) {
      errors.push(
        "avoid using JavaScript keyword as property name: " +
        "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim())
      );
    } else {
      errors.push(("invalid expression: " + (text.trim())));
    }
  }
}

/*  */

function createFunction (code, errors) {
  try {
    return new Function(code)
  } catch (err) {
    errors.push({ err: err, code: code });
    return noop
  }
}

function createCompileToFunctionFn (compile) {
  var cache = Object.create(null);

  return function compileToFunctions (
    template,
    options,
    vm
  ) {
    options = options || {};

    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production') {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn(
            'It seems you are using the standalone build of Vue.js in an ' +
            'environment with Content Security Policy that prohibits unsafe-eval. ' +
            'The template compiler cannot work in this environment. Consider ' +
            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
            'templates into render functions.'
          );
        }
      }
    }

    // check cache
    var key = options.delimiters
      ? String(options.delimiters) + template
      : template;
    if (cache[key]) {
      return cache[key]
    }

    // compile
    var compiled = compile(template, options);

    // check compilation errors/tips
    if (process.env.NODE_ENV !== 'production') {
      if (compiled.errors && compiled.errors.length) {
        warn(
          "Error compiling template:\n\n" + template + "\n\n" +
          compiled.errors.map(function (e) { return ("- " + e); }).join('\n') + '\n',
          vm
        );
      }
      if (compiled.tips && compiled.tips.length) {
        compiled.tips.forEach(function (msg) { return tip(msg, vm); });
      }
    }

    // turn code into functions
    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors)
    });

    // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production') {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn(
          "Failed to generate render function:\n\n" +
          fnGenErrors.map(function (ref) {
            var err = ref.err;
            var code = ref.code;

            return ((err.toString()) + " in\n\n" + code + "\n");
        }).join('\n'),
          vm
        );
      }
    }

    return (cache[key] = res)
  }
}

/*  */

function createCompilerCreator (baseCompile) {
  return function createCompiler (baseOptions) {
    function compile (
      template,
      options
    ) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];
      finalOptions.warn = function (msg, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        // merge custom modules
        if (options.modules) {
          finalOptions.modules =
            (baseOptions.modules || []).concat(options.modules);
        }
        // merge custom directives
        if (options.directives) {
          finalOptions.directives = extend(
            Object.create(baseOptions.directives),
            options.directives
          );
        }
        // copy other options
        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      var compiled = baseCompile(template, finalOptions);
      if (process.env.NODE_ENV !== 'production') {
        errors.push.apply(errors, detectErrors(compiled.ast));
      }
      compiled.errors = errors;
      compiled.tips = tips;
      return compiled
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    }
  }
}

/*  */

// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.
var createCompiler = createCompilerCreator(function baseCompile (
  template,
  options
) {
  var ast = parse(template.trim(), options);
  optimize(ast, options);
  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  }
});

/*  */

var ref$1 = createCompiler(baseOptions);
var compileToFunctions = ref$1.compileToFunctions;

/*  */

var idToTemplate = cached(function (id) {
  var el = query(id);
  return el && el.innerHTML
});

var mount = Vue$3.prototype.$mount;
Vue$3.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && query(el);

  /* istanbul ignore if */
  if (el === document.body || el === document.documentElement) {
    process.env.NODE_ENV !== 'production' && warn(
      "Do not mount Vue to <html> or <body> - mount to normal elements instead."
    );
    return this
  }

  var options = this.$options;
  // resolve template/el and convert to render function
  if (!options.render) {
    var template = options.template;
    if (template) {
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template);
          /* istanbul ignore if */
          if (process.env.NODE_ENV !== 'production' && !template) {
            warn(
              ("Template element not found or is empty: " + (options.template)),
              this
            );
          }
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        if (process.env.NODE_ENV !== 'production') {
          warn('invalid template option:' + template, this);
        }
        return this
      }
    } else if (el) {
      template = getOuterHTML(el);
    }
    if (template) {
      /* istanbul ignore if */
      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
        mark('compile');
      }

      var ref = compileToFunctions(template, {
        shouldDecodeNewlines: shouldDecodeNewlines,
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;

      /* istanbul ignore if */
      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
        mark('compile end');
        measure(((this._name) + " compile"), 'compile', 'compile end');
      }
    }
  }
  return mount.call(this, el, hydrating)
};

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */
function getOuterHTML (el) {
  if (el.outerHTML) {
    return el.outerHTML
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML
  }
}

Vue$3.compile = compileToFunctions;

module.exports = Vue$3;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

}).apply(this, arguments);

},{"_process":186}],206:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/vueify/lib/insert-css.js", module);
(function(){
var inserted = exports.cache = {}

function noop () {}

exports.insert = function (css) {
  if (inserted[css]) return noop
  inserted[css] = true

  var elem = document.createElement('style')
  elem.setAttribute('type', 'text/css')

  if ('textContent' in elem) {
    elem.textContent = css
  } else {
    elem.styleSheet.cssText = css
  }

  document.getElementsByTagName('head')[0].appendChild(elem)
  return function () {
    document.getElementsByTagName('head')[0].removeChild(elem)
    inserted[css] = false
  }
}

}).apply(this, arguments);

},{}],207:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/wtf-8/wtf-8.js", module);
(function(){
(function (global){
/*! https://mths.be/wtf8 v1.0.0 by @mathias */
;(function(root) {

	// Detect free variables `exports`
	var freeExports = typeof exports == 'object' && exports;

	// Detect free variable `module`
	var freeModule = typeof module == 'object' && module &&
		module.exports == freeExports && module;

	// Detect free variable `global`, from Node.js or Browserified code,
	// and use it as `root`
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/*--------------------------------------------------------------------------*/

	var stringFromCharCode = String.fromCharCode;

	// Taken from https://mths.be/punycode
	function ucs2decode(string) {
		var output = [];
		var counter = 0;
		var length = string.length;
		var value;
		var extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	// Taken from https://mths.be/punycode
	function ucs2encode(array) {
		var length = array.length;
		var index = -1;
		var value;
		var output = '';
		while (++index < length) {
			value = array[index];
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
		}
		return output;
	}

	/*--------------------------------------------------------------------------*/

	function createByte(codePoint, shift) {
		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
	}

	function encodeCodePoint(codePoint) {
		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
			return stringFromCharCode(codePoint);
		}
		var symbol = '';
		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
		}
		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
			symbol += createByte(codePoint, 6);
		}
		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
			symbol += createByte(codePoint, 12);
			symbol += createByte(codePoint, 6);
		}
		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
		return symbol;
	}

	function wtf8encode(string) {
		var codePoints = ucs2decode(string);
		var length = codePoints.length;
		var index = -1;
		var codePoint;
		var byteString = '';
		while (++index < length) {
			codePoint = codePoints[index];
			byteString += encodeCodePoint(codePoint);
		}
		return byteString;
	}

	/*--------------------------------------------------------------------------*/

	function readContinuationByte() {
		if (byteIndex >= byteCount) {
			throw Error('Invalid byte index');
		}

		var continuationByte = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		if ((continuationByte & 0xC0) == 0x80) {
			return continuationByte & 0x3F;
		}

		// If we end up here, it’s not a continuation byte.
		throw Error('Invalid continuation byte');
	}

	function decodeSymbol() {
		var byte1;
		var byte2;
		var byte3;
		var byte4;
		var codePoint;

		if (byteIndex > byteCount) {
			throw Error('Invalid byte index');
		}

		if (byteIndex == byteCount) {
			return false;
		}

		// Read the first byte.
		byte1 = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		// 1-byte sequence (no continuation bytes)
		if ((byte1 & 0x80) == 0) {
			return byte1;
		}

		// 2-byte sequence
		if ((byte1 & 0xE0) == 0xC0) {
			var byte2 = readContinuationByte();
			codePoint = ((byte1 & 0x1F) << 6) | byte2;
			if (codePoint >= 0x80) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 3-byte sequence (may include unpaired surrogates)
		if ((byte1 & 0xF0) == 0xE0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
			if (codePoint >= 0x0800) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 4-byte sequence
		if ((byte1 & 0xF8) == 0xF0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			byte4 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
				(byte3 << 0x06) | byte4;
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
				return codePoint;
			}
		}

		throw Error('Invalid WTF-8 detected');
	}

	var byteArray;
	var byteCount;
	var byteIndex;
	function wtf8decode(byteString) {
		byteArray = ucs2decode(byteString);
		byteCount = byteArray.length;
		byteIndex = 0;
		var codePoints = [];
		var tmp;
		while ((tmp = decodeSymbol()) !== false) {
			codePoints.push(tmp);
		}
		return ucs2encode(codePoints);
	}

	/*--------------------------------------------------------------------------*/

	var wtf8 = {
		'version': '1.0.0',
		'encode': wtf8encode,
		'decode': wtf8decode
	};

	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define(function() {
			return wtf8;
		});
	}	else if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = wtf8;
		} else { // in Narwhal or RingoJS v0.7.0-
			var object = {};
			var hasOwnProperty = object.hasOwnProperty;
			for (var key in wtf8) {
				hasOwnProperty.call(wtf8, key) && (freeExports[key] = wtf8[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.wtf8 = wtf8;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

}).apply(this, arguments);

},{}],208:[function(require,module,exports){
_hmr["websocket:null"].initModule("node_modules/yeast/index.js", module);
(function(){
'use strict';

var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
  , length = 64
  , map = {}
  , seed = 0
  , i = 0
  , prev;

/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */
function encode(num) {
  var encoded = '';

  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);

  return encoded;
}

/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */
function decode(str) {
  var decoded = 0;

  for (i = 0; i < str.length; i++) {
    decoded = decoded * length + map[str.charAt(i)];
  }

  return decoded;
}

/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */
function yeast() {
  var now = encode(+new Date());

  if (now !== prev) return seed = 0, prev = now;
  return now +'.'+ encode(seed++);
}

//
// Map each character to its index.
//
for (; i < length; i++) map[alphabet[i]] = i;

//
// Expose the `yeast`, `encode` and `decode` functions.
//
yeast.encode = encode;
yeast.decode = decode;
module.exports = yeast;

}).apply(this, arguments);

},{}],209:[function(require,module,exports){
_hmr["websocket:null"].initModule("src/Flower.vue", module);
(function(){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("#flower[data-v-80355924] {\n\tmargin:100px;\n}")
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _flubberMin = require('../lib/flubber.min.js');

var _flubberMin2 = _interopRequireDefault(_flubberMin);

var _d3V4Min = require('../lib/d3.v4.min.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: 'Flower',
  props: ['word'],
  data: function data() {
    var data = [{ x: 0, y: 0 }];
    for (var i = 0; i < 15; i++) {
      var x = Math.random() * 50;
      x = parseInt(x - 25);
      if (x < 0) {
        x = 0;
      }
      data.push({ x: data[i].x + x, y: data[i].y + 50 });
    }
    var path = (0, _d3V4Min.line)().x(function (d) {
      return d.x;
    }).y(function (d) {
      return d.y;
    }).curve(_d3V4Min.curveBasisClosed)(data);
    return {
      msg: 'flower',
      path: path
    };
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"flower"}},[_vm._v("\n    "+_vm._s(_vm.word)+"\n\t\t"),_c('svg',[_c('path',{attrs:{"d":_vm.path,"fill":"green","stroke":"steelblue"}})])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-80355924"
if (module.hot) {(function () {  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  module.hot.dispose(__vueify_style_dispose__)
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-80355924", __vue__options__)
  } else {
    hotAPI.reload("data-v-80355924", __vue__options__)
  }
})()}

}).apply(this, arguments);

},{"../lib/d3.v4.min.js":2,"../lib/flubber.min.js":3,"vue":205,"vue-hot-reload-api":204,"vueify/lib/insert-css":206}],210:[function(require,module,exports){
_hmr["websocket:null"].initModule("src/Main.vue", module);
(function(){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("#main[data-v-14087ae8] {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}")
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});


var Flower = require('./Flower.vue');
var FamilyTree = require('./family-tree/index.vue');
exports.default = {
  name: 'main',
  components: {
    Flower: Flower,
    FamilyTree: FamilyTree
  },
  data: function data() {
    return {
      msg: 'hello!'
    };
  },

  methods: {
    sayNo: function sayNo() {
      this.msg = 'no!';
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"main"}},[_vm._v("\n  "+_vm._s(_vm.msg)+"\n   "),_c('button',{on:{"click":_vm.sayNo}},[_vm._v("No")]),_vm._v(" "),_c('FamilyTree')],1)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-14087ae8"
if (module.hot) {(function () {  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  module.hot.dispose(__vueify_style_dispose__)
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-14087ae8", __vue__options__)
  } else {
    hotAPI.reload("data-v-14087ae8", __vue__options__)
  }
})()}

}).apply(this, arguments);

},{"./Flower.vue":209,"./family-tree/index.vue":211,"vue":205,"vue-hot-reload-api":204,"vueify/lib/insert-css":206}],211:[function(require,module,exports){
_hmr["websocket:null"].initModule("src/family-tree/index.vue", module);
(function(){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("#cols[data-v-506297f2]{\n\tdisplay:flex;\n\ttext-align:center;\n\tflex-direction: row;\n\twidth:80%;\n\theight:600px;\n}\n#col[data-v-506297f2]{\n\tflex:1;\n\tdisplay:flex;\n\tflex-direction: column;\n}\n.person[data-v-506297f2]{\n\tdisplay:flex;\n\tposition:relative;\n\talign-items: center;\n\tjustify-content: center;\n\tflex-grow:1;\n\tcolor:steelblue;\n\tborder:1px solid lightgrey;\n}\n.female[data-v-506297f2]{\n\tcolor:#f9a4ad;\n}")
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _tree = require('./tree.js');

var _tree2 = _interopRequireDefault(_tree);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: 'tree',
  data: function data() {
    return {
      data: _tree2.default,
      widths: [15, 45, 60, 75, 100]
    };
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"cols"}},_vm._l((_vm.data),function(arr){return _c('div',{staticStyle:{"flex-grow":"1"},attrs:{"id":"col"}},_vm._l((arr),function(name,i){return _c('div',{staticClass:"person",class:{ female: i%2===0 }},[_vm._v("\n\t      "+_vm._s(name)+"\n\t\t\t\t"),_c('svg',{staticStyle:{"position":"absolute"},attrs:{"width":"100%","height":"100%"}},[_c('line',{attrs:{"x1":"50%","y1":"50%","x2":"100%","y2":"75%","stroke-width":"2","stroke":"lightgrey"}}),_vm._v(" "),_c('line',{attrs:{"x1":"50%","y1":"50%","x2":"100%","y2":"25%","stroke-width":"2","stroke":"lightgrey"}})])])}))}))}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-506297f2"
if (module.hot) {(function () {  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  module.hot.dispose(__vueify_style_dispose__)
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-506297f2", __vue__options__)
  } else {
    hotAPI.reload("data-v-506297f2", __vue__options__)
  }
})()}

}).apply(this, arguments);

},{"./tree.js":212,"vue":205,"vue-hot-reload-api":204,"vueify/lib/insert-css":206}],212:[function(require,module,exports){
_hmr["websocket:null"].initModule("src/family-tree/tree.js", module);
(function(){
module.exports = [
//me
['Me'],
//parents
['Mom', 'Dad'],
//grand-parents
['Grandma', 'Grandpa', 'Grandma', 'Papa'],
//8-people
['Mabel', 'John', 'Orphea', 'James', 'Ethel', 'Oran', 'Clara', 'Joseph'],
//16-people
['Isabella', 'Edward', 'Agnes', 'Donald', 'Elizabeth', 'Adam', 'Christina', 'James', 'Rosa', 'Abel', 'Keziah', 'George', 'Lucy', 'Omer', 'Mary Ann', 'Richard']];

}).apply(this, arguments);

},{}],213:[function(require,module,exports){
_hmr["websocket:null"].initModule("src/main.js", module);
(function(){
var Vue = require('vue');
var App = require('./Main.vue');

new Vue({
  el: '#app',
  render: h => h(App)
});

}).apply(this, arguments);

},{"./Main.vue":210,"vue":205}],1:[function(require,module,exports){
(function(global, _main, moduleDefs, cachedModules, _entries) {
  'use strict';

  var moduleMeta = {"node_modules/process/browser.js":{"index":186,"hash":"oZn5/djw+Uvkv+VAfElp","parents":["node_modules/vue/dist/vue.common.js","node_modules/socket.io-client/node_modules/debug/browser.js","node_modules/engine.io-client/node_modules/debug/browser.js"]},"node_modules/browserify-hmr/lib/has.js":{"index":11,"hash":"Hky4QYVrU1+kFHIEuxPy","parents":["node_modules/browserify-hmr/lib/str-set.js","node_modules/browserify-hmr/inc/index.js"]},"node_modules/vue/dist/vue.common.js":{"index":205,"hash":"1yS+bYq6IrNdrF+bMHlr","parents":["src/Flower.vue","src/family-tree/index.vue","src/Main.vue","src/main.js"]},"node_modules/parseuri/index.js":{"index":185,"hash":"EzACpgP8IC8rgl7aVyRs","parents":["node_modules/socket.io-client/lib/url.js","node_modules/engine.io-client/lib/socket.js"]},"node_modules/socket.io-client/lib/url.js":{"index":191,"hash":"IEq8dxJXbpkN4jP1mAHe","parents":["node_modules/socket.io-client/lib/index.js"]},"node_modules/socket.io-client/node_modules/debug/browser.js":{"index":193,"hash":"uHHd1fWWAohxR/hB5h/W","parents":["node_modules/socket.io-client/lib/url.js","node_modules/socket.io-client/lib/socket.js","node_modules/socket.io-client/lib/manager.js","node_modules/socket.io-client/lib/index.js"]},"node_modules/socket.io-client/lib/on.js":{"index":189,"hash":"tjRZyGGz5Q0MA2qS81HN","parents":["node_modules/socket.io-client/lib/socket.js","node_modules/socket.io-client/lib/manager.js"]},"node_modules/socket.io-client/node_modules/component-emitter/index.js":{"index":192,"hash":"oN00wp8CctwYNQv6ryzF","parents":["node_modules/socket.io-client/lib/socket.js","node_modules/socket.io-client/lib/manager.js"]},"node_modules/component-bind/index.js":{"index":13,"hash":"4yIcVw+afwUsnTQyI0a3","parents":["node_modules/socket.io-client/lib/socket.js","node_modules/socket.io-client/lib/manager.js"]},"node_modules/to-array/index.js":{"index":203,"hash":"2EoggafxX+GLXkXiaGjm","parents":["node_modules/socket.io-client/lib/socket.js"]},"node_modules/socket.io-parser/is-buffer.js":{"index":198,"hash":"F42/EWSzWcL1IvKh+yw4","parents":["node_modules/socket.io-parser/binary.js","node_modules/socket.io-parser/index.js"]},"node_modules/component-emitter/index.js":{"index":14,"hash":"0uL1LSa/mOj+Llu+HTZ7","parents":["node_modules/socket.io-parser/index.js"]},"node_modules/json3/lib/json3.js":{"index":36,"hash":"J13/x7tZCvXXFkmWlJs5","parents":["node_modules/socket.io-parser/index.js"]},"node_modules/indexof/index.js":{"index":35,"hash":"8zMGV0j0ID5bUIeT7r+M","parents":["node_modules/engine.io-client/lib/socket.js","node_modules/socket.io-client/lib/manager.js"]},"node_modules/backo2/index.js":{"index":6,"hash":"L5ry3mfVEw1wgmx9Sa+q","parents":["node_modules/socket.io-client/lib/manager.js"]},"node_modules/browserify-hmr/lib/str-set.js":{"index":12,"hash":"lcrDmQK4uaqOqN+FV4/9","parents":["node_modules/browserify-hmr/inc/index.js"]},"node_modules/lodash/_baseZipObject.js":{"index":86,"hash":"YXMcZ83l88xZmDNehDaW","parents":["node_modules/lodash/zipObject.js"]},"node_modules/lodash/isArray.js":{"index":164,"hash":"aaUaNDXWFSVZ5STriBpj","parents":["node_modules/lodash/some.js","node_modules/lodash/map.js","node_modules/lodash/forEach.js","node_modules/lodash/_isKey.js","node_modules/lodash/_hasPath.js","node_modules/lodash/_arrayLikeKeys.js","node_modules/lodash/_baseToString.js","node_modules/lodash/_baseGetAllKeys.js","node_modules/lodash/_baseIsEqualDeep.js","node_modules/lodash/_castPath.js","node_modules/lodash/_baseIteratee.js","node_modules/lodash/filter.js"]},"node_modules/lodash/_arrayFilter.js":{"index":51,"hash":"Ev1suXdgsby5ZCXCkRms","parents":["node_modules/lodash/_getSymbols.js","node_modules/lodash/filter.js"]},"node_modules/lodash/_arraySome.js":{"index":55,"hash":"6MxplN9nt/AmANH1hnTa","parents":["node_modules/lodash/some.js","node_modules/lodash/_equalArrays.js"]},"node_modules/lodash/_arrayEach.js":{"index":50,"hash":"b9UG7X0uCjshbsKWnzke","parents":["node_modules/lodash/forEach.js"]},"node_modules/lodash/_isPrototype.js":{"index":119,"hash":"z7lefPE53MX7955LE/f6","parents":["node_modules/lodash/_baseKeys.js","node_modules/lodash/assign.js"]},"node_modules/lodash/_arrayMap.js":{"index":53,"hash":"WRdHK1dyumbtZQGeNdoR","parents":["node_modules/lodash/map.js","node_modules/lodash/_baseToString.js"]},"node_modules/vue-hot-reload-api/index.js":{"index":204,"hash":"H4cFqGKmddpHnDnqizrn","parents":["src/Flower.vue","src/family-tree/index.vue","src/Main.vue"]},"node_modules/vueify/lib/insert-css.js":{"index":206,"hash":"oiKAfua2i7DdNH5GB3Qm","parents":["src/Flower.vue","src/family-tree/index.vue","src/Main.vue"]},"node_modules/has-binary/node_modules/isarray/index.js":{"index":33,"hash":"dKtews1S4sHvaZhZ+ceq","parents":["node_modules/has-binary/index.js"]},"node_modules/has-binary/index.js":{"index":32,"hash":"ghM6s7JwI5VY2IMMbY1o","parents":["node_modules/socket.io-client/lib/socket.js","node_modules/engine.io-parser/lib/browser.js"]},"node_modules/socket.io-client/lib/socket.js":{"index":190,"hash":"wNz1TmcWcSdV/fISvn75","parents":["node_modules/socket.io-client/lib/manager.js","node_modules/socket.io-client/lib/index.js"]},"node_modules/socket.io-parser/index.js":{"index":197,"hash":"zQr8NKW/h7J7hn1sTsRa","parents":["node_modules/socket.io-client/lib/socket.js","node_modules/socket.io-client/lib/manager.js","node_modules/socket.io-client/lib/index.js"]},"node_modules/socket.io-client/node_modules/ms/index.js":{"index":195,"hash":"+i3MPFzut0mh8LK6NCY0","parents":["node_modules/socket.io-client/node_modules/debug/debug.js"]},"node_modules/socket.io-client/node_modules/debug/debug.js":{"index":194,"hash":"5FZHGx7z7kdbTIz7MyR0","parents":["node_modules/socket.io-client/node_modules/debug/browser.js"]},"node_modules/socket.io-parser/node_modules/isarray/index.js":{"index":201,"hash":"dKtews1S4sHvaZhZ+ceq","parents":["node_modules/socket.io-parser/binary.js"]},"node_modules/socket.io-parser/binary.js":{"index":196,"hash":"8I5NRA1rlGtsqsBVMpry","parents":["node_modules/socket.io-parser/index.js"]},"node_modules/lodash/eq.js":{"index":156,"hash":"Be3fJIGKRC2SLwj96dmp","parents":["node_modules/lodash/_assignValue.js","node_modules/lodash/_isIterateeCall.js","node_modules/lodash/_equalByTag.js","node_modules/lodash/_assocIndexOf.js"]},"node_modules/lodash/_assignValue.js":{"index":56,"hash":"hmWN1NJKVbGe2ThBbBed","parents":["node_modules/lodash/zipObject.js","node_modules/lodash/_copyObject.js","node_modules/lodash/assign.js"]},"node_modules/lodash/_baseAssignValue.js":{"index":58,"hash":"UUmMep65Dt8mJru5Df0R","parents":["node_modules/lodash/_assignValue.js","node_modules/lodash/_copyObject.js","node_modules/lodash/mapValues.js"]},"node_modules/lodash/zipObject.js":{"index":182,"hash":"iztwVZmqQ7Y1i6QmGzx9","parents":["node_modules/browserify-hmr/inc/index.js"]},"node_modules/lodash/identity.js":{"index":162,"hash":"s1ZnXuz2CFxX2MXJyb7F","parents":["node_modules/lodash/_castFunction.js","node_modules/lodash/_baseSetToString.js","node_modules/lodash/_baseRest.js","node_modules/lodash/_baseIteratee.js"]},"node_modules/lodash/_baseFilter.js":{"index":60,"hash":"zIF8T84UwJp2X27nHnkJ","parents":["node_modules/lodash/filter.js"]},"node_modules/lodash/_baseEach.js":{"index":59,"hash":"1eAUgjpN0REUkkfZ9ZIc","parents":["node_modules/lodash/_baseFilter.js","node_modules/lodash/_baseSome.js","node_modules/lodash/_baseMap.js","node_modules/lodash/forEach.js"]},"node_modules/lodash/_baseSome.js":{"index":82,"hash":"/fx+wXc48GKu9ngo/G7R","parents":["node_modules/lodash/some.js"]},"node_modules/lodash/_isIndex.js":{"index":114,"hash":"SCdbG9iCDM1nxzb81i7D","parents":["node_modules/lodash/_isIterateeCall.js","node_modules/lodash/_hasPath.js","node_modules/lodash/_arrayLikeKeys.js"]},"node_modules/lodash/isObject.js":{"index":169,"hash":"H0M3JlacAn8wi5b/SH6J","parents":["node_modules/lodash/_isIterateeCall.js","node_modules/lodash/_isStrictComparable.js","node_modules/lodash/isFunction.js","node_modules/lodash/_baseIsNative.js"]},"node_modules/lodash/_isIterateeCall.js":{"index":115,"hash":"Q6Y/4ZLjPN2hD0x360UE","parents":["node_modules/lodash/some.js","node_modules/lodash/_createAssigner.js"]},"node_modules/lodash/isArrayLike.js":{"index":165,"hash":"/OCFIiBOK84sMLW6Tiiz","parents":["node_modules/lodash/_isIterateeCall.js","node_modules/lodash/_baseMap.js","node_modules/lodash/_createBaseEach.js","node_modules/lodash/keys.js","node_modules/lodash/assign.js"]},"node_modules/lodash/some.js":{"index":178,"hash":"o5R2DTe3L0fWtByoF6NK","parents":["node_modules/browserify-hmr/inc/index.js"]},"node_modules/lodash/_baseIteratee.js":{"index":73,"hash":"lFdaZihzm4HNQp2V6Bpv","parents":["node_modules/lodash/some.js","node_modules/lodash/map.js","node_modules/lodash/mapValues.js","node_modules/lodash/filter.js"]},"node_modules/lodash/_castFunction.js":{"index":88,"hash":"17Fkqb/JTOTfTCbTGPvs","parents":["node_modules/lodash/forEach.js","node_modules/lodash/forOwn.js"]},"node_modules/lodash/_copyObject.js":{"index":90,"hash":"VAzIjaU/1tssj67rWjf/","parents":["node_modules/lodash/assign.js"]},"node_modules/lodash/isLength.js":{"index":168,"hash":"bwSRxcpcTX/CbMowl+qa","parents":["node_modules/lodash/_hasPath.js","node_modules/lodash/isArrayLike.js","node_modules/lodash/_baseIsTypedArray.js"]},"node_modules/lodash/_baseMap.js":{"index":75,"hash":"d4dyLnzZcVXFzz5tCc58","parents":["node_modules/lodash/map.js"]},"node_modules/lodash/map.js":{"index":174,"hash":"Gq/1p28f40AzWuWuaNZr","parents":["node_modules/browserify-hmr/inc/index.js"]},"lib/d3.v4.min.js":{"index":2,"hash":"OQ21p6Qv+OWPZN6seiax","parents":["src/Flower.vue"]},"lib/flubber.min.js":{"index":3,"hash":"0J2dP1nKYdYW02iZGgdY","parents":["src/Flower.vue"]},"src/Flower.vue":{"index":209,"hash":"OFJtMd3IJuqQPdze4k3t","parents":["src/Main.vue"]},"node_modules/socket.io-parser/node_modules/ms/index.js":{"index":202,"hash":"HanVKm5AkV6MOdHRAMCT","parents":["node_modules/socket.io-parser/node_modules/debug/debug.js"]},"node_modules/socket.io-parser/node_modules/debug/debug.js":{"index":200,"hash":"yqdR7nJc7wxIHzFDNzG+","parents":["node_modules/socket.io-parser/node_modules/debug/browser.js"]},"node_modules/socket.io-parser/node_modules/debug/browser.js":{"index":199,"hash":"S76q28f1VPJIcCtJn1eq","parents":["node_modules/socket.io-parser/index.js"]},"node_modules/lodash/_matchesStrictComparable.js":{"index":132,"hash":"+OqsD2+K9liTMiGDT3Y4","parents":["node_modules/lodash/_baseMatchesProperty.js","node_modules/lodash/_baseMatches.js"]},"node_modules/lodash/_baseProperty.js":{"index":78,"hash":"kWjeI0xVLXmi/QD9uMSa","parents":["node_modules/lodash/property.js"]},"node_modules/lodash/_createBaseEach.js":{"index":93,"hash":"j95laCMPOgHsNDIKPdsp","parents":["node_modules/lodash/_baseEach.js"]},"node_modules/lodash/_baseForOwn.js":{"index":62,"hash":"wsDmgTH4vz3dPZ0ucogL","parents":["node_modules/lodash/_baseEach.js","node_modules/lodash/forOwn.js","node_modules/lodash/mapValues.js"]},"node_modules/lodash/forEach.js":{"index":158,"hash":"jIBP8hzrl/TALmTGIzfp","parents":["node_modules/browserify-hmr/inc/index.js"]},"node_modules/lodash/_createBaseFor.js":{"index":94,"hash":"OeCELp37VytZuCN6Xtr+","parents":["node_modules/lodash/_baseFor.js"]},"node_modules/lodash/_baseFor.js":{"index":61,"hash":"aDRpv9Ysd3A0P68kJrwN","parents":["node_modules/lodash/_baseForOwn.js"]},"node_modules/lodash/keys.js":{"index":173,"hash":"AzwEiE+T6QrvlRtU3Z5w","parents":["node_modules/lodash/_baseForOwn.js","node_modules/lodash/_getMatchData.js","node_modules/lodash/assign.js","node_modules/lodash/_getAllKeys.js"]},"node_modules/lodash/forOwn.js":{"index":159,"hash":"Phxs3xQLZ6eXpzVwNsD+","parents":["node_modules/browserify-hmr/inc/index.js"]},"node_modules/lodash/_baseTimes.js":{"index":83,"hash":"vQVHAQOeEJCBfl2Pb7SH","parents":["node_modules/lodash/_arrayLikeKeys.js"]},"node_modules/engine.io-parser/lib/keys.js":{"index":31,"hash":"oFyKNTA0twlyQVhVzp9n","parents":["node_modules/engine.io-parser/lib/browser.js"]},"node_modules/wtf-8/wtf-8.js":{"index":207,"hash":"ZwDH0lmWvisjeQRitLVT","parents":["node_modules/engine.io-parser/lib/browser.js"]},"node_modules/arraybuffer.slice/index.js":{"index":5,"hash":"RSb5Zx9CgX3adjzbvf/k","parents":["node_modules/engine.io-parser/lib/browser.js"]},"node_modules/after/index.js":{"index":4,"hash":"NzPfXWECmM8rW/6fdkcj","parents":["node_modules/engine.io-parser/lib/browser.js"]},"node_modules/blob/index.js":{"index":8,"hash":"oJwgFCPr7Au6OHJnm0nr","parents":["node_modules/engine.io-parser/lib/browser.js"]},"node_modules/base64-arraybuffer/lib/base64-arraybuffer.js":{"index":7,"hash":"8XSfHUrJJCZLdLVRE4Xb","parents":["node_modules/engine.io-parser/lib/browser.js"]},"node_modules/engine.io-parser/lib/browser.js":{"index":30,"hash":"vKBe7c47wMWV5Gv1BvUx","parents":["node_modules/engine.io-client/lib/transport.js","node_modules/engine.io-client/lib/transports/websocket.js","node_modules/engine.io-client/lib/transports/polling.js","node_modules/engine.io-client/lib/socket.js","node_modules/engine.io-client/lib/index.js"]},"node_modules/engine.io-client/node_modules/component-emitter/index.js":{"index":26,"hash":"oN00wp8CctwYNQv6ryzF","parents":["node_modules/engine.io-client/lib/transport.js","node_modules/engine.io-client/lib/transports/polling-xhr.js","node_modules/engine.io-client/lib/socket.js"]},"node_modules/parsejson/index.js":{"index":183,"hash":"4KaIOTKCE/r41o6HaMYa","parents":["node_modules/engine.io-client/lib/socket.js"]},"node_modules/parseqs/index.js":{"index":184,"hash":"bFhhlHvfi+om+FJQz11d","parents":["node_modules/engine.io-client/lib/transports/websocket.js","node_modules/engine.io-client/lib/transports/polling.js","node_modules/engine.io-client/lib/socket.js"]},"node_modules/lodash/_toKey.js":{"index":152,"hash":"Fva7n1CrZYGNyjdfKbt3","parents":["node_modules/lodash/property.js","node_modules/lodash/_hasPath.js","node_modules/lodash/_baseGet.js","node_modules/lodash/_baseMatchesProperty.js"]},"node_modules/lodash/isSymbol.js":{"index":171,"hash":"uIIRbxfQUXadoioCe5+N","parents":["node_modules/lodash/_toKey.js","node_modules/lodash/_isKey.js","node_modules/lodash/_baseToString.js"]},"node_modules/lodash/_isStrictComparable.js":{"index":120,"hash":"rbCwfHyEpUrj4Z98kqqR","parents":["node_modules/lodash/_getMatchData.js","node_modules/lodash/_baseMatchesProperty.js"]},"node_modules/lodash/_baseHasIn.js":{"index":66,"hash":"+7Ad7hoG+3kwDHiM0tNn","parents":["node_modules/lodash/hasIn.js"]},"node_modules/lodash/isObjectLike.js":{"index":170,"hash":"qRO1rf+QsMbu/mjKbljZ","parents":["node_modules/lodash/isSymbol.js","node_modules/lodash/_baseIsArguments.js","node_modules/lodash/isArguments.js","node_modules/lodash/_baseIsTypedArray.js","node_modules/lodash/_baseIsEqual.js"]},"node_modules/lodash/_basePropertyDeep.js":{"index":79,"hash":"Zfrh9AQz1Ry2yPu2pByv","parents":["node_modules/lodash/property.js"]},"node_modules/lodash/_baseGet.js":{"index":63,"hash":"EQWKE8NGYTKR53FHpqW6","parents":["node_modules/lodash/_basePropertyDeep.js","node_modules/lodash/get.js"]},"node_modules/lodash/property.js":{"index":177,"hash":"2hJfadtQXM/U3NbWpzGR","parents":["node_modules/lodash/_baseIteratee.js"]},"node_modules/lodash/_isKey.js":{"index":116,"hash":"D13Ok63JqktDADwmaeBu","parents":["node_modules/lodash/property.js","node_modules/lodash/_castPath.js","node_modules/lodash/_baseMatchesProperty.js"]},"node_modules/lodash/_getMatchData.js":{"index":102,"hash":"QzO7KFepX9S2dqnbKqgt","parents":["node_modules/lodash/_baseMatches.js"]},"node_modules/lodash/_objectToString.js":{"index":137,"hash":"gcC0LTB2iC1gNln4H3WI","parents":["node_modules/lodash/_baseGetTag.js"]},"node_modules/lodash/_apply.js":{"index":49,"hash":"XKkzZTghrlK6WTNW2Mdh","parents":["node_modules/lodash/_overRest.js"]},"node_modules/lodash/_overRest.js":{"index":139,"hash":"iDNTQ1nLZv3jwCD1fhKA","parents":["node_modules/lodash/_baseRest.js"]},"node_modules/lodash/_shortOut.js":{"index":145,"hash":"IoUeHrEOcxqBK99ieVfK","parents":["node_modules/lodash/_setToString.js"]},"node_modules/lodash/_overArg.js":{"index":138,"hash":"DrVoGwBMK8ywtUgJJMWJ","parents":["node_modules/lodash/_nativeKeys.js"]},"node_modules/lodash/_nativeKeys.js":{"index":135,"hash":"Ksoa4f854F0/NggsS0Yh","parents":["node_modules/lodash/_baseKeys.js"]},"node_modules/lodash/_baseKeys.js":{"index":74,"hash":"kmg69OeKnhCzjV1WMGzu","parents":["node_modules/lodash/keys.js"]},"node_modules/lodash/_baseUnary.js":{"index":85,"hash":"cMYMf5ZcCBeLWbK9TQmI","parents":["node_modules/lodash/isTypedArray.js"]},"node_modules/lodash/stubFalse.js":{"index":180,"hash":"bsNH9caMXr7Pdt8ruFJt","parents":["node_modules/lodash/isBuffer.js"]},"node_modules/lodash/_getValue.js":{"index":107,"hash":"ECu3UgrdoHGLOVPWr5mD","parents":["node_modules/lodash/_getNative.js"]},"node_modules/engine.io-client/lib/transport.js":{"index":19,"hash":"mp7fZlClWfLgH++23uT2","parents":["node_modules/engine.io-client/lib/transports/websocket.js","node_modules/engine.io-client/lib/transports/polling.js","node_modules/engine.io-client/lib/socket.js"]},"node_modules/browser-resolve/empty.js":{"index":9,"hash":"47DEQpj8HBSa+/TImW+5","parents":["node_modules/engine.io-client/lib/transports/websocket.js"]},"node_modules/lodash/_baseGetTag.js":{"index":65,"hash":"ydPbt27q/TAHvOyjdq/H","parents":["node_modules/lodash/isSymbol.js","node_modules/lodash/isFunction.js","node_modules/lodash/_baseIsArguments.js","node_modules/lodash/_baseIsTypedArray.js","node_modules/lodash/_getTag.js"]},"node_modules/lodash/_hasPath.js":{"index":108,"hash":"H9ddOWkLPRuFYq8fwTEv","parents":["node_modules/lodash/hasIn.js"]},"node_modules/lodash/_castPath.js":{"index":89,"hash":"GgKBkmr1sBRSb1yd72qJ","parents":["node_modules/lodash/_hasPath.js","node_modules/lodash/_baseGet.js"]},"node_modules/lodash/isArguments.js":{"index":163,"hash":"iJIbQ7nb4q+C1riPMj/b","parents":["node_modules/lodash/_hasPath.js","node_modules/lodash/_arrayLikeKeys.js"]},"node_modules/lodash/hasIn.js":{"index":161,"hash":"o6j7gwruD7qKNbgMUe0j","parents":["node_modules/lodash/_baseMatchesProperty.js"]},"node_modules/lodash/_stackDelete.js":{"index":147,"hash":"LXafI5DDGP0wDwfpw8/U","parents":["node_modules/lodash/_Stack.js"]},"node_modules/lodash/_stackGet.js":{"index":148,"hash":"BoHW4uFMtND7Gi+JPdJf","parents":["node_modules/lodash/_Stack.js"]},"node_modules/lodash/_stackHas.js":{"index":149,"hash":"thY5y8jBCnJMfegnSD/V","parents":["node_modules/lodash/_Stack.js"]},"node_modules/lodash/_Symbol.js":{"index":46,"hash":"I77NsH5p3PRVWpJOtN3+","parents":["node_modules/lodash/_getRawTag.js","node_modules/lodash/_baseGetTag.js","node_modules/lodash/_equalByTag.js","node_modules/lodash/_baseToString.js"]},"node_modules/lodash/_root.js":{"index":140,"hash":"MupxTyUFdnn90wmcJpPL","parents":["node_modules/lodash/_Symbol.js","node_modules/lodash/isBuffer.js","node_modules/lodash/_Uint8Array.js","node_modules/lodash/_Map.js","node_modules/lodash/_DataView.js","node_modules/lodash/_Promise.js","node_modules/lodash/_Set.js","node_modules/lodash/_WeakMap.js","node_modules/lodash/_coreJsData.js"]},"node_modules/lodash/_getRawTag.js":{"index":104,"hash":"MUL9l/iYFvZaG1vReTH3","parents":["node_modules/lodash/_baseGetTag.js"]},"node_modules/lodash/isFunction.js":{"index":167,"hash":"0gysC+rTcZlhPWD04ANh","parents":["node_modules/lodash/isArrayLike.js","node_modules/lodash/_baseIsNative.js"]},"node_modules/lodash/constant.js":{"index":155,"hash":"E/D07UC1hh81w2R6/inn","parents":["node_modules/lodash/_baseSetToString.js"]},"node_modules/lodash/_baseSetToString.js":{"index":81,"hash":"iLxL219sz9iCOrPJz82a","parents":["node_modules/lodash/_setToString.js"]},"node_modules/lodash/_defineProperty.js":{"index":95,"hash":"0CbMU6r+0Uq1gikE9oNA","parents":["node_modules/lodash/_baseSetToString.js","node_modules/lodash/_baseAssignValue.js"]},"node_modules/lodash/_setToString.js":{"index":144,"hash":"hu7pnSotmEJV3Wx9OsJa","parents":["node_modules/lodash/_baseRest.js"]},"node_modules/lodash/_baseRest.js":{"index":80,"hash":"SUX2Uj3EprmvmkcHcoY/","parents":["node_modules/lodash/_createAssigner.js"]},"node_modules/lodash/_createAssigner.js":{"index":92,"hash":"JEqSu7xxpSyH40Y4GJ+V","parents":["node_modules/lodash/assign.js"]},"node_modules/lodash/_baseIsArguments.js":{"index":67,"hash":"caWdwJw13ty+5+1x9erg","parents":["node_modules/lodash/isArguments.js"]},"node_modules/lodash/_baseIsTypedArray.js":{"index":72,"hash":"cPl0GH9tkUCpceUV6gAk","parents":["node_modules/lodash/isTypedArray.js"]},"node_modules/lodash/_freeGlobal.js":{"index":99,"hash":"XnLH3zOElVb8vOWnDO5f","parents":["node_modules/lodash/_nodeUtil.js","node_modules/lodash/_root.js"]},"node_modules/lodash/_nodeUtil.js":{"index":136,"hash":"a5iiX2Zkv5BTWgreCV8c","parents":["node_modules/lodash/isTypedArray.js"]},"node_modules/lodash/isTypedArray.js":{"index":172,"hash":"pNInOnl/2pKh0f1gDzOT","parents":["node_modules/lodash/_arrayLikeKeys.js","node_modules/lodash/_baseIsEqualDeep.js"]},"node_modules/lodash/isBuffer.js":{"index":166,"hash":"Uzhm1jNtW1f55Gsz24+8","parents":["node_modules/lodash/_arrayLikeKeys.js","node_modules/lodash/_baseIsEqualDeep.js"]},"node_modules/lodash/_arrayLikeKeys.js":{"index":52,"hash":"RWu/FT9WAfaDXPoucuiD","parents":["node_modules/lodash/keys.js"]},"node_modules/lodash/assign.js":{"index":154,"hash":"6X7UP3eqxcj6o2ias2ID","parents":["node_modules/browserify-hmr/inc/index.js"]},"node_modules/lodash/_toSource.js":{"index":153,"hash":"qhQsP8sNq2kil796yxWO","parents":["node_modules/lodash/_getTag.js","node_modules/lodash/_baseIsNative.js"]},"node_modules/engine.io-client/node_modules/ms/index.js":{"index":29,"hash":"+i3MPFzut0mh8LK6NCY0","parents":["node_modules/engine.io-client/node_modules/debug/debug.js"]},"node_modules/engine.io-client/node_modules/debug/debug.js":{"index":28,"hash":"5FZHGx7z7kdbTIz7MyR0","parents":["node_modules/engine.io-client/node_modules/debug/browser.js"]},"node_modules/engine.io-client/node_modules/debug/browser.js":{"index":27,"hash":"NJkibc9NCoFMO3Oki4VK","parents":["node_modules/engine.io-client/lib/transports/websocket.js","node_modules/engine.io-client/lib/transports/polling.js","node_modules/engine.io-client/lib/transports/polling-xhr.js","node_modules/engine.io-client/lib/socket.js"]},"node_modules/has-cors/index.js":{"index":34,"hash":"HwTb4UF/S089ZYA8hrRl","parents":["node_modules/engine.io-client/lib/xmlhttprequest.js"]},"node_modules/engine.io-client/lib/xmlhttprequest.js":{"index":25,"hash":"uHKT6miuBOlz2tXCoGK9","parents":["node_modules/engine.io-client/lib/transports/polling.js","node_modules/engine.io-client/lib/transports/polling-xhr.js","node_modules/engine.io-client/lib/transports/index.js"]},"node_modules/component-inherit/index.js":{"index":15,"hash":"T0Fqch4d4akvlr8bh7lc","parents":["node_modules/engine.io-client/lib/transports/websocket.js","node_modules/engine.io-client/lib/transports/polling-jsonp.js","node_modules/engine.io-client/lib/transports/polling.js","node_modules/engine.io-client/lib/transports/polling-xhr.js"]},"node_modules/yeast/index.js":{"index":208,"hash":"ZM3+5w4l/D2f6x7svySF","parents":["node_modules/engine.io-client/lib/transports/websocket.js","node_modules/engine.io-client/lib/transports/polling.js"]},"node_modules/engine.io-client/lib/transports/websocket.js":{"index":24,"hash":"/BItKg+bhgboGDOGyqoK","parents":["node_modules/engine.io-client/lib/transports/index.js"]},"node_modules/engine.io-client/lib/transports/polling-jsonp.js":{"index":21,"hash":"BQnCbyx+wtgM/vcRW2uq","parents":["node_modules/engine.io-client/lib/transports/index.js"]},"node_modules/engine.io-client/lib/transports/polling.js":{"index":23,"hash":"iR9NdLeAEs8vSYk/mMqT","parents":["node_modules/engine.io-client/lib/transports/polling-jsonp.js","node_modules/engine.io-client/lib/transports/polling-xhr.js"]},"node_modules/lodash/_mapToArray.js":{"index":131,"hash":"XUQTl0anVZnXaUOrmxD7","parents":["node_modules/lodash/_equalByTag.js"]},"node_modules/lodash/_setToArray.js":{"index":143,"hash":"gUyAUZoZS3v/gnhOBsLW","parents":["node_modules/lodash/_equalByTag.js"]},"node_modules/lodash/_cacheHas.js":{"index":87,"hash":"zwJaX7fkgHAdYeTtYO2G","parents":["node_modules/lodash/_equalArrays.js"]},"node_modules/lodash/_stackClear.js":{"index":146,"hash":"ibWAz8K0fFq6Bb0SS4B7","parents":["node_modules/lodash/_Stack.js"]},"node_modules/lodash/_ListCache.js":{"index":39,"hash":"KxC/aKLlcuOS+PWx1HyP","parents":["node_modules/lodash/_stackClear.js","node_modules/lodash/_mapCacheClear.js","node_modules/lodash/_stackSet.js","node_modules/lodash/_Stack.js"]},"node_modules/lodash/_listCacheClear.js":{"index":121,"hash":"CHLB/DjalyhgxdfpsCnW","parents":["node_modules/lodash/_ListCache.js"]},"node_modules/engine.io-client/lib/transports/polling-xhr.js":{"index":22,"hash":"5ilDWmCHEcM+EgToRIrw","parents":["node_modules/engine.io-client/lib/transports/index.js"]},"node_modules/engine.io-client/lib/transports/index.js":{"index":20,"hash":"1hYl9HAZjNyowQUyrbWc","parents":["node_modules/engine.io-client/lib/socket.js"]},"node_modules/engine.io-client/lib/socket.js":{"index":18,"hash":"cEzvjqk+Q1haQWGLD0Zq","parents":["node_modules/engine.io-client/lib/index.js"]},"node_modules/engine.io-client/lib/index.js":{"index":17,"hash":"G6QYuSNu0EcS+G5tR9NE","parents":["node_modules/engine.io-client/index.js"]},"node_modules/engine.io-client/index.js":{"index":16,"hash":"TaZh2zcEs5+SiarJ3uJN","parents":["node_modules/socket.io-client/lib/manager.js"]},"node_modules/socket.io-client/lib/manager.js":{"index":188,"hash":"ea8fbXBXjC66BIPF5Pam","parents":["node_modules/socket.io-client/lib/index.js"]},"node_modules/socket.io-client/lib/index.js":{"index":187,"hash":"s/15kyEjN0kWB5dYl/1h","parents":[]},"node_modules/lodash/_Uint8Array.js":{"index":47,"hash":"Zc6+hCmhnXc0Y6Asmckn","parents":["node_modules/lodash/_equalByTag.js"]},"node_modules/lodash/_equalByTag.js":{"index":97,"hash":"5sdsIGyCGshbuSoIxoXa","parents":["node_modules/lodash/_baseIsEqualDeep.js"]},"node_modules/lodash/_equalArrays.js":{"index":96,"hash":"FLnT7PvdDDobU/p0ty8u","parents":["node_modules/lodash/_equalByTag.js","node_modules/lodash/_baseIsEqualDeep.js"]},"node_modules/lodash/_Map.js":{"index":40,"hash":"aezyd9/dXR4WmT/cJk4B","parents":["node_modules/lodash/_getTag.js","node_modules/lodash/_mapCacheClear.js","node_modules/lodash/_stackSet.js"]},"node_modules/lodash/_getNative.js":{"index":103,"hash":"c5Ljj0yzzW4dPj+JomYZ","parents":["node_modules/lodash/_Map.js","node_modules/lodash/_DataView.js","node_modules/lodash/_Promise.js","node_modules/lodash/_Set.js","node_modules/lodash/_WeakMap.js","node_modules/lodash/_defineProperty.js","node_modules/lodash/_nativeCreate.js"]},"node_modules/lodash/_DataView.js":{"index":37,"hash":"N7jUbJyl5TusFXojFUuz","parents":["node_modules/lodash/_getTag.js"]},"node_modules/lodash/_Promise.js":{"index":42,"hash":"T4OR1RtxAOTYyC9xrI13","parents":["node_modules/lodash/_getTag.js"]},"node_modules/lodash/_Set.js":{"index":43,"hash":"BRcgMZjGEVgVhv4GaR6q","parents":["node_modules/lodash/_getTag.js"]},"node_modules/lodash/_WeakMap.js":{"index":48,"hash":"iuNSA30LsHH/h10pNsQ6","parents":["node_modules/lodash/_getTag.js"]},"node_modules/lodash/_getTag.js":{"index":106,"hash":"rZSqomckxeMx8IEK6dQG","parents":["node_modules/lodash/_baseIsEqualDeep.js"]},"node_modules/lodash/_setCacheAdd.js":{"index":141,"hash":"yUbHLrOe8uWgSDa2EOmH","parents":["node_modules/lodash/_SetCache.js"]},"node_modules/lodash/_setCacheHas.js":{"index":142,"hash":"aSivpixRq6mV4rYXkVzt","parents":["node_modules/lodash/_SetCache.js"]},"node_modules/lodash/_SetCache.js":{"index":44,"hash":"DKcn0VM+nqBtuxUGd3JS","parents":["node_modules/lodash/_equalArrays.js"]},"node_modules/lodash/_MapCache.js":{"index":41,"hash":"XbhLy8omrsa87tk7GrBc","parents":["node_modules/lodash/_SetCache.js","node_modules/lodash/memoize.js","node_modules/lodash/_stackSet.js"]},"node_modules/lodash/_listCacheGet.js":{"index":123,"hash":"SZAC3U/+BLssJw9WKbhb","parents":["node_modules/lodash/_ListCache.js"]},"node_modules/lodash/_assocIndexOf.js":{"index":57,"hash":"+YtyXqBKKXnwrSmv/2eU","parents":["node_modules/lodash/_listCacheGet.js","node_modules/lodash/_listCacheHas.js","node_modules/lodash/_listCacheSet.js","node_modules/lodash/_listCacheDelete.js"]},"node_modules/lodash/_listCacheHas.js":{"index":124,"hash":"2tu2JqPxTVjaJm/WbeGw","parents":["node_modules/lodash/_ListCache.js"]},"node_modules/lodash/_listCacheSet.js":{"index":125,"hash":"dVcwdgHP8vQHHPnX+pql","parents":["node_modules/lodash/_ListCache.js"]},"node_modules/lodash/_coreJsData.js":{"index":91,"hash":"mWDHPw3O0bwyURVR4xz+","parents":["node_modules/lodash/_isMasked.js"]},"node_modules/lodash/_isMasked.js":{"index":118,"hash":"vCLMgg9t+moWMD2eCyQw","parents":["node_modules/lodash/_baseIsNative.js"]},"node_modules/lodash/_baseIsNative.js":{"index":71,"hash":"HplAaZjQs9R/bNG2XV0a","parents":["node_modules/lodash/_getNative.js"]},"node_modules/lodash/mapValues.js":{"index":175,"hash":"wGzYh7rOmnr5NbNf31Xh","parents":["node_modules/browserify-hmr/inc/index.js"]},"node_modules/lodash/_baseToString.js":{"index":84,"hash":"AnA1FrHVlMlph8hPfQFk","parents":["node_modules/lodash/toString.js"]},"node_modules/lodash/toString.js":{"index":181,"hash":"u6lNu4mjQVTOavtG4Hpr","parents":["node_modules/lodash/_castPath.js"]},"node_modules/lodash/_arrayPush.js":{"index":54,"hash":"/EQp182bKyQYd9DyjHRq","parents":["node_modules/lodash/_baseGetAllKeys.js"]},"node_modules/lodash/_baseGetAllKeys.js":{"index":64,"hash":"G/yC9530/ahn/dgrrslT","parents":["node_modules/lodash/_getAllKeys.js"]},"node_modules/lodash/stubArray.js":{"index":179,"hash":"hpV3ZtG8dCYBLEBt0XqS","parents":["node_modules/lodash/_getSymbols.js"]},"node_modules/lodash/_getSymbols.js":{"index":105,"hash":"PoUL82x850fu8UHfzZjw","parents":["node_modules/lodash/_getAllKeys.js"]},"node_modules/lodash/_getAllKeys.js":{"index":100,"hash":"3JYThcdBa6xFuMLEJAcf","parents":["node_modules/lodash/_equalObjects.js"]},"node_modules/lodash/_equalObjects.js":{"index":98,"hash":"Rc9NYU8R1s/bWUnUOXOJ","parents":["node_modules/lodash/_baseIsEqualDeep.js"]},"node_modules/lodash/_baseIsEqualDeep.js":{"index":69,"hash":"a5Qj+02BWo5995Nobe+v","parents":["node_modules/lodash/_baseIsEqual.js"]},"node_modules/lodash/_Stack.js":{"index":45,"hash":"/wytiRFlfgg4krF9Qz6a","parents":["node_modules/lodash/_baseIsEqualDeep.js","node_modules/lodash/_baseIsMatch.js"]},"node_modules/lodash/_baseIsEqual.js":{"index":68,"hash":"IfD9jeZw2S45+s0BZ1L3","parents":["node_modules/lodash/_baseMatchesProperty.js","node_modules/lodash/_baseIsMatch.js"]},"node_modules/lodash/_listCacheDelete.js":{"index":122,"hash":"o3YDg6klGWlCS2PgzZy+","parents":["node_modules/lodash/_ListCache.js"]},"node_modules/lodash/_mapCacheGet.js":{"index":128,"hash":"dglUiNgT6mYn3/TLOqMD","parents":["node_modules/lodash/_MapCache.js"]},"node_modules/lodash/_getMapData.js":{"index":101,"hash":"ZdeLudBY90L64kFsAIQL","parents":["node_modules/lodash/_mapCacheGet.js","node_modules/lodash/_mapCacheHas.js","node_modules/lodash/_mapCacheSet.js","node_modules/lodash/_mapCacheDelete.js"]},"node_modules/lodash/_mapCacheHas.js":{"index":129,"hash":"S0HdvBVxOySQIIMRmtf0","parents":["node_modules/lodash/_MapCache.js"]},"node_modules/lodash/_mapCacheSet.js":{"index":130,"hash":"Rk8Cf6ZeJaOWzM2bXiED","parents":["node_modules/lodash/_MapCache.js"]},"node_modules/lodash/memoize.js":{"index":176,"hash":"avTk3nhklvyvSxLNiUwd","parents":["node_modules/lodash/_memoizeCapped.js"]},"node_modules/lodash/_memoizeCapped.js":{"index":133,"hash":"HacnckK3nw4vtSYbX7i/","parents":["node_modules/lodash/_stringToPath.js"]},"node_modules/lodash/_stringToPath.js":{"index":151,"hash":"nTlFZDUaGsY0w/l3Daka","parents":["node_modules/lodash/_castPath.js"]},"node_modules/lodash/get.js":{"index":160,"hash":"l8Xm0+dbrUDVfD0OVsKH","parents":["node_modules/lodash/_baseMatchesProperty.js"]},"node_modules/lodash/_baseMatchesProperty.js":{"index":77,"hash":"JUSg/+I63FvjCRBMWDG8","parents":["node_modules/lodash/_baseIteratee.js"]},"node_modules/lodash/_isKeyable.js":{"index":117,"hash":"NQsK9iVUkTA1EsHPdaK1","parents":["node_modules/lodash/_getMapData.js"]},"node_modules/lodash/_mapCacheDelete.js":{"index":127,"hash":"Y2RLt8NGt0Im9c9uXXcS","parents":["node_modules/lodash/_MapCache.js"]},"node_modules/lodash/_hashDelete.js":{"index":110,"hash":"CmVwjIdw4ONOgfUyiaMT","parents":["node_modules/lodash/_Hash.js"]},"node_modules/lodash/_hashGet.js":{"index":111,"hash":"dc0CR5GuEuyIhxwkyCwj","parents":["node_modules/lodash/_Hash.js"]},"node_modules/lodash/_nativeCreate.js":{"index":134,"hash":"QnEWfxsVWqcrQRLl5xaD","parents":["node_modules/lodash/_hashGet.js","node_modules/lodash/_hashHas.js","node_modules/lodash/_hashSet.js","node_modules/lodash/_hashClear.js"]},"node_modules/lodash/_hashHas.js":{"index":112,"hash":"fr70n7H4vKHBcQoEXEpO","parents":["node_modules/lodash/_Hash.js"]},"node_modules/lodash/_hashSet.js":{"index":113,"hash":"GANy9myYOl9CQUX6Hi+w","parents":["node_modules/lodash/_Hash.js"]},"node_modules/lodash/_hashClear.js":{"index":109,"hash":"2feZ9hRgUzW8Djw0JrqE","parents":["node_modules/lodash/_Hash.js"]},"node_modules/lodash/_Hash.js":{"index":38,"hash":"hTyKHFwLDhT8hzgE2zlD","parents":["node_modules/lodash/_mapCacheClear.js"]},"node_modules/lodash/_mapCacheClear.js":{"index":126,"hash":"6D5+Bp90PNozl9Vr8wu2","parents":["node_modules/lodash/_MapCache.js"]},"node_modules/lodash/_stackSet.js":{"index":150,"hash":"rFq/zAhyEaIffTCH45Gf","parents":["node_modules/lodash/_Stack.js"]},"node_modules/lodash/_baseIsMatch.js":{"index":70,"hash":"yrF79Y2F5RiVXHPZgzhK","parents":["node_modules/lodash/_baseMatches.js"]},"node_modules/lodash/_baseMatches.js":{"index":76,"hash":"eM6GzX+YFfSSvWUut1RW","parents":["node_modules/lodash/_baseIteratee.js"]},"node_modules/lodash/filter.js":{"index":157,"hash":"xHkJOO00v5Ew3tJEbs2H","parents":["node_modules/browserify-hmr/inc/index.js"]},"node_modules/browserify-hmr/inc/index.js":{"index":10,"hash":"5G3HDTLdc+ZbEjqV2asu","parents":[]},"src/family-tree/tree.js":{"index":212,"hash":"lXMZW1XAEQElZs9++Ugb","parents":["src/family-tree/index.vue"]},"src/family-tree/index.vue":{"index":211,"hash":"UrZ3ziQ0N6X7GEtejkby","parents":["src/Main.vue"]},"src/Main.vue":{"index":210,"hash":"O5dRN7y2crX7NWyetCfA","parents":["src/main.js"]},"src/main.js":{"index":213,"hash":"x3l8QVTDEupWfidviUq0","parents":[]}};
  var originalEntries = ["/Users/spencer/priv/spencermountain.github.io/src/main.js"];
  var updateUrl = null;
  var updateMode = "websocket";
  var supportModes = ["none","websocket"];
  var ignoreUnaccepted = true;
  var updateCacheBust = false;
  var bundleKey = "websocket:null";
  var sioPath = "./node_modules/socket.io-client/lib/index.js";
  var incPath = "./node_modules/browserify-hmr/inc/index.js";

  if (!global._hmr) {
    try {
      Object.defineProperty(global, '_hmr', {value: {}});
    } catch(e) {
      global._hmr = {};
    }
  }

  if (!Object.prototype.hasOwnProperty.call(global._hmr, bundleKey)) {
    // Temporary hack so requiring modules works before the _hmr values are
    // correctly initialized.
    global._hmr[bundleKey] = {initModule: function(){}};
  }

  var main = require(incPath);
  var isFirstRun = main(
    moduleDefs, cachedModules, moduleMeta, updateUrl,
    updateMode, supportModes, ignoreUnaccepted, updateCacheBust, bundleKey,
    sioPath ? require(sioPath) : null,
    typeof __filename !== 'undefined' && __filename,
    typeof __dirname !== 'undefined' && __dirname
  );
  if (isFirstRun) {
    for (var i=0, len=originalEntries.length; i<len; i++) {
      require(originalEntries[i]);
    }
  }
}).call(
  this,
  typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},
  arguments[3], arguments[4], arguments[5], arguments[6]
);

},{"./node_modules/browserify-hmr/inc/index.js":10,"./node_modules/socket.io-client/lib/index.js":187,"/Users/spencer/priv/spencermountain.github.io/src/main.js":213}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
